
DriveController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007898  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  08007a80  08007a80  00017a80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800815c  0800815c  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  0800815c  0800815c  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800815c  0800815c  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008160  08008160  00018160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  08008164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c64  20000228  0800838c  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000e8c  0800838c  00020e8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f951  00000000  00000000  00020251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002773  00000000  00000000  0002fba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ed0  00000000  00000000  00032318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000de8  00000000  00000000  000331e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b5a3  00000000  00000000  00033fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd48  00000000  00000000  0004f573  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c3b9  00000000  00000000  0005f2bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb674  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fb8  00000000  00000000  000fb6c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	20000228 	.word	0x20000228
 8000204:	00000000 	.word	0x00000000
 8000208:	08007a68 	.word	0x08007a68

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	2000022c 	.word	0x2000022c
 8000224:	08007a68 	.word	0x08007a68

08000228 <strcmp>:
 8000228:	f810 2b01 	ldrb.w	r2, [r0], #1
 800022c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000230:	2a01      	cmp	r2, #1
 8000232:	bf28      	it	cs
 8000234:	429a      	cmpcs	r2, r3
 8000236:	d0f7      	beq.n	8000228 <strcmp>
 8000238:	1ad0      	subs	r0, r2, r3
 800023a:	4770      	bx	lr

0800023c <strlen>:
 800023c:	4603      	mov	r3, r0
 800023e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000242:	2a00      	cmp	r2, #0
 8000244:	d1fb      	bne.n	800023e <strlen+0x2>
 8000246:	1a18      	subs	r0, r3, r0
 8000248:	3801      	subs	r0, #1
 800024a:	4770      	bx	lr

0800024c <__aeabi_drsub>:
 800024c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000250:	e002      	b.n	8000258 <__adddf3>
 8000252:	bf00      	nop

08000254 <__aeabi_dsub>:
 8000254:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000258 <__adddf3>:
 8000258:	b530      	push	{r4, r5, lr}
 800025a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000262:	ea94 0f05 	teq	r4, r5
 8000266:	bf08      	it	eq
 8000268:	ea90 0f02 	teqeq	r0, r2
 800026c:	bf1f      	itttt	ne
 800026e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000272:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000276:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027e:	f000 80e2 	beq.w	8000446 <__adddf3+0x1ee>
 8000282:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000286:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028a:	bfb8      	it	lt
 800028c:	426d      	neglt	r5, r5
 800028e:	dd0c      	ble.n	80002aa <__adddf3+0x52>
 8000290:	442c      	add	r4, r5
 8000292:	ea80 0202 	eor.w	r2, r0, r2
 8000296:	ea81 0303 	eor.w	r3, r1, r3
 800029a:	ea82 0000 	eor.w	r0, r2, r0
 800029e:	ea83 0101 	eor.w	r1, r3, r1
 80002a2:	ea80 0202 	eor.w	r2, r0, r2
 80002a6:	ea81 0303 	eor.w	r3, r1, r3
 80002aa:	2d36      	cmp	r5, #54	; 0x36
 80002ac:	bf88      	it	hi
 80002ae:	bd30      	pophi	{r4, r5, pc}
 80002b0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x70>
 80002c2:	4240      	negs	r0, r0
 80002c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d4:	d002      	beq.n	80002dc <__adddf3+0x84>
 80002d6:	4252      	negs	r2, r2
 80002d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002dc:	ea94 0f05 	teq	r4, r5
 80002e0:	f000 80a7 	beq.w	8000432 <__adddf3+0x1da>
 80002e4:	f1a4 0401 	sub.w	r4, r4, #1
 80002e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80002ec:	db0d      	blt.n	800030a <__adddf3+0xb2>
 80002ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f2:	fa22 f205 	lsr.w	r2, r2, r5
 80002f6:	1880      	adds	r0, r0, r2
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000300:	1880      	adds	r0, r0, r2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	4159      	adcs	r1, r3
 8000308:	e00e      	b.n	8000328 <__adddf3+0xd0>
 800030a:	f1a5 0520 	sub.w	r5, r5, #32
 800030e:	f10e 0e20 	add.w	lr, lr, #32
 8000312:	2a01      	cmp	r2, #1
 8000314:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000318:	bf28      	it	cs
 800031a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031e:	fa43 f305 	asr.w	r3, r3, r5
 8000322:	18c0      	adds	r0, r0, r3
 8000324:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000328:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800032c:	d507      	bpl.n	800033e <__adddf3+0xe6>
 800032e:	f04f 0e00 	mov.w	lr, #0
 8000332:	f1dc 0c00 	rsbs	ip, ip, #0
 8000336:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033a:	eb6e 0101 	sbc.w	r1, lr, r1
 800033e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000342:	d31b      	bcc.n	800037c <__adddf3+0x124>
 8000344:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000348:	d30c      	bcc.n	8000364 <__adddf3+0x10c>
 800034a:	0849      	lsrs	r1, r1, #1
 800034c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000350:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000354:	f104 0401 	add.w	r4, r4, #1
 8000358:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800035c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000360:	f080 809a 	bcs.w	8000498 <__adddf3+0x240>
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	bf08      	it	eq
 800036a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036e:	f150 0000 	adcs.w	r0, r0, #0
 8000372:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000376:	ea41 0105 	orr.w	r1, r1, r5
 800037a:	bd30      	pop	{r4, r5, pc}
 800037c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000380:	4140      	adcs	r0, r0
 8000382:	eb41 0101 	adc.w	r1, r1, r1
 8000386:	3c01      	subs	r4, #1
 8000388:	bf28      	it	cs
 800038a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800038e:	d2e9      	bcs.n	8000364 <__adddf3+0x10c>
 8000390:	f091 0f00 	teq	r1, #0
 8000394:	bf04      	itt	eq
 8000396:	4601      	moveq	r1, r0
 8000398:	2000      	moveq	r0, #0
 800039a:	fab1 f381 	clz	r3, r1
 800039e:	bf08      	it	eq
 80003a0:	3320      	addeq	r3, #32
 80003a2:	f1a3 030b 	sub.w	r3, r3, #11
 80003a6:	f1b3 0220 	subs.w	r2, r3, #32
 80003aa:	da0c      	bge.n	80003c6 <__adddf3+0x16e>
 80003ac:	320c      	adds	r2, #12
 80003ae:	dd08      	ble.n	80003c2 <__adddf3+0x16a>
 80003b0:	f102 0c14 	add.w	ip, r2, #20
 80003b4:	f1c2 020c 	rsb	r2, r2, #12
 80003b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80003bc:	fa21 f102 	lsr.w	r1, r1, r2
 80003c0:	e00c      	b.n	80003dc <__adddf3+0x184>
 80003c2:	f102 0214 	add.w	r2, r2, #20
 80003c6:	bfd8      	it	le
 80003c8:	f1c2 0c20 	rsble	ip, r2, #32
 80003cc:	fa01 f102 	lsl.w	r1, r1, r2
 80003d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d4:	bfdc      	itt	le
 80003d6:	ea41 010c 	orrle.w	r1, r1, ip
 80003da:	4090      	lslle	r0, r2
 80003dc:	1ae4      	subs	r4, r4, r3
 80003de:	bfa2      	ittt	ge
 80003e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e4:	4329      	orrge	r1, r5
 80003e6:	bd30      	popge	{r4, r5, pc}
 80003e8:	ea6f 0404 	mvn.w	r4, r4
 80003ec:	3c1f      	subs	r4, #31
 80003ee:	da1c      	bge.n	800042a <__adddf3+0x1d2>
 80003f0:	340c      	adds	r4, #12
 80003f2:	dc0e      	bgt.n	8000412 <__adddf3+0x1ba>
 80003f4:	f104 0414 	add.w	r4, r4, #20
 80003f8:	f1c4 0220 	rsb	r2, r4, #32
 80003fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000400:	fa01 f302 	lsl.w	r3, r1, r2
 8000404:	ea40 0003 	orr.w	r0, r0, r3
 8000408:	fa21 f304 	lsr.w	r3, r1, r4
 800040c:	ea45 0103 	orr.w	r1, r5, r3
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	f1c4 040c 	rsb	r4, r4, #12
 8000416:	f1c4 0220 	rsb	r2, r4, #32
 800041a:	fa20 f002 	lsr.w	r0, r0, r2
 800041e:	fa01 f304 	lsl.w	r3, r1, r4
 8000422:	ea40 0003 	orr.w	r0, r0, r3
 8000426:	4629      	mov	r1, r5
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	fa21 f004 	lsr.w	r0, r1, r4
 800042e:	4629      	mov	r1, r5
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	f094 0f00 	teq	r4, #0
 8000436:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043a:	bf06      	itte	eq
 800043c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000440:	3401      	addeq	r4, #1
 8000442:	3d01      	subne	r5, #1
 8000444:	e74e      	b.n	80002e4 <__adddf3+0x8c>
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf18      	it	ne
 800044c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000450:	d029      	beq.n	80004a6 <__adddf3+0x24e>
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	d005      	beq.n	800046a <__adddf3+0x212>
 800045e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000462:	bf04      	itt	eq
 8000464:	4619      	moveq	r1, r3
 8000466:	4610      	moveq	r0, r2
 8000468:	bd30      	pop	{r4, r5, pc}
 800046a:	ea91 0f03 	teq	r1, r3
 800046e:	bf1e      	ittt	ne
 8000470:	2100      	movne	r1, #0
 8000472:	2000      	movne	r0, #0
 8000474:	bd30      	popne	{r4, r5, pc}
 8000476:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047a:	d105      	bne.n	8000488 <__adddf3+0x230>
 800047c:	0040      	lsls	r0, r0, #1
 800047e:	4149      	adcs	r1, r1
 8000480:	bf28      	it	cs
 8000482:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000486:	bd30      	pop	{r4, r5, pc}
 8000488:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800048c:	bf3c      	itt	cc
 800048e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000492:	bd30      	popcc	{r4, r5, pc}
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000498:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800049c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a0:	f04f 0000 	mov.w	r0, #0
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004aa:	bf1a      	itte	ne
 80004ac:	4619      	movne	r1, r3
 80004ae:	4610      	movne	r0, r2
 80004b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b4:	bf1c      	itt	ne
 80004b6:	460b      	movne	r3, r1
 80004b8:	4602      	movne	r2, r0
 80004ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004be:	bf06      	itte	eq
 80004c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c4:	ea91 0f03 	teqeq	r1, r3
 80004c8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	bf00      	nop

080004d0 <__aeabi_ui2d>:
 80004d0:	f090 0f00 	teq	r0, #0
 80004d4:	bf04      	itt	eq
 80004d6:	2100      	moveq	r1, #0
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e4:	f04f 0500 	mov.w	r5, #0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e750      	b.n	8000390 <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_i2d>:
 80004f0:	f090 0f00 	teq	r0, #0
 80004f4:	bf04      	itt	eq
 80004f6:	2100      	moveq	r1, #0
 80004f8:	4770      	bxeq	lr
 80004fa:	b530      	push	{r4, r5, lr}
 80004fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000500:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000504:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000508:	bf48      	it	mi
 800050a:	4240      	negmi	r0, r0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e73e      	b.n	8000390 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_f2d>:
 8000514:	0042      	lsls	r2, r0, #1
 8000516:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051a:	ea4f 0131 	mov.w	r1, r1, rrx
 800051e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000522:	bf1f      	itttt	ne
 8000524:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000528:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800052c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000530:	4770      	bxne	lr
 8000532:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000536:	bf08      	it	eq
 8000538:	4770      	bxeq	lr
 800053a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800053e:	bf04      	itt	eq
 8000540:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000544:	4770      	bxeq	lr
 8000546:	b530      	push	{r4, r5, lr}
 8000548:	f44f 7460 	mov.w	r4, #896	; 0x380
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000554:	e71c      	b.n	8000390 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_ul2d>:
 8000558:	ea50 0201 	orrs.w	r2, r0, r1
 800055c:	bf08      	it	eq
 800055e:	4770      	bxeq	lr
 8000560:	b530      	push	{r4, r5, lr}
 8000562:	f04f 0500 	mov.w	r5, #0
 8000566:	e00a      	b.n	800057e <__aeabi_l2d+0x16>

08000568 <__aeabi_l2d>:
 8000568:	ea50 0201 	orrs.w	r2, r0, r1
 800056c:	bf08      	it	eq
 800056e:	4770      	bxeq	lr
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000576:	d502      	bpl.n	800057e <__aeabi_l2d+0x16>
 8000578:	4240      	negs	r0, r0
 800057a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000582:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000586:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058a:	f43f aed8 	beq.w	800033e <__adddf3+0xe6>
 800058e:	f04f 0203 	mov.w	r2, #3
 8000592:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000596:	bf18      	it	ne
 8000598:	3203      	addne	r2, #3
 800059a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059e:	bf18      	it	ne
 80005a0:	3203      	addne	r2, #3
 80005a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a6:	f1c2 0320 	rsb	r3, r2, #32
 80005aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b6:	ea40 000e 	orr.w	r0, r0, lr
 80005ba:	fa21 f102 	lsr.w	r1, r1, r2
 80005be:	4414      	add	r4, r2
 80005c0:	e6bd      	b.n	800033e <__adddf3+0xe6>
 80005c2:	bf00      	nop

080005c4 <__aeabi_dmul>:
 80005c4:	b570      	push	{r4, r5, r6, lr}
 80005c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d2:	bf1d      	ittte	ne
 80005d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d8:	ea94 0f0c 	teqne	r4, ip
 80005dc:	ea95 0f0c 	teqne	r5, ip
 80005e0:	f000 f8de 	bleq	80007a0 <__aeabi_dmul+0x1dc>
 80005e4:	442c      	add	r4, r5
 80005e6:	ea81 0603 	eor.w	r6, r1, r3
 80005ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f6:	bf18      	it	ne
 80005f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000600:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000604:	d038      	beq.n	8000678 <__aeabi_dmul+0xb4>
 8000606:	fba0 ce02 	umull	ip, lr, r0, r2
 800060a:	f04f 0500 	mov.w	r5, #0
 800060e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000612:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000616:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061a:	f04f 0600 	mov.w	r6, #0
 800061e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000622:	f09c 0f00 	teq	ip, #0
 8000626:	bf18      	it	ne
 8000628:	f04e 0e01 	orrne.w	lr, lr, #1
 800062c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000630:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000634:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000638:	d204      	bcs.n	8000644 <__aeabi_dmul+0x80>
 800063a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063e:	416d      	adcs	r5, r5
 8000640:	eb46 0606 	adc.w	r6, r6, r6
 8000644:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000648:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800064c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000650:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000654:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000658:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800065c:	bf88      	it	hi
 800065e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000662:	d81e      	bhi.n	80006a2 <__aeabi_dmul+0xde>
 8000664:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000668:	bf08      	it	eq
 800066a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066e:	f150 0000 	adcs.w	r0, r0, #0
 8000672:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000676:	bd70      	pop	{r4, r5, r6, pc}
 8000678:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800067c:	ea46 0101 	orr.w	r1, r6, r1
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	ea81 0103 	eor.w	r1, r1, r3
 8000688:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800068c:	bfc2      	ittt	gt
 800068e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000692:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000696:	bd70      	popgt	{r4, r5, r6, pc}
 8000698:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800069c:	f04f 0e00 	mov.w	lr, #0
 80006a0:	3c01      	subs	r4, #1
 80006a2:	f300 80ab 	bgt.w	80007fc <__aeabi_dmul+0x238>
 80006a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006aa:	bfde      	ittt	le
 80006ac:	2000      	movle	r0, #0
 80006ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd70      	pople	{r4, r5, r6, pc}
 80006b4:	f1c4 0400 	rsb	r4, r4, #0
 80006b8:	3c20      	subs	r4, #32
 80006ba:	da35      	bge.n	8000728 <__aeabi_dmul+0x164>
 80006bc:	340c      	adds	r4, #12
 80006be:	dc1b      	bgt.n	80006f8 <__aeabi_dmul+0x134>
 80006c0:	f104 0414 	add.w	r4, r4, #20
 80006c4:	f1c4 0520 	rsb	r5, r4, #32
 80006c8:	fa00 f305 	lsl.w	r3, r0, r5
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f205 	lsl.w	r2, r1, r5
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	fa21 f604 	lsr.w	r6, r1, r4
 80006e8:	eb42 0106 	adc.w	r1, r2, r6
 80006ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f0:	bf08      	it	eq
 80006f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f6:	bd70      	pop	{r4, r5, r6, pc}
 80006f8:	f1c4 040c 	rsb	r4, r4, #12
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f304 	lsl.w	r3, r0, r4
 8000704:	fa20 f005 	lsr.w	r0, r0, r5
 8000708:	fa01 f204 	lsl.w	r2, r1, r4
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	f141 0100 	adc.w	r1, r1, #0
 800071c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000720:	bf08      	it	eq
 8000722:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f205 	lsl.w	r2, r0, r5
 8000730:	ea4e 0e02 	orr.w	lr, lr, r2
 8000734:	fa20 f304 	lsr.w	r3, r0, r4
 8000738:	fa01 f205 	lsl.w	r2, r1, r5
 800073c:	ea43 0302 	orr.w	r3, r3, r2
 8000740:	fa21 f004 	lsr.w	r0, r1, r4
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	fa21 f204 	lsr.w	r2, r1, r4
 800074c:	ea20 0002 	bic.w	r0, r0, r2
 8000750:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000754:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000758:	bf08      	it	eq
 800075a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f094 0f00 	teq	r4, #0
 8000764:	d10f      	bne.n	8000786 <__aeabi_dmul+0x1c2>
 8000766:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076a:	0040      	lsls	r0, r0, #1
 800076c:	eb41 0101 	adc.w	r1, r1, r1
 8000770:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000774:	bf08      	it	eq
 8000776:	3c01      	subeq	r4, #1
 8000778:	d0f7      	beq.n	800076a <__aeabi_dmul+0x1a6>
 800077a:	ea41 0106 	orr.w	r1, r1, r6
 800077e:	f095 0f00 	teq	r5, #0
 8000782:	bf18      	it	ne
 8000784:	4770      	bxne	lr
 8000786:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078a:	0052      	lsls	r2, r2, #1
 800078c:	eb43 0303 	adc.w	r3, r3, r3
 8000790:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000794:	bf08      	it	eq
 8000796:	3d01      	subeq	r5, #1
 8000798:	d0f7      	beq.n	800078a <__aeabi_dmul+0x1c6>
 800079a:	ea43 0306 	orr.w	r3, r3, r6
 800079e:	4770      	bx	lr
 80007a0:	ea94 0f0c 	teq	r4, ip
 80007a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a8:	bf18      	it	ne
 80007aa:	ea95 0f0c 	teqne	r5, ip
 80007ae:	d00c      	beq.n	80007ca <__aeabi_dmul+0x206>
 80007b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b4:	bf18      	it	ne
 80007b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ba:	d1d1      	bne.n	8000760 <__aeabi_dmul+0x19c>
 80007bc:	ea81 0103 	eor.w	r1, r1, r3
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ce:	bf06      	itte	eq
 80007d0:	4610      	moveq	r0, r2
 80007d2:	4619      	moveq	r1, r3
 80007d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d8:	d019      	beq.n	800080e <__aeabi_dmul+0x24a>
 80007da:	ea94 0f0c 	teq	r4, ip
 80007de:	d102      	bne.n	80007e6 <__aeabi_dmul+0x222>
 80007e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e4:	d113      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007e6:	ea95 0f0c 	teq	r5, ip
 80007ea:	d105      	bne.n	80007f8 <__aeabi_dmul+0x234>
 80007ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f0:	bf1c      	itt	ne
 80007f2:	4610      	movne	r0, r2
 80007f4:	4619      	movne	r1, r3
 80007f6:	d10a      	bne.n	800080e <__aeabi_dmul+0x24a>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000804:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000812:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000816:	bd70      	pop	{r4, r5, r6, pc}

08000818 <__aeabi_ddiv>:
 8000818:	b570      	push	{r4, r5, r6, lr}
 800081a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800081e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000826:	bf1d      	ittte	ne
 8000828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800082c:	ea94 0f0c 	teqne	r4, ip
 8000830:	ea95 0f0c 	teqne	r5, ip
 8000834:	f000 f8a7 	bleq	8000986 <__aeabi_ddiv+0x16e>
 8000838:	eba4 0405 	sub.w	r4, r4, r5
 800083c:	ea81 0e03 	eor.w	lr, r1, r3
 8000840:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000844:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000848:	f000 8088 	beq.w	800095c <__aeabi_ddiv+0x144>
 800084c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000850:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000854:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000858:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800085c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000860:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000864:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000868:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800086c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000870:	429d      	cmp	r5, r3
 8000872:	bf08      	it	eq
 8000874:	4296      	cmpeq	r6, r2
 8000876:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800087e:	d202      	bcs.n	8000886 <__aeabi_ddiv+0x6e>
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	1ab6      	subs	r6, r6, r2
 8000888:	eb65 0503 	sbc.w	r5, r5, r3
 800088c:	085b      	lsrs	r3, r3, #1
 800088e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000892:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000896:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ba:	bf22      	ittt	cs
 80008bc:	1ab6      	subcs	r6, r6, r2
 80008be:	4675      	movcs	r5, lr
 80008c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d2:	bf22      	ittt	cs
 80008d4:	1ab6      	subcs	r6, r6, r2
 80008d6:	4675      	movcs	r5, lr
 80008d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008dc:	085b      	lsrs	r3, r3, #1
 80008de:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ea:	bf22      	ittt	cs
 80008ec:	1ab6      	subcs	r6, r6, r2
 80008ee:	4675      	movcs	r5, lr
 80008f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f8:	d018      	beq.n	800092c <__aeabi_ddiv+0x114>
 80008fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000902:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000906:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000912:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000916:	d1c0      	bne.n	800089a <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	d10b      	bne.n	8000936 <__aeabi_ddiv+0x11e>
 800091e:	ea41 0100 	orr.w	r1, r1, r0
 8000922:	f04f 0000 	mov.w	r0, #0
 8000926:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092a:	e7b6      	b.n	800089a <__aeabi_ddiv+0x82>
 800092c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000930:	bf04      	itt	eq
 8000932:	4301      	orreq	r1, r0
 8000934:	2000      	moveq	r0, #0
 8000936:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093a:	bf88      	it	hi
 800093c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000940:	f63f aeaf 	bhi.w	80006a2 <__aeabi_dmul+0xde>
 8000944:	ebb5 0c03 	subs.w	ip, r5, r3
 8000948:	bf04      	itt	eq
 800094a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000952:	f150 0000 	adcs.w	r0, r0, #0
 8000956:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000960:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000964:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000968:	bfc2      	ittt	gt
 800096a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000972:	bd70      	popgt	{r4, r5, r6, pc}
 8000974:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000978:	f04f 0e00 	mov.w	lr, #0
 800097c:	3c01      	subs	r4, #1
 800097e:	e690      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000980:	ea45 0e06 	orr.w	lr, r5, r6
 8000984:	e68d      	b.n	80006a2 <__aeabi_dmul+0xde>
 8000986:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098a:	ea94 0f0c 	teq	r4, ip
 800098e:	bf08      	it	eq
 8000990:	ea95 0f0c 	teqeq	r5, ip
 8000994:	f43f af3b 	beq.w	800080e <__aeabi_dmul+0x24a>
 8000998:	ea94 0f0c 	teq	r4, ip
 800099c:	d10a      	bne.n	80009b4 <__aeabi_ddiv+0x19c>
 800099e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a2:	f47f af34 	bne.w	800080e <__aeabi_dmul+0x24a>
 80009a6:	ea95 0f0c 	teq	r5, ip
 80009aa:	f47f af25 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e72c      	b.n	800080e <__aeabi_dmul+0x24a>
 80009b4:	ea95 0f0c 	teq	r5, ip
 80009b8:	d106      	bne.n	80009c8 <__aeabi_ddiv+0x1b0>
 80009ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009be:	f43f aefd 	beq.w	80007bc <__aeabi_dmul+0x1f8>
 80009c2:	4610      	mov	r0, r2
 80009c4:	4619      	mov	r1, r3
 80009c6:	e722      	b.n	800080e <__aeabi_dmul+0x24a>
 80009c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009cc:	bf18      	it	ne
 80009ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d2:	f47f aec5 	bne.w	8000760 <__aeabi_dmul+0x19c>
 80009d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009da:	f47f af0d 	bne.w	80007f8 <__aeabi_dmul+0x234>
 80009de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e2:	f47f aeeb 	bne.w	80007bc <__aeabi_dmul+0x1f8>
 80009e6:	e712      	b.n	800080e <__aeabi_dmul+0x24a>

080009e8 <__gedf2>:
 80009e8:	f04f 3cff 	mov.w	ip, #4294967295
 80009ec:	e006      	b.n	80009fc <__cmpdf2+0x4>
 80009ee:	bf00      	nop

080009f0 <__ledf2>:
 80009f0:	f04f 0c01 	mov.w	ip, #1
 80009f4:	e002      	b.n	80009fc <__cmpdf2+0x4>
 80009f6:	bf00      	nop

080009f8 <__cmpdf2>:
 80009f8:	f04f 0c01 	mov.w	ip, #1
 80009fc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a0c:	bf18      	it	ne
 8000a0e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a12:	d01b      	beq.n	8000a4c <__cmpdf2+0x54>
 8000a14:	b001      	add	sp, #4
 8000a16:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1a:	bf0c      	ite	eq
 8000a1c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a20:	ea91 0f03 	teqne	r1, r3
 8000a24:	bf02      	ittt	eq
 8000a26:	ea90 0f02 	teqeq	r0, r2
 8000a2a:	2000      	moveq	r0, #0
 8000a2c:	4770      	bxeq	lr
 8000a2e:	f110 0f00 	cmn.w	r0, #0
 8000a32:	ea91 0f03 	teq	r1, r3
 8000a36:	bf58      	it	pl
 8000a38:	4299      	cmppl	r1, r3
 8000a3a:	bf08      	it	eq
 8000a3c:	4290      	cmpeq	r0, r2
 8000a3e:	bf2c      	ite	cs
 8000a40:	17d8      	asrcs	r0, r3, #31
 8000a42:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a46:	f040 0001 	orr.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__cmpdf2+0x64>
 8000a56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5a:	d107      	bne.n	8000a6c <__cmpdf2+0x74>
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a64:	d1d6      	bne.n	8000a14 <__cmpdf2+0x1c>
 8000a66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6a:	d0d3      	beq.n	8000a14 <__cmpdf2+0x1c>
 8000a6c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <__aeabi_cdrcmple>:
 8000a74:	4684      	mov	ip, r0
 8000a76:	4610      	mov	r0, r2
 8000a78:	4662      	mov	r2, ip
 8000a7a:	468c      	mov	ip, r1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4663      	mov	r3, ip
 8000a80:	e000      	b.n	8000a84 <__aeabi_cdcmpeq>
 8000a82:	bf00      	nop

08000a84 <__aeabi_cdcmpeq>:
 8000a84:	b501      	push	{r0, lr}
 8000a86:	f7ff ffb7 	bl	80009f8 <__cmpdf2>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	bf48      	it	mi
 8000a8e:	f110 0f00 	cmnmi.w	r0, #0
 8000a92:	bd01      	pop	{r0, pc}

08000a94 <__aeabi_dcmpeq>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff fff4 	bl	8000a84 <__aeabi_cdcmpeq>
 8000a9c:	bf0c      	ite	eq
 8000a9e:	2001      	moveq	r0, #1
 8000aa0:	2000      	movne	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmplt>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffea 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ab0:	bf34      	ite	cc
 8000ab2:	2001      	movcc	r0, #1
 8000ab4:	2000      	movcs	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmple>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffe0 	bl	8000a84 <__aeabi_cdcmpeq>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpge>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffce 	bl	8000a74 <__aeabi_cdrcmple>
 8000ad8:	bf94      	ite	ls
 8000ada:	2001      	movls	r0, #1
 8000adc:	2000      	movhi	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmpgt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffc4 	bl	8000a74 <__aeabi_cdrcmple>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_d2iz>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b00:	d215      	bcs.n	8000b2e <__aeabi_d2iz+0x36>
 8000b02:	d511      	bpl.n	8000b28 <__aeabi_d2iz+0x30>
 8000b04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b0c:	d912      	bls.n	8000b34 <__aeabi_d2iz+0x3c>
 8000b0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	4770      	bx	lr
 8000b28:	f04f 0000 	mov.w	r0, #0
 8000b2c:	4770      	bx	lr
 8000b2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b32:	d105      	bne.n	8000b40 <__aeabi_d2iz+0x48>
 8000b34:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	bf08      	it	eq
 8000b3a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b3e:	4770      	bx	lr
 8000b40:	f04f 0000 	mov.w	r0, #0
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2lz>:
 8000b88:	b538      	push	{r3, r4, r5, lr}
 8000b8a:	4605      	mov	r5, r0
 8000b8c:	460c      	mov	r4, r1
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2300      	movs	r3, #0
 8000b92:	4628      	mov	r0, r5
 8000b94:	4621      	mov	r1, r4
 8000b96:	f7ff ff87 	bl	8000aa8 <__aeabi_dcmplt>
 8000b9a:	b928      	cbnz	r0, 8000ba8 <__aeabi_d2lz+0x20>
 8000b9c:	4628      	mov	r0, r5
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ba4:	f000 b80a 	b.w	8000bbc <__aeabi_d2ulz>
 8000ba8:	4628      	mov	r0, r5
 8000baa:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000bae:	f000 f805 	bl	8000bbc <__aeabi_d2ulz>
 8000bb2:	4240      	negs	r0, r0
 8000bb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb8:	bd38      	pop	{r3, r4, r5, pc}
 8000bba:	bf00      	nop

08000bbc <__aeabi_d2ulz>:
 8000bbc:	b5d0      	push	{r4, r6, r7, lr}
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <__aeabi_d2ulz+0x34>)
 8000bc2:	4606      	mov	r6, r0
 8000bc4:	460f      	mov	r7, r1
 8000bc6:	f7ff fcfd 	bl	80005c4 <__aeabi_dmul>
 8000bca:	f7ff ffbd 	bl	8000b48 <__aeabi_d2uiz>
 8000bce:	4604      	mov	r4, r0
 8000bd0:	f7ff fc7e 	bl	80004d0 <__aeabi_ui2d>
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	4b07      	ldr	r3, [pc, #28]	; (8000bf4 <__aeabi_d2ulz+0x38>)
 8000bd8:	f7ff fcf4 	bl	80005c4 <__aeabi_dmul>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	4630      	mov	r0, r6
 8000be2:	4639      	mov	r1, r7
 8000be4:	f7ff fb36 	bl	8000254 <__aeabi_dsub>
 8000be8:	f7ff ffae 	bl	8000b48 <__aeabi_d2uiz>
 8000bec:	4621      	mov	r1, r4
 8000bee:	bdd0      	pop	{r4, r6, r7, pc}
 8000bf0:	3df00000 	.word	0x3df00000
 8000bf4:	41f00000 	.word	0x41f00000

08000bf8 <InitDriveData>:


	}
}

void InitDriveData(DriveTypeDef *drive){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]

	drive->acceleration = 0.0;
 8000c00:	6879      	ldr	r1, [r7, #4]
 8000c02:	f04f 0200 	mov.w	r2, #0
 8000c06:	f04f 0300 	mov.w	r3, #0
 8000c0a:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	drive->currentReal = 0.0;
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 0200 	mov.w	r2, #0
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	drive->currentImaginary = 0.0;
 8000c1c:	6879      	ldr	r1, [r7, #4]
 8000c1e:	f04f 0200 	mov.w	r2, #0
 8000c22:	f04f 0300 	mov.w	r3, #0
 8000c26:	e9c1 231c 	strd	r2, r3, [r1, #112]	; 0x70
	drive->syncCurrent = 0.0;
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 0200 	mov.w	r2, #0
 8000c30:	f04f 0300 	mov.w	r3, #0
 8000c34:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78
	drive->driveMode = 5;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2205      	movs	r2, #5
 8000c3c:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
	drive->isConnected = FALSE;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 23c9 	strb.w	r2, [r3, #969]	; 0x3c9
	drive->isForwardMotion = TRUE;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	f883 23db 	strb.w	r2, [r3, #987]	; 0x3db
	drive->deceleration = 2000;
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	f04f 0200 	mov.w	r2, #0
 8000c56:	4b38      	ldr	r3, [pc, #224]	; (8000d38 <InitDriveData+0x140>)
 8000c58:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	drive->acceleration = 2000;
 8000c5c:	6879      	ldr	r1, [r7, #4]
 8000c5e:	f04f 0200 	mov.w	r2, #0
 8000c62:	4b35      	ldr	r3, [pc, #212]	; (8000d38 <InitDriveData+0x140>)
 8000c64:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	drive->speed = 10000;
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	a331      	add	r3, pc, #196	; (adr r3, 8000d30 <InitDriveData+0x138>)
 8000c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c70:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	drive->isHome = FALSE;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	2200      	movs	r2, #0
 8000c78:	f883 23ca 	strb.w	r2, [r3, #970]	; 0x3ca
	drive->rxBufPtr = 0;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2200      	movs	r2, #0
 8000c80:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
	drive->status = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	661a      	str	r2, [r3, #96]	; 0x60
	drive->isCmdAvailable = FALSE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
	drive->inSync  = FALSE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2422 	strb.w	r2, [r3, #1058]	; 0x422
	drive->motorOn = 0;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
	drive->currentReal = value;
 8000ca2:	4b26      	ldr	r3, [pc, #152]	; (8000d3c <InitDriveData+0x144>)
 8000ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca8:	6879      	ldr	r1, [r7, #4]
 8000caa:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
	memset(drive->currentRecords,0,100);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	33a8      	adds	r3, #168	; 0xa8
 8000cb2:	2264      	movs	r2, #100	; 0x64
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 ffc6 	bl	8004c48 <memset>
	memset(drive->syncCmd,0,15);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3380      	adds	r3, #128	; 0x80
 8000cc0:	220f      	movs	r2, #15
 8000cc2:	2100      	movs	r1, #0
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f003 ffbf 	bl	8004c48 <memset>
	memset(drive->rxBuffer,0,30);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8000cd0:	221e      	movs	r2, #30
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f003 ffb7 	bl	8004c48 <memset>
	memset(drive->cmd,0,3);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f203 33fd 	addw	r3, r3, #1021	; 0x3fd
 8000ce0:	2203      	movs	r2, #3
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 ffaf 	bl	8004c48 <memset>
	memset(drive->nextCmd,0,15);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000cf0:	220f      	movs	r2, #15
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f003 ffa7 	bl	8004c48 <memset>
	memset(drive->args,0,15);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8000d00:	220f      	movs	r2, #15
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f003 ff9f 	bl	8004c48 <memset>
	drive->currentRecordIndex = 0;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

	if(drive->isMaster == FALSE){
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	f893 33da 	ldrb.w	r3, [r3, #986]	; 0x3da
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d103      	bne.n	8000d24 <InitDriveData+0x12c>

		drive->driveMode = 1;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
	}

}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	f3af 8000 	nop.w
 8000d30:	00000000 	.word	0x00000000
 8000d34:	40c38800 	.word	0x40c38800
 8000d38:	409f4000 	.word	0x409f4000
 8000d3c:	20000260 	.word	0x20000260

08000d40 <CheckReceiveBuffer>:

	}

}

void CheckReceiveBuffer(DriveTypeDef *drive){
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]

	commaIndex = 0;
 8000d48:	4b82      	ldr	r3, [pc, #520]	; (8000f54 <CheckReceiveBuffer+0x214>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
	commaNumber = 0;
 8000d4e:	4b82      	ldr	r3, [pc, #520]	; (8000f58 <CheckReceiveBuffer+0x218>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	701a      	strb	r2, [r3, #0]
	equalsIndex = 0;
 8000d54:	4b81      	ldr	r3, [pc, #516]	; (8000f5c <CheckReceiveBuffer+0x21c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
	bracketIndex = 0;
 8000d5a:	4b81      	ldr	r3, [pc, #516]	; (8000f60 <CheckReceiveBuffer+0x220>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
	junkIndex = 0;
 8000d60:	4b80      	ldr	r3, [pc, #512]	; (8000f64 <CheckReceiveBuffer+0x224>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	701a      	strb	r2, [r3, #0]
	crIndex = 0;
 8000d66:	4b80      	ldr	r3, [pc, #512]	; (8000f68 <CheckReceiveBuffer+0x228>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]


	commandStartIndex = 0;
 8000d6c:	4b7f      	ldr	r3, [pc, #508]	; (8000f6c <CheckReceiveBuffer+0x22c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
	argumentStartIndex = 0;
 8000d72:	4b7f      	ldr	r3, [pc, #508]	; (8000f70 <CheckReceiveBuffer+0x230>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	701a      	strb	r2, [r3, #0]
	length = 0;
 8000d78:	4b7e      	ldr	r3, [pc, #504]	; (8000f74 <CheckReceiveBuffer+0x234>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	701a      	strb	r2, [r3, #0]

	uint8_t i = 0;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	73fb      	strb	r3, [r7, #15]

	/*Buffering is already done inside the ISR*/
	if(drive->rxBufPtr > 25){
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f893 33fc 	ldrb.w	r3, [r3, #1020]	; 0x3fc
 8000d88:	2b19      	cmp	r3, #25
 8000d8a:	d902      	bls.n	8000d92 <CheckReceiveBuffer+0x52>

			ClearReceiveBuffer(drive);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f000 fbe5 	bl	800155c <ClearReceiveBuffer>

	}


	/*At least 3 chars need to check for a command*/
	if(drive->rxBufPtr > 3){
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	f893 33fc 	ldrb.w	r3, [r3, #1020]	; 0x3fc
 8000d98:	2b03      	cmp	r3, #3
 8000d9a:	f240 80d8 	bls.w	8000f4e <CheckReceiveBuffer+0x20e>
		CalculateIndices(drive->rxBuffer);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8000da4:	4618      	mov	r0, r3
 8000da6:	f000 fc7d 	bl	80016a4 <CalculateIndices>
		length = strlen((char *)drive->rxBuffer);
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fa43 	bl	800023c <strlen>
 8000db6:	4603      	mov	r3, r0
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	4b6e      	ldr	r3, [pc, #440]	; (8000f74 <CheckReceiveBuffer+0x234>)
 8000dbc:	701a      	strb	r2, [r3, #0]

		if(commaIndex > 0 && drive->isCmdAvailable == FALSE ){	/*When ; present and flag is down, command has arrived*/
 8000dbe:	4b65      	ldr	r3, [pc, #404]	; (8000f54 <CheckReceiveBuffer+0x214>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f000 80c3 	beq.w	8000f4e <CheckReceiveBuffer+0x20e>
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	f040 80bd 	bne.w	8000f4e <CheckReceiveBuffer+0x20e>

			if(commaIndex >= 0 && length < 3){ /*When ; present and length is 2 or less, not a full command*/
 8000dd4:	4b67      	ldr	r3, [pc, #412]	; (8000f74 <CheckReceiveBuffer+0x234>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d803      	bhi.n	8000de4 <CheckReceiveBuffer+0xa4>
				ClearReceiveBuffer(drive);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f000 fbbd 	bl	800155c <ClearReceiveBuffer>
				return;
 8000de2:	e0b4      	b.n	8000f4e <CheckReceiveBuffer+0x20e>
			}

			if(junkIndex > 0 || commaNumber > 1 || commaIndex < crIndex ){
 8000de4:	4b5f      	ldr	r3, [pc, #380]	; (8000f64 <CheckReceiveBuffer+0x224>)
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <CheckReceiveBuffer+0xc0>
 8000dec:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <CheckReceiveBuffer+0x218>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d805      	bhi.n	8000e00 <CheckReceiveBuffer+0xc0>
 8000df4:	4b57      	ldr	r3, [pc, #348]	; (8000f54 <CheckReceiveBuffer+0x214>)
 8000df6:	781a      	ldrb	r2, [r3, #0]
 8000df8:	4b5b      	ldr	r3, [pc, #364]	; (8000f68 <CheckReceiveBuffer+0x228>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d203      	bcs.n	8000e08 <CheckReceiveBuffer+0xc8>
				ClearReceiveBuffer(drive);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 fbab 	bl	800155c <ClearReceiveBuffer>
				return;
 8000e06:	e0a2      	b.n	8000f4e <CheckReceiveBuffer+0x20e>
			}

			//
			if(commaIndex > length || (drive->rxBuffer[0] < 65 ||drive->rxBuffer[0]  > 90)){ /*Non ASCII start of command*/
 8000e08:	4b52      	ldr	r3, [pc, #328]	; (8000f54 <CheckReceiveBuffer+0x214>)
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	4b59      	ldr	r3, [pc, #356]	; (8000f74 <CheckReceiveBuffer+0x234>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d809      	bhi.n	8000e28 <CheckReceiveBuffer+0xe8>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
 8000e1a:	2b40      	cmp	r3, #64	; 0x40
 8000e1c:	d904      	bls.n	8000e28 <CheckReceiveBuffer+0xe8>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
 8000e24:	2b5a      	cmp	r3, #90	; 0x5a
 8000e26:	d903      	bls.n	8000e30 <CheckReceiveBuffer+0xf0>
				ClearReceiveBuffer(drive);
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 fb97 	bl	800155c <ClearReceiveBuffer>
				return;
 8000e2e:	e08e      	b.n	8000f4e <CheckReceiveBuffer+0x20e>
			}

			//Check Format of a command is OK
			if(commaIndex > crIndex){
 8000e30:	4b48      	ldr	r3, [pc, #288]	; (8000f54 <CheckReceiveBuffer+0x214>)
 8000e32:	781a      	ldrb	r2, [r3, #0]
 8000e34:	4b4c      	ldr	r3, [pc, #304]	; (8000f68 <CheckReceiveBuffer+0x228>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	f240 8088 	bls.w	8000f4e <CheckReceiveBuffer+0x20e>


				//Clear stuff
				drive->isCmdAvailable = TRUE;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2201      	movs	r2, #1
 8000e42:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
				memset(drive->cmd, 0, 3);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	f203 33fd 	addw	r3, r3, #1021	; 0x3fd
 8000e4c:	2203      	movs	r2, #3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 fef9 	bl	8004c48 <memset>
				memset(drive->args, 0, 15);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8000e5c:	220f      	movs	r2, #15
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f003 fef1 	bl	8004c48 <memset>

				//Update the drive with the values received from the command.
				for(i = (crIndex +1); i<commaIndex;i++){
 8000e66:	4b40      	ldr	r3, [pc, #256]	; (8000f68 <CheckReceiveBuffer+0x228>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	73fb      	strb	r3, [r7, #15]
 8000e6e:	e01d      	b.n	8000eac <CheckReceiveBuffer+0x16c>
					arg[i-crIndex -1] = drive->rxBuffer[i];
 8000e70:	7bfa      	ldrb	r2, [r7, #15]
 8000e72:	7bfb      	ldrb	r3, [r7, #15]
 8000e74:	493c      	ldr	r1, [pc, #240]	; (8000f68 <CheckReceiveBuffer+0x228>)
 8000e76:	7809      	ldrb	r1, [r1, #0]
 8000e78:	1a5b      	subs	r3, r3, r1
 8000e7a:	3b01      	subs	r3, #1
 8000e7c:	6879      	ldr	r1, [r7, #4]
 8000e7e:	440a      	add	r2, r1
 8000e80:	f892 13de 	ldrb.w	r1, [r2, #990]	; 0x3de
 8000e84:	4a3c      	ldr	r2, [pc, #240]	; (8000f78 <CheckReceiveBuffer+0x238>)
 8000e86:	54d1      	strb	r1, [r2, r3]
					drive->args[i-crIndex -1] = drive->rxBuffer[i];
 8000e88:	7bfa      	ldrb	r2, [r7, #15]
 8000e8a:	7bfb      	ldrb	r3, [r7, #15]
 8000e8c:	4936      	ldr	r1, [pc, #216]	; (8000f68 <CheckReceiveBuffer+0x228>)
 8000e8e:	7809      	ldrb	r1, [r1, #0]
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6879      	ldr	r1, [r7, #4]
 8000e96:	440a      	add	r2, r1
 8000e98:	f892 13de 	ldrb.w	r1, [r2, #990]	; 0x3de
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	4413      	add	r3, r2
 8000ea0:	460a      	mov	r2, r1
 8000ea2:	f883 240f 	strb.w	r2, [r3, #1039]	; 0x40f
				for(i = (crIndex +1); i<commaIndex;i++){
 8000ea6:	7bfb      	ldrb	r3, [r7, #15]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	4b29      	ldr	r3, [pc, #164]	; (8000f54 <CheckReceiveBuffer+0x214>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	7bfa      	ldrb	r2, [r7, #15]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d3dc      	bcc.n	8000e70 <CheckReceiveBuffer+0x130>
				}

				//Check both Initials are Uppercase Alpahabet
				if((drive->rxBuffer[0] > 65 ||drive->rxBuffer[0]  < 90) &&
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
 8000ebc:	2b41      	cmp	r3, #65	; 0x41
 8000ebe:	d804      	bhi.n	8000eca <CheckReceiveBuffer+0x18a>
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f893 33de 	ldrb.w	r3, [r3, #990]	; 0x3de
 8000ec6:	2b59      	cmp	r3, #89	; 0x59
 8000ec8:	d819      	bhi.n	8000efe <CheckReceiveBuffer+0x1be>
					(drive->rxBuffer[1] > 65 ||drive->rxBuffer[1]  < 90)){
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	f893 33df 	ldrb.w	r3, [r3, #991]	; 0x3df
				if((drive->rxBuffer[0] > 65 ||drive->rxBuffer[0]  < 90) &&
 8000ed0:	2b41      	cmp	r3, #65	; 0x41
 8000ed2:	d804      	bhi.n	8000ede <CheckReceiveBuffer+0x19e>
					(drive->rxBuffer[1] > 65 ||drive->rxBuffer[1]  < 90)){
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f893 33df 	ldrb.w	r3, [r3, #991]	; 0x3df
 8000eda:	2b59      	cmp	r3, #89	; 0x59
 8000edc:	d80f      	bhi.n	8000efe <CheckReceiveBuffer+0x1be>

					drive->cmd[0] = drive->rxBuffer[0];
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 23de 	ldrb.w	r2, [r3, #990]	; 0x3de
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f883 23fd 	strb.w	r2, [r3, #1021]	; 0x3fd
					drive->cmd[1] = drive->rxBuffer[1];
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 23df 	ldrb.w	r2, [r3, #991]	; 0x3df
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f883 23fe 	strb.w	r2, [r3, #1022]	; 0x3fe
					drive->cmd[2] = 0;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 23ff 	strb.w	r2, [r3, #1023]	; 0x3ff
				}

				value = atof(drive->args);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fe4f 	bl	8004ba8 <atof>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	491b      	ldr	r1, [pc, #108]	; (8000f7c <CheckReceiveBuffer+0x23c>)
 8000f10:	e9c1 2300 	strd	r2, r3, [r1]
				commandStartIndex = 1;
 8000f14:	4b15      	ldr	r3, [pc, #84]	; (8000f6c <CheckReceiveBuffer+0x22c>)
 8000f16:	2201      	movs	r2, #1
 8000f18:	701a      	strb	r2, [r3, #0]

				/*Dealing with rxbuffer is over, modify it to accomodate better logging*/
				/*Logging readability enhancement*/
				drive->rxBuffer[drive->rxBufPtr] = '\r';
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	f893 33fc 	ldrb.w	r3, [r3, #1020]	; 0x3fc
 8000f20:	461a      	mov	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4413      	add	r3, r2
 8000f26:	220d      	movs	r2, #13
 8000f28:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
				drive->rxBuffer[(drive->rxBufPtr) + 1] = '\n';
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 33fc 	ldrb.w	r3, [r3, #1020]	; 0x3fc
 8000f32:	3301      	adds	r3, #1
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	220a      	movs	r2, #10
 8000f3a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
				drive->rxBuffer[crIndex] = 32;
 8000f3e:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <CheckReceiveBuffer+0x228>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4413      	add	r3, r2
 8000f48:	2220      	movs	r2, #32
 8000f4a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de

		}

	}

}
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	20000246 	.word	0x20000246
 8000f58:	20000247 	.word	0x20000247
 8000f5c:	20000248 	.word	0x20000248
 8000f60:	20000249 	.word	0x20000249
 8000f64:	2000024a 	.word	0x2000024a
 8000f68:	2000024b 	.word	0x2000024b
 8000f6c:	2000024c 	.word	0x2000024c
 8000f70:	2000024d 	.word	0x2000024d
 8000f74:	2000024e 	.word	0x2000024e
 8000f78:	20000250 	.word	0x20000250
 8000f7c:	20000260 	.word	0x20000260

08000f80 <ProcessUserBuffer>:

void ProcessUserBuffer(UserCommandTypeDef *cmd){
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]

	uint8_t length = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]
	uint16_t tmp = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	81bb      	strh	r3, [r7, #12]

	/*If CR is received, User command is avaialble*/
	if(userCmd.isCmdAvailable == TRUE){
 8000f90:	4bab      	ldr	r3, [pc, #684]	; (8001240 <ProcessUserBuffer+0x2c0>)
 8000f92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	f040 81ce 	bne.w	8001338 <ProcessUserBuffer+0x3b8>

		/*If Solo CR is received, it means to toggle logging*/
		if(cmd->rxBuffer[0] == '\r'){
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000fa2:	2b0d      	cmp	r3, #13
 8000fa4:	d111      	bne.n	8000fca <ProcessUserBuffer+0x4a>
//			if(isLogging == TRUE) {
//				isLogging = FALSE;
//			}else{
//				isLogging = TRUE;
//			}
			if(isPolling == TRUE) {
 8000fa6:	4ba7      	ldr	r3, [pc, #668]	; (8001244 <ProcessUserBuffer+0x2c4>)
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d103      	bne.n	8000fb6 <ProcessUserBuffer+0x36>
				isPolling = FALSE;
 8000fae:	4ba5      	ldr	r3, [pc, #660]	; (8001244 <ProcessUserBuffer+0x2c4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]
 8000fb4:	e002      	b.n	8000fbc <ProcessUserBuffer+0x3c>
			}else{
				isPolling = TRUE;
 8000fb6:	4ba3      	ldr	r3, [pc, #652]	; (8001244 <ProcessUserBuffer+0x2c4>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
			}
			ClearUserBuffer(cmd);
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f000 fae1 	bl	8001584 <ClearUserBuffer>
			writeStringPC(">Polling mode changed\r\n>\0");
 8000fc2:	48a1      	ldr	r0, [pc, #644]	; (8001248 <ProcessUserBuffer+0x2c8>)
 8000fc4:	f001 fbbc 	bl	8002740 <writeStringPC>
			return;
 8000fc8:	e1b6      	b.n	8001338 <ProcessUserBuffer+0x3b8>
		}

		/*Process the user command*/
		cmd->isCmdAvailable = TRUE;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		memset(cmd->Command,0,16);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f003 fe34 	bl	8004c48 <memset>
		if(cmd->rxBuffer[0] == 'M' && cmd->rxBuffer[1] == ','){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000fe6:	2b4d      	cmp	r3, #77	; 0x4d
 8000fe8:	d12d      	bne.n	8001046 <ProcessUserBuffer+0xc6>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000ff0:	2b2c      	cmp	r3, #44	; 0x2c
 8000ff2:	d128      	bne.n	8001046 <ProcessUserBuffer+0xc6>

			//Enque the command to sent to Uart1
			cmd->Scope = MASTER;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2202      	movs	r2, #2
 8000ff8:	701a      	strb	r2, [r3, #0]
			memcpy (cmd->Command, cmd->rxBuffer + 2, (cmd->rxBufPtr)-2);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	1c58      	adds	r0, r3, #1
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3329      	adds	r3, #41	; 0x29
 8001002:	1c99      	adds	r1, r3, #2
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800100a:	3b02      	subs	r3, #2
 800100c:	461a      	mov	r2, r3
 800100e:	f003 fe0d 	bl	8004c2c <memcpy>
			Enqueue(&q1, cmd->Command);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	4619      	mov	r1, r3
 8001018:	488c      	ldr	r0, [pc, #560]	; (800124c <ProcessUserBuffer+0x2cc>)
 800101a:	f000 fce0 	bl	80019de <Enqueue>
			if(cmd->Command[0]=='B'&&cmd->Command[1]=='G'){
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	785b      	ldrb	r3, [r3, #1]
 8001022:	2b42      	cmp	r3, #66	; 0x42
 8001024:	d10a      	bne.n	800103c <ProcessUserBuffer+0xbc>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	789b      	ldrb	r3, [r3, #2]
 800102a:	2b47      	cmp	r3, #71	; 0x47
 800102c:	d106      	bne.n	800103c <ProcessUserBuffer+0xbc>
				isPolling = TRUE;
 800102e:	4b85      	ldr	r3, [pc, #532]	; (8001244 <ProcessUserBuffer+0x2c4>)
 8001030:	2201      	movs	r2, #1
 8001032:	701a      	strb	r2, [r3, #0]
				writeStringPC(">Begin Motion\r\n>\0");
 8001034:	4886      	ldr	r0, [pc, #536]	; (8001250 <ProcessUserBuffer+0x2d0>)
 8001036:	f001 fb83 	bl	8002740 <writeStringPC>
 800103a:	e002      	b.n	8001042 <ProcessUserBuffer+0xc2>
			}else{
				writeStringPC(">Sending to Master Drive\r\n>\0");
 800103c:	4885      	ldr	r0, [pc, #532]	; (8001254 <ProcessUserBuffer+0x2d4>)
 800103e:	f001 fb7f 	bl	8002740 <writeStringPC>
			}
			__NOP();
 8001042:	bf00      	nop
 8001044:	e178      	b.n	8001338 <ProcessUserBuffer+0x3b8>

		}else if(cmd->rxBuffer[0] == 'S' && cmd->rxBuffer[1] == ','){
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800104c:	2b53      	cmp	r3, #83	; 0x53
 800104e:	d11e      	bne.n	800108e <ProcessUserBuffer+0x10e>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8001056:	2b2c      	cmp	r3, #44	; 0x2c
 8001058:	d119      	bne.n	800108e <ProcessUserBuffer+0x10e>

			//Enque the command to sent to Uart2
			cmd->Scope = SLAVE;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2203      	movs	r2, #3
 800105e:	701a      	strb	r2, [r3, #0]
			memcpy (cmd->Command, cmd->rxBuffer + 2, (cmd->rxBufPtr)-2);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	1c58      	adds	r0, r3, #1
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3329      	adds	r3, #41	; 0x29
 8001068:	1c99      	adds	r1, r3, #2
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001070:	3b02      	subs	r3, #2
 8001072:	461a      	mov	r2, r3
 8001074:	f003 fdda 	bl	8004c2c <memcpy>
			Enqueue(&q2, cmd->Command);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3301      	adds	r3, #1
 800107c:	4619      	mov	r1, r3
 800107e:	4876      	ldr	r0, [pc, #472]	; (8001258 <ProcessUserBuffer+0x2d8>)
 8001080:	f000 fcad 	bl	80019de <Enqueue>
			writeStringPC(">Sending to Slave Drive\r\n>\0");
 8001084:	4875      	ldr	r0, [pc, #468]	; (800125c <ProcessUserBuffer+0x2dc>)
 8001086:	f001 fb5b 	bl	8002740 <writeStringPC>
			__NOP();
 800108a:	bf00      	nop
 800108c:	e154      	b.n	8001338 <ProcessUserBuffer+0x3b8>

		}else if(cmd->rxBuffer[0] == 'D' && cmd->rxBuffer[1] == ','){
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8001094:	2b44      	cmp	r3, #68	; 0x44
 8001096:	d124      	bne.n	80010e2 <ProcessUserBuffer+0x162>
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 800109e:	2b2c      	cmp	r3, #44	; 0x2c
 80010a0:	d11f      	bne.n	80010e2 <ProcessUserBuffer+0x162>

			//Enque the command to sent to Uart1/Uart2
			cmd->Scope = DUAL;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2204      	movs	r2, #4
 80010a6:	701a      	strb	r2, [r3, #0]
			memcpy (cmd->Command, cmd->rxBuffer + 2, (cmd->rxBufPtr)-2);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	1c58      	adds	r0, r3, #1
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3329      	adds	r3, #41	; 0x29
 80010b0:	1c99      	adds	r1, r3, #2
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010b8:	3b02      	subs	r3, #2
 80010ba:	461a      	mov	r2, r3
 80010bc:	f003 fdb6 	bl	8004c2c <memcpy>
			Enqueue(&q1, cmd->Command);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3301      	adds	r3, #1
 80010c4:	4619      	mov	r1, r3
 80010c6:	4861      	ldr	r0, [pc, #388]	; (800124c <ProcessUserBuffer+0x2cc>)
 80010c8:	f000 fc89 	bl	80019de <Enqueue>
			Enqueue(&q2, cmd->Command);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3301      	adds	r3, #1
 80010d0:	4619      	mov	r1, r3
 80010d2:	4861      	ldr	r0, [pc, #388]	; (8001258 <ProcessUserBuffer+0x2d8>)
 80010d4:	f000 fc83 	bl	80019de <Enqueue>
			writeStringPC(">Sending to both Drives\r\n>\0");
 80010d8:	4861      	ldr	r0, [pc, #388]	; (8001260 <ProcessUserBuffer+0x2e0>)
 80010da:	f001 fb31 	bl	8002740 <writeStringPC>
			__NOP();
 80010de:	bf00      	nop
 80010e0:	e12a      	b.n	8001338 <ProcessUserBuffer+0x3b8>

		}else{

			//remove CR. copy and compare the result
			memcpy (cmd->Command, cmd->rxBuffer, (cmd->rxBufPtr) - 1);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	1c58      	adds	r0, r3, #1
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010f2:	3b01      	subs	r3, #1
 80010f4:	461a      	mov	r2, r3
 80010f6:	f003 fd99 	bl	8004c2c <memcpy>
			cmd->Scope = LOCAL;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	701a      	strb	r2, [r3, #0]
			cmd->isCmdAvailable = TRUE;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28


			__NOP();
 8001108:	bf00      	nop

			/*String comparison of the command with allowed values*/
			if(strcmp(SYNC_CMD,cmd->Command) == 0){
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	3301      	adds	r3, #1
 800110e:	4619      	mov	r1, r3
 8001110:	4854      	ldr	r0, [pc, #336]	; (8001264 <ProcessUserBuffer+0x2e4>)
 8001112:	f7ff f889 	bl	8000228 <strcmp>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d106      	bne.n	800112a <ProcessUserBuffer+0x1aa>
				isSyncing = TRUE;
 800111c:	4b52      	ldr	r3, [pc, #328]	; (8001268 <ProcessUserBuffer+0x2e8>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
				writeStringPC(">Sync mode On\r\n>\0");
 8001122:	4852      	ldr	r0, [pc, #328]	; (800126c <ProcessUserBuffer+0x2ec>)
 8001124:	f001 fb0c 	bl	8002740 <writeStringPC>
 8001128:	e103      	b.n	8001332 <ProcessUserBuffer+0x3b2>
			}else if(strcmp(NOSYNC_CMD,cmd->Command) == 0){
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3301      	adds	r3, #1
 800112e:	4619      	mov	r1, r3
 8001130:	484f      	ldr	r0, [pc, #316]	; (8001270 <ProcessUserBuffer+0x2f0>)
 8001132:	f7ff f879 	bl	8000228 <strcmp>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d106      	bne.n	800114a <ProcessUserBuffer+0x1ca>
				isSyncing = FALSE;
 800113c:	4b4a      	ldr	r3, [pc, #296]	; (8001268 <ProcessUserBuffer+0x2e8>)
 800113e:	2200      	movs	r2, #0
 8001140:	701a      	strb	r2, [r3, #0]
				writeStringPC(">Sync mode off\r\n>\0");
 8001142:	484c      	ldr	r0, [pc, #304]	; (8001274 <ProcessUserBuffer+0x2f4>)
 8001144:	f001 fafc 	bl	8002740 <writeStringPC>
 8001148:	e0f3      	b.n	8001332 <ProcessUserBuffer+0x3b2>
			}else if(strcmp(POLL_CMD,cmd->Command) == 0){
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3301      	adds	r3, #1
 800114e:	4619      	mov	r1, r3
 8001150:	4849      	ldr	r0, [pc, #292]	; (8001278 <ProcessUserBuffer+0x2f8>)
 8001152:	f7ff f869 	bl	8000228 <strcmp>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d106      	bne.n	800116a <ProcessUserBuffer+0x1ea>
				isPolling = TRUE;
 800115c:	4b39      	ldr	r3, [pc, #228]	; (8001244 <ProcessUserBuffer+0x2c4>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
				writeStringPC(">Polling On\r\n>\0");
 8001162:	4846      	ldr	r0, [pc, #280]	; (800127c <ProcessUserBuffer+0x2fc>)
 8001164:	f001 faec 	bl	8002740 <writeStringPC>
 8001168:	e0e3      	b.n	8001332 <ProcessUserBuffer+0x3b2>
			}else if(strcmp(NOPOLL_CMD,cmd->Command) == 0){
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	4619      	mov	r1, r3
 8001170:	4843      	ldr	r0, [pc, #268]	; (8001280 <ProcessUserBuffer+0x300>)
 8001172:	f7ff f859 	bl	8000228 <strcmp>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d106      	bne.n	800118a <ProcessUserBuffer+0x20a>
				isPolling = FALSE;
 800117c:	4b31      	ldr	r3, [pc, #196]	; (8001244 <ProcessUserBuffer+0x2c4>)
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
				writeStringPC(">Polling Off\r\n>\0");
 8001182:	4840      	ldr	r0, [pc, #256]	; (8001284 <ProcessUserBuffer+0x304>)
 8001184:	f001 fadc 	bl	8002740 <writeStringPC>
 8001188:	e0d3      	b.n	8001332 <ProcessUserBuffer+0x3b2>
			}else if(strcmp(GRAPH_ON_CMD,cmd->Command) == 0){
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	4619      	mov	r1, r3
 8001190:	483d      	ldr	r0, [pc, #244]	; (8001288 <ProcessUserBuffer+0x308>)
 8001192:	f7ff f849 	bl	8000228 <strcmp>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d106      	bne.n	80011aa <ProcessUserBuffer+0x22a>
				isGraphing = TRUE;
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <ProcessUserBuffer+0x30c>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
				writeStringPC(">Graph mode On\r\n>\0");
 80011a2:	483b      	ldr	r0, [pc, #236]	; (8001290 <ProcessUserBuffer+0x310>)
 80011a4:	f001 facc 	bl	8002740 <writeStringPC>
 80011a8:	e0c3      	b.n	8001332 <ProcessUserBuffer+0x3b2>
			}else if(strcmp(GRAPH_OFF_CMD,cmd->Command) == 0){
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3301      	adds	r3, #1
 80011ae:	4619      	mov	r1, r3
 80011b0:	4838      	ldr	r0, [pc, #224]	; (8001294 <ProcessUserBuffer+0x314>)
 80011b2:	f7ff f839 	bl	8000228 <strcmp>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d106      	bne.n	80011ca <ProcessUserBuffer+0x24a>
				isGraphing = FALSE;
 80011bc:	4b33      	ldr	r3, [pc, #204]	; (800128c <ProcessUserBuffer+0x30c>)
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
				writeStringPC(">Graph mode Off\r\n>\0");
 80011c2:	4835      	ldr	r0, [pc, #212]	; (8001298 <ProcessUserBuffer+0x318>)
 80011c4:	f001 fabc 	bl	8002740 <writeStringPC>
 80011c8:	e0b3      	b.n	8001332 <ProcessUserBuffer+0x3b2>
			}else if(strcmp(POS_OFF_CMD,cmd->Command) == 0){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	3301      	adds	r3, #1
 80011ce:	4619      	mov	r1, r3
 80011d0:	4832      	ldr	r0, [pc, #200]	; (800129c <ProcessUserBuffer+0x31c>)
 80011d2:	f7ff f829 	bl	8000228 <strcmp>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d106      	bne.n	80011ea <ProcessUserBuffer+0x26a>
				isPositionCheck = FALSE;
 80011dc:	4b30      	ldr	r3, [pc, #192]	; (80012a0 <ProcessUserBuffer+0x320>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
				writeStringPC(">Position query mode On\r\n>\0");
 80011e2:	4830      	ldr	r0, [pc, #192]	; (80012a4 <ProcessUserBuffer+0x324>)
 80011e4:	f001 faac 	bl	8002740 <writeStringPC>
 80011e8:	e0a3      	b.n	8001332 <ProcessUserBuffer+0x3b2>
			}else if(strcmp(POS_ON_CMD,cmd->Command) == 0){
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	482d      	ldr	r0, [pc, #180]	; (80012a8 <ProcessUserBuffer+0x328>)
 80011f2:	f7ff f819 	bl	8000228 <strcmp>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d106      	bne.n	800120a <ProcessUserBuffer+0x28a>
				isPositionCheck = TRUE;
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <ProcessUserBuffer+0x320>)
 80011fe:	2201      	movs	r2, #1
 8001200:	701a      	strb	r2, [r3, #0]
				writeStringPC(">Position query mode Off\r\n>\0");
 8001202:	482a      	ldr	r0, [pc, #168]	; (80012ac <ProcessUserBuffer+0x32c>)
 8001204:	f001 fa9c 	bl	8002740 <writeStringPC>
 8001208:	e093      	b.n	8001332 <ProcessUserBuffer+0x3b2>
			}else if(strcmp(CONNECT_CMD,cmd->Command) == 0){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3301      	adds	r3, #1
 800120e:	4619      	mov	r1, r3
 8001210:	4827      	ldr	r0, [pc, #156]	; (80012b0 <ProcessUserBuffer+0x330>)
 8001212:	f7ff f809 	bl	8000228 <strcmp>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d103      	bne.n	8001224 <ProcessUserBuffer+0x2a4>
				isStart = TRUE;
 800121c:	4b25      	ldr	r3, [pc, #148]	; (80012b4 <ProcessUserBuffer+0x334>)
 800121e:	2201      	movs	r2, #1
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e086      	b.n	8001332 <ProcessUserBuffer+0x3b2>
			}else if(strcmp(BEGIN_CMD,cmd->Command) == 0){
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3301      	adds	r3, #1
 8001228:	4619      	mov	r1, r3
 800122a:	4823      	ldr	r0, [pc, #140]	; (80012b8 <ProcessUserBuffer+0x338>)
 800122c:	f7fe fffc 	bl	8000228 <strcmp>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d144      	bne.n	80012c0 <ProcessUserBuffer+0x340>
				writeStringPC(">Sending BG to start motion\r\n>\0");
 8001236:	4821      	ldr	r0, [pc, #132]	; (80012bc <ProcessUserBuffer+0x33c>)
 8001238:	f001 fa82 	bl	8002740 <writeStringPC>
 800123c:	e079      	b.n	8001332 <ProcessUserBuffer+0x3b2>
 800123e:	bf00      	nop
 8001240:	20000e00 	.word	0x20000e00
 8001244:	20000e5d 	.word	0x20000e5d
 8001248:	08007a80 	.word	0x08007a80
 800124c:	20000e64 	.word	0x20000e64
 8001250:	08007a9c 	.word	0x08007a9c
 8001254:	08007ab0 	.word	0x08007ab0
 8001258:	20000e6c 	.word	0x20000e6c
 800125c:	08007ad0 	.word	0x08007ad0
 8001260:	08007aec 	.word	0x08007aec
 8001264:	20000000 	.word	0x20000000
 8001268:	20000e5e 	.word	0x20000e5e
 800126c:	08007b08 	.word	0x08007b08
 8001270:	20000008 	.word	0x20000008
 8001274:	08007b1c 	.word	0x08007b1c
 8001278:	20000010 	.word	0x20000010
 800127c:	08007b30 	.word	0x08007b30
 8001280:	20000018 	.word	0x20000018
 8001284:	08007b40 	.word	0x08007b40
 8001288:	20000020 	.word	0x20000020
 800128c:	20000040 	.word	0x20000040
 8001290:	08007b54 	.word	0x08007b54
 8001294:	20000024 	.word	0x20000024
 8001298:	08007b68 	.word	0x08007b68
 800129c:	20000030 	.word	0x20000030
 80012a0:	20000e5f 	.word	0x20000e5f
 80012a4:	08007b7c 	.word	0x08007b7c
 80012a8:	2000002c 	.word	0x2000002c
 80012ac:	08007b98 	.word	0x08007b98
 80012b0:	20000038 	.word	0x20000038
 80012b4:	20000e5c 	.word	0x20000e5c
 80012b8:	2000003c 	.word	0x2000003c
 80012bc:	08007bb8 	.word	0x08007bb8
			}else {

				if(cmd->Command[5] == '='){
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	799b      	ldrb	r3, [r3, #6]
 80012c4:	2b3d      	cmp	r3, #61	; 0x3d
 80012c6:	d134      	bne.n	8001332 <ProcessUserBuffer+0x3b2>
					length = strlen((char *)cmd->Command);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	3301      	adds	r3, #1
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7fe ffb5 	bl	800023c <strlen>
 80012d2:	4603      	mov	r3, r0
 80012d4:	73fb      	strb	r3, [r7, #15]
					if(length >= 6){
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	2b05      	cmp	r3, #5
 80012da:	d927      	bls.n	800132c <ProcessUserBuffer+0x3ac>
						memcpy (cmd->strValue, (cmd->Command) + 6, (length - 6));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f103 0011 	add.w	r0, r3, #17
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	3301      	adds	r3, #1
 80012e6:	1d99      	adds	r1, r3, #6
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	3b06      	subs	r3, #6
 80012ec:	461a      	mov	r2, r3
 80012ee:	f003 fc9d 	bl	8004c2c <memcpy>

						tmp = atoi(cmd->strValue);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3311      	adds	r3, #17
 80012f6:	4618      	mov	r0, r3
 80012f8:	f003 fc59 	bl	8004bae <atoi>
 80012fc:	4603      	mov	r3, r0
 80012fe:	81bb      	strh	r3, [r7, #12]
						if(tmp >= 1 && tmp <= 1000){
 8001300:	89bb      	ldrh	r3, [r7, #12]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d015      	beq.n	8001332 <ProcessUserBuffer+0x3b2>
 8001306:	89bb      	ldrh	r3, [r7, #12]
 8001308:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800130c:	d811      	bhi.n	8001332 <ProcessUserBuffer+0x3b2>
							interCmdDelay = tmp;
 800130e:	4a0c      	ldr	r2, [pc, #48]	; (8001340 <ProcessUserBuffer+0x3c0>)
 8001310:	89bb      	ldrh	r3, [r7, #12]
 8001312:	8013      	strh	r3, [r2, #0]
							isDelayUpdate = TRUE;
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <ProcessUserBuffer+0x3c4>)
 8001316:	2201      	movs	r2, #1
 8001318:	701a      	strb	r2, [r3, #0]
							setDelay(interCmdDelay);
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <ProcessUserBuffer+0x3c0>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	4618      	mov	r0, r3
 8001320:	f000 f948 	bl	80015b4 <setDelay>
							writeStringPC(">Delay set\r\n>\0");
 8001324:	4808      	ldr	r0, [pc, #32]	; (8001348 <ProcessUserBuffer+0x3c8>)
 8001326:	f001 fa0b 	bl	8002740 <writeStringPC>
 800132a:	e002      	b.n	8001332 <ProcessUserBuffer+0x3b2>
							//htim2.Init.Prescaler = interCmdDelay;
						}
					}else{
						ClearUserBuffer(cmd);
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	f000 f929 	bl	8001584 <ClearUserBuffer>
					}
				}
			}

			ClearUserBuffer(cmd);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f926 	bl	8001584 <ClearUserBuffer>
		}
	}


}
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000e5a 	.word	0x20000e5a
 8001344:	20000041 	.word	0x20000041
 8001348:	08007bd8 	.word	0x08007bd8

0800134c <DecodeCommand>:

void DecodeCommand(DriveTypeDef *drive){
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]



	//memset(drive->rxBuffer, 0, 30);
	if(drive->cmd[0] == 'I' && drive->cmd[1] == 'Q' ){
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 800135a:	2b49      	cmp	r3, #73	; 0x49
 800135c:	d146      	bne.n	80013ec <DecodeCommand+0xa0>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	f893 33fe 	ldrb.w	r3, [r3, #1022]	; 0x3fe
 8001364:	2b51      	cmp	r3, #81	; 0x51
 8001366:	d141      	bne.n	80013ec <DecodeCommand+0xa0>
		/*Update the master IQ and update teh buffer*/
		if(value < 15.0 && value > -15.0){
 8001368:	4b78      	ldr	r3, [pc, #480]	; (800154c <DecodeCommand+0x200>)
 800136a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800136e:	f04f 0200 	mov.w	r2, #0
 8001372:	4b77      	ldr	r3, [pc, #476]	; (8001550 <DecodeCommand+0x204>)
 8001374:	f7ff fb98 	bl	8000aa8 <__aeabi_dcmplt>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d036      	beq.n	80013ec <DecodeCommand+0xa0>
 800137e:	4b73      	ldr	r3, [pc, #460]	; (800154c <DecodeCommand+0x200>)
 8001380:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001384:	f04f 0200 	mov.w	r2, #0
 8001388:	4b72      	ldr	r3, [pc, #456]	; (8001554 <DecodeCommand+0x208>)
 800138a:	f7ff fbab 	bl	8000ae4 <__aeabi_dcmpgt>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d02b      	beq.n	80013ec <DecodeCommand+0xa0>

			drive->currentReal = value;
 8001394:	4b6d      	ldr	r3, [pc, #436]	; (800154c <DecodeCommand+0x200>)
 8001396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68
			drive->currentRecords[drive->currentRecordIndex % samples] = value;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80013a6:	4a6c      	ldr	r2, [pc, #432]	; (8001558 <DecodeCommand+0x20c>)
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	fbb3 f1f2 	udiv	r1, r3, r2
 80013ae:	fb01 f202 	mul.w	r2, r1, r2
 80013b2:	1a9b      	subs	r3, r3, r2
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	4b64      	ldr	r3, [pc, #400]	; (800154c <DecodeCommand+0x200>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	3115      	adds	r1, #21
 80013c2:	00c9      	lsls	r1, r1, #3
 80013c4:	4401      	add	r1, r0
 80013c6:	e9c1 2300 	strd	r2, r3, [r1]
			drive->currentRecordIndex++;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8

			/*Will limit the range of index below the array length as a safety measurement*/
			if(drive->currentRecordIndex >= 99){
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 33c8 	ldrb.w	r3, [r3, #968]	; 0x3c8
 80013e0:	2b62      	cmp	r3, #98	; 0x62
 80013e2:	d903      	bls.n	80013ec <DecodeCommand+0xa0>
				drive->currentRecordIndex = 0;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
			}
		}

	}

	if(drive->cmd[0] == 'M' && drive->cmd[1] == 'O' ){
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 80013f2:	2b4d      	cmp	r3, #77	; 0x4d
 80013f4:	d110      	bne.n	8001418 <DecodeCommand+0xcc>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 33fe 	ldrb.w	r3, [r3, #1022]	; 0x3fe
 80013fc:	2b4f      	cmp	r3, #79	; 0x4f
 80013fe:	d10b      	bne.n	8001418 <DecodeCommand+0xcc>
		drive->motorOn = value;
 8001400:	4b52      	ldr	r3, [pc, #328]	; (800154c <DecodeCommand+0x200>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	4610      	mov	r0, r2
 8001408:	4619      	mov	r1, r3
 800140a:	f7ff fb9d 	bl	8000b48 <__aeabi_d2uiz>
 800140e:	4603      	mov	r3, r0
 8001410:	b2da      	uxtb	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f883 241f 	strb.w	r2, [r3, #1055]	; 0x41f
	}

	if(drive->cmd[0] == 'P' && drive->cmd[1] == 'X' ){
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 800141e:	2b50      	cmp	r3, #80	; 0x50
 8001420:	d110      	bne.n	8001444 <DecodeCommand+0xf8>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 33fe 	ldrb.w	r3, [r3, #1022]	; 0x3fe
 8001428:	2b58      	cmp	r3, #88	; 0x58
 800142a:	d10b      	bne.n	8001444 <DecodeCommand+0xf8>
		drive->position = value;
 800142c:	4b47      	ldr	r3, [pc, #284]	; (800154c <DecodeCommand+0x200>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb87 	bl	8000b48 <__aeabi_d2uiz>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f8a3 23cc 	strh.w	r2, [r3, #972]	; 0x3cc
	}

	if(drive->cmd[0] == 'P' && drive->cmd[1] == 'R' ){
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 800144a:	2b50      	cmp	r3, #80	; 0x50
 800144c:	d110      	bne.n	8001470 <DecodeCommand+0x124>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 33fe 	ldrb.w	r3, [r3, #1022]	; 0x3fe
 8001454:	2b52      	cmp	r3, #82	; 0x52
 8001456:	d10b      	bne.n	8001470 <DecodeCommand+0x124>
		drive->targetPosition = value;
 8001458:	4b3c      	ldr	r3, [pc, #240]	; (800154c <DecodeCommand+0x200>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fb71 	bl	8000b48 <__aeabi_d2uiz>
 8001466:	4603      	mov	r3, r0
 8001468:	b29a      	uxth	r2, r3
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f8a3 23ce 	strh.w	r2, [r3, #974]	; 0x3ce
	}

	if(drive->cmd[0] == 'A' && drive->cmd[1] == 'C' ){
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 8001476:	2b41      	cmp	r3, #65	; 0x41
 8001478:	d10a      	bne.n	8001490 <DecodeCommand+0x144>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	f893 33fe 	ldrb.w	r3, [r3, #1022]	; 0x3fe
 8001480:	2b43      	cmp	r3, #67	; 0x43
 8001482:	d105      	bne.n	8001490 <DecodeCommand+0x144>
		drive->acceleration = value;
 8001484:	4b31      	ldr	r3, [pc, #196]	; (800154c <DecodeCommand+0x200>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	e9c1 2326 	strd	r2, r3, [r1, #152]	; 0x98
	}

	if(drive->cmd[0] == 'D' && drive->cmd[1] == 'C' ){
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 8001496:	2b44      	cmp	r3, #68	; 0x44
 8001498:	d10a      	bne.n	80014b0 <DecodeCommand+0x164>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f893 33fe 	ldrb.w	r3, [r3, #1022]	; 0x3fe
 80014a0:	2b43      	cmp	r3, #67	; 0x43
 80014a2:	d105      	bne.n	80014b0 <DecodeCommand+0x164>
		drive->deceleration = value;
 80014a4:	4b29      	ldr	r3, [pc, #164]	; (800154c <DecodeCommand+0x200>)
 80014a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014aa:	6879      	ldr	r1, [r7, #4]
 80014ac:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	}

	if(drive->cmd[0] == 'S' && drive->cmd[1] == 'P' ){
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 80014b6:	2b53      	cmp	r3, #83	; 0x53
 80014b8:	d10a      	bne.n	80014d0 <DecodeCommand+0x184>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f893 33fe 	ldrb.w	r3, [r3, #1022]	; 0x3fe
 80014c0:	2b50      	cmp	r3, #80	; 0x50
 80014c2:	d105      	bne.n	80014d0 <DecodeCommand+0x184>
		drive->speed = value;
 80014c4:	4b21      	ldr	r3, [pc, #132]	; (800154c <DecodeCommand+0x200>)
 80014c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ca:	6879      	ldr	r1, [r7, #4]
 80014cc:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	}

	if(drive->cmd[0] == 'S' && drive->cmd[1] == 'R' ){
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 80014d6:	2b53      	cmp	r3, #83	; 0x53
 80014d8:	d119      	bne.n	800150e <DecodeCommand+0x1c2>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 33fe 	ldrb.w	r3, [r3, #1022]	; 0x3fe
 80014e0:	2b52      	cmp	r3, #82	; 0x52
 80014e2:	d114      	bne.n	800150e <DecodeCommand+0x1c2>
			drive->status = (uint32_t) value;
 80014e4:	4b19      	ldr	r3, [pc, #100]	; (800154c <DecodeCommand+0x200>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	f7ff fb2b 	bl	8000b48 <__aeabi_d2uiz>
 80014f2:	4602      	mov	r2, r0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	661a      	str	r2, [r3, #96]	; 0x60
			drive->Status.status = (uint32_t) value;
 80014f8:	4b14      	ldr	r3, [pc, #80]	; (800154c <DecodeCommand+0x200>)
 80014fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fe:	4610      	mov	r0, r2
 8001500:	4619      	mov	r1, r3
 8001502:	f7ff fb21 	bl	8000b48 <__aeabi_d2uiz>
 8001506:	4602      	mov	r2, r0
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	601a      	str	r2, [r3, #0]
			__NOP();
 800150c:	bf00      	nop
	}
	if(drive->cmd[0] == 'U' && drive->cmd[1] == 'M' ){
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 33fd 	ldrb.w	r3, [r3, #1021]	; 0x3fd
 8001514:	2b55      	cmp	r3, #85	; 0x55
 8001516:	d110      	bne.n	800153a <DecodeCommand+0x1ee>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f893 33fe 	ldrb.w	r3, [r3, #1022]	; 0x3fe
 800151e:	2b4d      	cmp	r3, #77	; 0x4d
 8001520:	d10b      	bne.n	800153a <DecodeCommand+0x1ee>
			drive->driveMode = value;
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <DecodeCommand+0x200>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	4610      	mov	r0, r2
 800152a:	4619      	mov	r1, r3
 800152c:	f7ff fb0c 	bl	8000b48 <__aeabi_d2uiz>
 8001530:	4603      	mov	r3, r0
 8001532:	b2da      	uxtb	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f883 23d0 	strb.w	r2, [r3, #976]	; 0x3d0
	}

	drive->isCmdAvailable = FALSE;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000260 	.word	0x20000260
 8001550:	402e0000 	.word	0x402e0000
 8001554:	c02e0000 	.word	0xc02e0000
 8001558:	20000047 	.word	0x20000047

0800155c <ClearReceiveBuffer>:
void substr(char *s, int a, int b, char *t)
{
    strncpy(t, s+a, b);
}

void ClearReceiveBuffer(DriveTypeDef *drive){ /*Clear Buffer a char*/
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	drive->rxBufPtr = 0;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2200      	movs	r2, #0
 8001568:	f883 23fc 	strb.w	r2, [r3, #1020]	; 0x3fc
	memset(drive->rxBuffer, 0, 30);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f203 33de 	addw	r3, r3, #990	; 0x3de
 8001572:	221e      	movs	r2, #30
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f003 fb66 	bl	8004c48 <memset>

}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <ClearUserBuffer>:
void ClearUserBuffer(UserCommandTypeDef *cmd){
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
	cmd->rxBufPtr = 0;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	cmd->isCmdAvailable = FALSE;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	 memset(cmd->rxBuffer, 0, 12);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3329      	adds	r3, #41	; 0x29
 80015a0:	220c      	movs	r2, #12
 80015a2:	2100      	movs	r1, #0
 80015a4:	4618      	mov	r0, r3
 80015a6:	f003 fb4f 	bl	8004c48 <memset>
	 //Need to clear the rest
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
	...

080015b4 <setDelay>:

void setDelay(uint16_t delay){
 80015b4:	b480      	push	{r7}
 80015b6:	b085      	sub	sp, #20
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	80fb      	strh	r3, [r7, #6]

	if(isDelayUpdate == TRUE){
 80015be:	4b14      	ldr	r3, [pc, #80]	; (8001610 <setDelay+0x5c>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d11f      	bne.n	8001606 <setDelay+0x52>

		uint16_t tmp = delay * (8333/200);
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	461a      	mov	r2, r3
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	441a      	add	r2, r3
 80015ce:	00d2      	lsls	r2, r2, #3
 80015d0:	4413      	add	r3, r2
 80015d2:	81fb      	strh	r3, [r7, #14]
			if(tmp < 65535){
 80015d4:	89fb      	ldrh	r3, [r7, #14]
 80015d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <setDelay+0x3a>
				htim2.Init.Period = tmp;
 80015de:	89fb      	ldrh	r3, [r7, #14]
 80015e0:	4a0c      	ldr	r2, [pc, #48]	; (8001614 <setDelay+0x60>)
 80015e2:	60d3      	str	r3, [r2, #12]
				htim2.Instance->ARR = tmp;
 80015e4:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <setDelay+0x60>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	89fa      	ldrh	r2, [r7, #14]
 80015ea:	62da      	str	r2, [r3, #44]	; 0x2c
 80015ec:	e008      	b.n	8001600 <setDelay+0x4c>
			}else{
				htim2.Init.Period = 40000;
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <setDelay+0x60>)
 80015f0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80015f4:	60da      	str	r2, [r3, #12]
				htim2.Instance->ARR = 40000;
 80015f6:	4b07      	ldr	r3, [pc, #28]	; (8001614 <setDelay+0x60>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f649 4240 	movw	r2, #40000	; 0x9c40
 80015fe:	62da      	str	r2, [r3, #44]	; 0x2c
			}

			isDelayUpdate = FALSE;
 8001600:	4b03      	ldr	r3, [pc, #12]	; (8001610 <setDelay+0x5c>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
	}


}
 8001606:	bf00      	nop
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr
 8001610:	20000041 	.word	0x20000041
 8001614:	2000040c 	.word	0x2000040c

08001618 <CreateCurrentCommand>:
		}
	}
	return 0;
}

void CreateCurrentCommand(DriveTypeDef *drive){
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

	uint8_t tc[10];
	uint8_t len = 0;
 8001620:	2300      	movs	r3, #0
 8001622:	75fb      	strb	r3, [r7, #23]

	/*set all 0s*/
    memset(tc,0,10);
 8001624:	f107 030c 	add.w	r3, r7, #12
 8001628:	220a      	movs	r2, #10
 800162a:	2100      	movs	r1, #0
 800162c:	4618      	mov	r0, r3
 800162e:	f003 fb0b 	bl	8004c48 <memset>

    /*Run the algorithm and get update the sync current*/
    drive->syncCurrent = getMeanCurrent(drive);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f001 fbb8 	bl	8002da8 <getMeanCurrent>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	e9c1 231e 	strd	r2, r3, [r1, #120]	; 0x78

    /*This is not the function from stdlib*/
	ftoa(drive->syncCurrent, tc,3);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	e9d3 011e 	ldrd	r0, r1, [r3, #120]	; 0x78
 8001648:	f107 020c 	add.w	r2, r7, #12
 800164c:	2303      	movs	r3, #3
 800164e:	f000 f887 	bl	8001760 <ftoa>
	len = strlen((char *)tc);
 8001652:	f107 030c 	add.w	r3, r7, #12
 8001656:	4618      	mov	r0, r3
 8001658:	f7fe fdf0 	bl	800023c <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	75fb      	strb	r3, [r7, #23]

	/*Create the torque command*/
	strcpy(drive->syncCmd,"TC=\0");
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3380      	adds	r3, #128	; 0x80
 8001664:	4a0d      	ldr	r2, [pc, #52]	; (800169c <CreateCurrentCommand+0x84>)
 8001666:	6810      	ldr	r0, [r2, #0]
 8001668:	6018      	str	r0, [r3, #0]
	strcpy(drive->syncCmd+3,tc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3380      	adds	r3, #128	; 0x80
 800166e:	3303      	adds	r3, #3
 8001670:	f107 020c 	add.w	r2, r7, #12
 8001674:	4611      	mov	r1, r2
 8001676:	4618      	mov	r0, r3
 8001678:	f003 fbda 	bl	8004e30 <strcpy>
	strcpy(drive->syncCmd+len+3,"\r\0");
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8001682:	7dfb      	ldrb	r3, [r7, #23]
 8001684:	3303      	adds	r3, #3
 8001686:	4413      	add	r3, r2
 8001688:	4905      	ldr	r1, [pc, #20]	; (80016a0 <CreateCurrentCommand+0x88>)
 800168a:	461a      	mov	r2, r3
 800168c:	460b      	mov	r3, r1
 800168e:	881b      	ldrh	r3, [r3, #0]
 8001690:	8013      	strh	r3, [r2, #0]
	__NOP();
 8001692:	bf00      	nop

}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	08007be8 	.word	0x08007be8
 80016a0:	08007bf0 	.word	0x08007bf0

080016a4 <CalculateIndices>:
void CalculateIndices(uint8_t * source){ /*Helper for IndexOf a char*/
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]

	uint8_t sLen = strlen((char *)source);
 80016ac:	6878      	ldr	r0, [r7, #4]
 80016ae:	f7fe fdc5 	bl	800023c <strlen>
 80016b2:	4603      	mov	r3, r0
 80016b4:	73fb      	strb	r3, [r7, #15]
	//uint8_t tLen = strlen((char *)test);

	uint8_t i;
	if(sLen > 25) sLen = 25;
 80016b6:	7bfb      	ldrb	r3, [r7, #15]
 80016b8:	2b19      	cmp	r3, #25
 80016ba:	d901      	bls.n	80016c0 <CalculateIndices+0x1c>
 80016bc:	2319      	movs	r3, #25
 80016be:	73fb      	strb	r3, [r7, #15]

	if(sLen > 1 ){
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d93c      	bls.n	8001740 <CalculateIndices+0x9c>

		for(i = 0; i<sLen;i++){
 80016c6:	2300      	movs	r3, #0
 80016c8:	73bb      	strb	r3, [r7, #14]
 80016ca:	e035      	b.n	8001738 <CalculateIndices+0x94>

			if(source[i] == ';'){
 80016cc:	7bbb      	ldrb	r3, [r7, #14]
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b3b      	cmp	r3, #59	; 0x3b
 80016d6:	d108      	bne.n	80016ea <CalculateIndices+0x46>

				commaIndex = i;
 80016d8:	4a1b      	ldr	r2, [pc, #108]	; (8001748 <CalculateIndices+0xa4>)
 80016da:	7bbb      	ldrb	r3, [r7, #14]
 80016dc:	7013      	strb	r3, [r2, #0]
				commaNumber++;
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <CalculateIndices+0xa8>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	3301      	adds	r3, #1
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <CalculateIndices+0xa8>)
 80016e8:	701a      	strb	r2, [r3, #0]
			}
			if(source[i] == '\r'){
 80016ea:	7bbb      	ldrb	r3, [r7, #14]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b0d      	cmp	r3, #13
 80016f4:	d102      	bne.n	80016fc <CalculateIndices+0x58>

				crIndex = i;
 80016f6:	4a16      	ldr	r2, [pc, #88]	; (8001750 <CalculateIndices+0xac>)
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	7013      	strb	r3, [r2, #0]
			}
			if(source[i] == '?'){
 80016fc:	7bbb      	ldrb	r3, [r7, #14]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b3f      	cmp	r3, #63	; 0x3f
 8001706:	d102      	bne.n	800170e <CalculateIndices+0x6a>

				junkIndex = i;
 8001708:	4a12      	ldr	r2, [pc, #72]	; (8001754 <CalculateIndices+0xb0>)
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	7013      	strb	r3, [r2, #0]
			}
			if(source[i] == '['){
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	4413      	add	r3, r2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b5b      	cmp	r3, #91	; 0x5b
 8001718:	d102      	bne.n	8001720 <CalculateIndices+0x7c>

				bracketIndex = i;
 800171a:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <CalculateIndices+0xb4>)
 800171c:	7bbb      	ldrb	r3, [r7, #14]
 800171e:	7013      	strb	r3, [r2, #0]
			}
			if(source[i] == '='){
 8001720:	7bbb      	ldrb	r3, [r7, #14]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b3d      	cmp	r3, #61	; 0x3d
 800172a:	d102      	bne.n	8001732 <CalculateIndices+0x8e>

				equalsIndex = i;
 800172c:	4a0b      	ldr	r2, [pc, #44]	; (800175c <CalculateIndices+0xb8>)
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	7013      	strb	r3, [r2, #0]
		for(i = 0; i<sLen;i++){
 8001732:	7bbb      	ldrb	r3, [r7, #14]
 8001734:	3301      	adds	r3, #1
 8001736:	73bb      	strb	r3, [r7, #14]
 8001738:	7bba      	ldrb	r2, [r7, #14]
 800173a:	7bfb      	ldrb	r3, [r7, #15]
 800173c:	429a      	cmp	r2, r3
 800173e:	d3c5      	bcc.n	80016cc <CalculateIndices+0x28>
			}
		}
	}

}
 8001740:	bf00      	nop
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000246 	.word	0x20000246
 800174c:	20000247 	.word	0x20000247
 8001750:	2000024b 	.word	0x2000024b
 8001754:	2000024a 	.word	0x2000024a
 8001758:	20000249 	.word	0x20000249
 800175c:	20000248 	.word	0x20000248

08001760 <ftoa>:
	0.0000000005,		// 9
	0.00000000005		// 10
};

char * ftoa(double f, char * buf, int precision)
{
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0
 8001766:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
 800176c:	603b      	str	r3, [r7, #0]
	char * ptr = buf;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
	char * p = ptr;
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	623b      	str	r3, [r7, #32]
	char * p1;
	char c;
	long intPart;

	// check precision bounds
	if (precision > MAX_PRECISION)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	2b0a      	cmp	r3, #10
 800177a:	dd01      	ble.n	8001780 <ftoa+0x20>
		precision = MAX_PRECISION;
 800177c:	230a      	movs	r3, #10
 800177e:	603b      	str	r3, [r7, #0]

	// sign stuff
	if (f < 0)
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	f04f 0300 	mov.w	r3, #0
 8001788:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800178c:	f7ff f98c 	bl	8000aa8 <__aeabi_dcmplt>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d00a      	beq.n	80017ac <ftoa+0x4c>
	{
		f = -f;
 8001796:	68bc      	ldr	r4, [r7, #8]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800179e:	e9c7 4502 	strd	r4, r5, [r7, #8]
		*ptr++ = '-';
 80017a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	627a      	str	r2, [r7, #36]	; 0x24
 80017a8:	222d      	movs	r2, #45	; 0x2d
 80017aa:	701a      	strb	r2, [r3, #0]
	}

	if (precision < 0)  // negative precision == automatic precision guess
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	da4f      	bge.n	8001852 <ftoa+0xf2>
	{
		if (f < 1.0) precision = 6;
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	4b7c      	ldr	r3, [pc, #496]	; (80019a8 <ftoa+0x248>)
 80017b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017bc:	f7ff f974 	bl	8000aa8 <__aeabi_dcmplt>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d002      	beq.n	80017cc <ftoa+0x6c>
 80017c6:	2306      	movs	r3, #6
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	e042      	b.n	8001852 <ftoa+0xf2>
		else if (f < 10.0) precision = 5;
 80017cc:	f04f 0200 	mov.w	r2, #0
 80017d0:	4b76      	ldr	r3, [pc, #472]	; (80019ac <ftoa+0x24c>)
 80017d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017d6:	f7ff f967 	bl	8000aa8 <__aeabi_dcmplt>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <ftoa+0x86>
 80017e0:	2305      	movs	r3, #5
 80017e2:	603b      	str	r3, [r7, #0]
 80017e4:	e035      	b.n	8001852 <ftoa+0xf2>
		else if (f < 100.0) precision = 4;
 80017e6:	f04f 0200 	mov.w	r2, #0
 80017ea:	4b71      	ldr	r3, [pc, #452]	; (80019b0 <ftoa+0x250>)
 80017ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80017f0:	f7ff f95a 	bl	8000aa8 <__aeabi_dcmplt>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <ftoa+0xa0>
 80017fa:	2304      	movs	r3, #4
 80017fc:	603b      	str	r3, [r7, #0]
 80017fe:	e028      	b.n	8001852 <ftoa+0xf2>
		else if (f < 1000.0) precision = 3;
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	4b6b      	ldr	r3, [pc, #428]	; (80019b4 <ftoa+0x254>)
 8001806:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800180a:	f7ff f94d 	bl	8000aa8 <__aeabi_dcmplt>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d002      	beq.n	800181a <ftoa+0xba>
 8001814:	2303      	movs	r3, #3
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	e01b      	b.n	8001852 <ftoa+0xf2>
		else if (f < 10000.0) precision = 2;
 800181a:	a35f      	add	r3, pc, #380	; (adr r3, 8001998 <ftoa+0x238>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001824:	f7ff f940 	bl	8000aa8 <__aeabi_dcmplt>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <ftoa+0xd4>
 800182e:	2302      	movs	r3, #2
 8001830:	603b      	str	r3, [r7, #0]
 8001832:	e00e      	b.n	8001852 <ftoa+0xf2>
		else if (f < 100000.0) precision = 1;
 8001834:	a35a      	add	r3, pc, #360	; (adr r3, 80019a0 <ftoa+0x240>)
 8001836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800183e:	f7ff f933 	bl	8000aa8 <__aeabi_dcmplt>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <ftoa+0xee>
 8001848:	2301      	movs	r3, #1
 800184a:	603b      	str	r3, [r7, #0]
 800184c:	e001      	b.n	8001852 <ftoa+0xf2>
		else precision = 0;
 800184e:	2300      	movs	r3, #0
 8001850:	603b      	str	r3, [r7, #0]
	}

	// round value according the precision
	if (precision)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d00d      	beq.n	8001874 <ftoa+0x114>
		f += rounders[precision];
 8001858:	4a57      	ldr	r2, [pc, #348]	; (80019b8 <ftoa+0x258>)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	4413      	add	r3, r2
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001868:	f7fe fcf6 	bl	8000258 <__adddf3>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9c7 2302 	strd	r2, r3, [r7, #8]

	// integer part...
	intPart = f;
 8001874:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001878:	f7ff f93e 	bl	8000af8 <__aeabi_d2iz>
 800187c:	4603      	mov	r3, r0
 800187e:	61fb      	str	r3, [r7, #28]
	f -= intPart;
 8001880:	69f8      	ldr	r0, [r7, #28]
 8001882:	f7fe fe35 	bl	80004f0 <__aeabi_i2d>
 8001886:	4602      	mov	r2, r0
 8001888:	460b      	mov	r3, r1
 800188a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800188e:	f7fe fce1 	bl	8000254 <__aeabi_dsub>
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	e9c7 2302 	strd	r2, r3, [r7, #8]

	if (!intPart)
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d105      	bne.n	80018ac <ftoa+0x14c>
		*ptr++ = '0';
 80018a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a2:	1c5a      	adds	r2, r3, #1
 80018a4:	627a      	str	r2, [r7, #36]	; 0x24
 80018a6:	2230      	movs	r2, #48	; 0x30
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e038      	b.n	800191e <ftoa+0x1be>
	else
	{
		// save start pointer
		p = ptr;
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	623b      	str	r3, [r7, #32]

		// convert (reverse order)
		while (intPart)
 80018b0:	e01a      	b.n	80018e8 <ftoa+0x188>
		{
			*p++ = '0' + intPart % 10;
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	4b41      	ldr	r3, [pc, #260]	; (80019bc <ftoa+0x25c>)
 80018b6:	fb83 1302 	smull	r1, r3, r3, r2
 80018ba:	1099      	asrs	r1, r3, #2
 80018bc:	17d3      	asrs	r3, r2, #31
 80018be:	1ac9      	subs	r1, r1, r3
 80018c0:	460b      	mov	r3, r1
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	440b      	add	r3, r1
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	1ad1      	subs	r1, r2, r3
 80018ca:	b2ca      	uxtb	r2, r1
 80018cc:	6a3b      	ldr	r3, [r7, #32]
 80018ce:	1c59      	adds	r1, r3, #1
 80018d0:	6239      	str	r1, [r7, #32]
 80018d2:	3230      	adds	r2, #48	; 0x30
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	701a      	strb	r2, [r3, #0]
			intPart /= 10;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	4a38      	ldr	r2, [pc, #224]	; (80019bc <ftoa+0x25c>)
 80018dc:	fb82 1203 	smull	r1, r2, r2, r3
 80018e0:	1092      	asrs	r2, r2, #2
 80018e2:	17db      	asrs	r3, r3, #31
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	61fb      	str	r3, [r7, #28]
		while (intPart)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1e1      	bne.n	80018b2 <ftoa+0x152>
		}

		// save end pos
		p1 = p;
 80018ee:	6a3b      	ldr	r3, [r7, #32]
 80018f0:	61bb      	str	r3, [r7, #24]

		// reverse result
		while (p > ptr)
 80018f2:	e00e      	b.n	8001912 <ftoa+0x1b2>
		{
			c = *--p;
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	623b      	str	r3, [r7, #32]
 80018fa:	6a3b      	ldr	r3, [r7, #32]
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	75fb      	strb	r3, [r7, #23]
			*p = *ptr;
 8001900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001902:	781a      	ldrb	r2, [r3, #0]
 8001904:	6a3b      	ldr	r3, [r7, #32]
 8001906:	701a      	strb	r2, [r3, #0]
			*ptr++ = c;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	1c5a      	adds	r2, r3, #1
 800190c:	627a      	str	r2, [r7, #36]	; 0x24
 800190e:	7dfa      	ldrb	r2, [r7, #23]
 8001910:	701a      	strb	r2, [r3, #0]
		while (p > ptr)
 8001912:	6a3a      	ldr	r2, [r7, #32]
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	429a      	cmp	r2, r3
 8001918:	d8ec      	bhi.n	80018f4 <ftoa+0x194>
		}

		// restore end pos
		ptr = p1;
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
	}

	// decimal part
	if (precision)
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d030      	beq.n	8001986 <ftoa+0x226>
	{
		// place decimal point
		*ptr++ = '.';
 8001924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	627a      	str	r2, [r7, #36]	; 0x24
 800192a:	222e      	movs	r2, #46	; 0x2e
 800192c:	701a      	strb	r2, [r3, #0]

		// convert
		while (precision--)
 800192e:	e025      	b.n	800197c <ftoa+0x21c>
		{
			f *= 10.0;
 8001930:	f04f 0200 	mov.w	r2, #0
 8001934:	4b1d      	ldr	r3, [pc, #116]	; (80019ac <ftoa+0x24c>)
 8001936:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800193a:	f7fe fe43 	bl	80005c4 <__aeabi_dmul>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	e9c7 2302 	strd	r2, r3, [r7, #8]
			c = f;
 8001946:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800194a:	f7ff f8fd 	bl	8000b48 <__aeabi_d2uiz>
 800194e:	4603      	mov	r3, r0
 8001950:	75fb      	strb	r3, [r7, #23]
			*ptr++ = '0' + c;
 8001952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001954:	1c5a      	adds	r2, r3, #1
 8001956:	627a      	str	r2, [r7, #36]	; 0x24
 8001958:	7dfa      	ldrb	r2, [r7, #23]
 800195a:	3230      	adds	r2, #48	; 0x30
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	701a      	strb	r2, [r3, #0]
			f -= c;
 8001960:	7dfb      	ldrb	r3, [r7, #23]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fdc4 	bl	80004f0 <__aeabi_i2d>
 8001968:	4602      	mov	r2, r0
 800196a:	460b      	mov	r3, r1
 800196c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001970:	f7fe fc70 	bl	8000254 <__aeabi_dsub>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	e9c7 2302 	strd	r2, r3, [r7, #8]
		while (precision--)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	1e5a      	subs	r2, r3, #1
 8001980:	603a      	str	r2, [r7, #0]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1d4      	bne.n	8001930 <ftoa+0x1d0>
		}
	}

	// terminating zero
	*ptr = 0;
 8001986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001988:	2200      	movs	r2, #0
 800198a:	701a      	strb	r2, [r3, #0]

	return buf;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3728      	adds	r7, #40	; 0x28
 8001992:	46bd      	mov	sp, r7
 8001994:	bdb0      	pop	{r4, r5, r7, pc}
 8001996:	bf00      	nop
 8001998:	00000000 	.word	0x00000000
 800199c:	40c38800 	.word	0x40c38800
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40f86a00 	.word	0x40f86a00
 80019a8:	3ff00000 	.word	0x3ff00000
 80019ac:	40240000 	.word	0x40240000
 80019b0:	40590000 	.word	0x40590000
 80019b4:	408f4000 	.word	0x408f4000
 80019b8:	08007cc0 	.word	0x08007cc0
 80019bc:	66666667 	.word	0x66666667

080019c0 <InitQueue>:
#include "command_queue.h"

/*adding this on .h file caused an error, Need to check*/
extern DriveTypeDef drive1, drive2;

void InitQueue(queue *q){
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

	q->head = NULL;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
	q->tail = NULL;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	605a      	str	r2, [r3, #4]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr

080019de <Enqueue>:

uint8_t Enqueue(queue *q, uint8_t *str){
 80019de:	b580      	push	{r7, lr}
 80019e0:	b084      	sub	sp, #16
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
 80019e6:	6039      	str	r1, [r7, #0]

	/*Create a new node */
	node *newNode 	= malloc(sizeof(node));
 80019e8:	2008      	movs	r0, #8
 80019ea:	f003 f90f 	bl	8004c0c <malloc>
 80019ee:	4603      	mov	r3, r0
 80019f0:	60fb      	str	r3, [r7, #12]

	if(newNode == NULL) return FALSE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d101      	bne.n	80019fc <Enqueue+0x1e>
 80019f8:	2300      	movs	r3, #0
 80019fa:	e018      	b.n	8001a2e <Enqueue+0x50>

	newNode->str	= str;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	601a      	str	r2, [r3, #0]
	newNode->next 		= NULL;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2200      	movs	r2, #0
 8001a06:	605a      	str	r2, [r3, #4]

	/*Set tails*/
	if(q->tail != NULL){
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d003      	beq.n	8001a18 <Enqueue+0x3a>

		q->tail->next 	= newNode;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	68fa      	ldr	r2, [r7, #12]
 8001a16:	605a      	str	r2, [r3, #4]
	}

	q->tail 		= newNode;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	605a      	str	r2, [r3, #4]

	/*Set head*/
	if(q->head == NULL){
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d102      	bne.n	8001a2c <Enqueue+0x4e>
		q->head 	= newNode;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68fa      	ldr	r2, [r7, #12]
 8001a2a:	601a      	str	r2, [r3, #0]
	}

	return TRUE;
 8001a2c:	2301      	movs	r3, #1
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <Dequeue>:

uint8_t* Dequeue(queue *q){
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]

	/*Check the emptiness*/
	if(q->head == NULL) return NULL;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d101      	bne.n	8001a4a <Dequeue+0x14>
 8001a46:	2300      	movs	r3, #0
 8001a48:	e015      	b.n	8001a76 <Dequeue+0x40>

	/*Save the head of the Queue*/
	node *tmp 		= q->head;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	60fb      	str	r3, [r7, #12]
	uint8_t *str 	= tmp->str;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	60bb      	str	r3, [r7, #8]
	q->head 		= q->head->next;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	685a      	ldr	r2, [r3, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	601a      	str	r2, [r3, #0]

	if(q->head == NULL){
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d102      	bne.n	8001a6e <Dequeue+0x38>
		q->tail = NULL;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	605a      	str	r2, [r3, #4]
	}
	free(tmp);
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f003 f8d4 	bl	8004c1c <free>
	return str;
 8001a74:	68bb      	ldr	r3, [r7, #8]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3710      	adds	r7, #16
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
	...

08001a80 <CreatePollingList>:


void CreatePollingList(){
 8001a80:	b480      	push	{r7}
 8001a82:	b087      	sub	sp, #28
 8001a84:	af00      	add	r7, sp, #0

	uint8_t SR_CMD[] = "SR\r\0";
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <CreatePollingList+0x54>)
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a90:	6018      	str	r0, [r3, #0]
 8001a92:	3304      	adds	r3, #4
 8001a94:	7019      	strb	r1, [r3, #0]
	uint8_t PX_CMD[] = "PX\r\0";
 8001a96:	4a10      	ldr	r2, [pc, #64]	; (8001ad8 <CreatePollingList+0x58>)
 8001a98:	f107 0308 	add.w	r3, r7, #8
 8001a9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aa0:	6018      	str	r0, [r3, #0]
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	7019      	strb	r1, [r3, #0]
	uint8_t IQ_CMD[] = "IQ\r\0";
 8001aa6:	4a0d      	ldr	r2, [pc, #52]	; (8001adc <CreatePollingList+0x5c>)
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aae:	6018      	str	r0, [r3, #0]
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	7019      	strb	r1, [r3, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

	memcpy(PollingList[0],IQ_CMD,4);
 8001ab6:	4a0a      	ldr	r2, [pc, #40]	; (8001ae0 <CreatePollingList+0x60>)
 8001ab8:	6013      	str	r3, [r2, #0]
 8001aba:	68bb      	ldr	r3, [r7, #8]
	memcpy(PollingList[1],PX_CMD,4);
 8001abc:	4a08      	ldr	r2, [pc, #32]	; (8001ae0 <CreatePollingList+0x60>)
 8001abe:	f8c2 300a 	str.w	r3, [r2, #10]
 8001ac2:	693b      	ldr	r3, [r7, #16]
	memcpy(PollingList[2],SR_CMD,4);
 8001ac4:	4a06      	ldr	r2, [pc, #24]	; (8001ae0 <CreatePollingList+0x60>)
 8001ac6:	6153      	str	r3, [r2, #20]

}
 8001ac8:	bf00      	nop
 8001aca:	371c      	adds	r7, #28
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bc80      	pop	{r7}
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	08007bf4 	.word	0x08007bf4
 8001ad8:	08007bfc 	.word	0x08007bfc
 8001adc:	08007c04 	.word	0x08007c04
 8001ae0:	20000268 	.word	0x20000268

08001ae4 <CreateInitList>:

void CreateInitList(){
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0

	memcpy(MasterInitList[0],"SR\r\0",4);
 8001ae8:	2204      	movs	r2, #4
 8001aea:	4937      	ldr	r1, [pc, #220]	; (8001bc8 <CreateInitList+0xe4>)
 8001aec:	4837      	ldr	r0, [pc, #220]	; (8001bcc <CreateInitList+0xe8>)
 8001aee:	f003 f89d 	bl	8004c2c <memcpy>
	memcpy(MasterInitList[1],"MO\r\0",4);
 8001af2:	2204      	movs	r2, #4
 8001af4:	4936      	ldr	r1, [pc, #216]	; (8001bd0 <CreateInitList+0xec>)
 8001af6:	4837      	ldr	r0, [pc, #220]	; (8001bd4 <CreateInitList+0xf0>)
 8001af8:	f003 f898 	bl	8004c2c <memcpy>
	memcpy(MasterInitList[2],"LD\r\0",4);
 8001afc:	2204      	movs	r2, #4
 8001afe:	4936      	ldr	r1, [pc, #216]	; (8001bd8 <CreateInitList+0xf4>)
 8001b00:	4836      	ldr	r0, [pc, #216]	; (8001bdc <CreateInitList+0xf8>)
 8001b02:	f003 f893 	bl	8004c2c <memcpy>
	memcpy(MasterInitList[3],"UM=5\r\0",6);
 8001b06:	2206      	movs	r2, #6
 8001b08:	4935      	ldr	r1, [pc, #212]	; (8001be0 <CreateInitList+0xfc>)
 8001b0a:	4836      	ldr	r0, [pc, #216]	; (8001be4 <CreateInitList+0x100>)
 8001b0c:	f003 f88e 	bl	8004c2c <memcpy>
	memcpy(MasterInitList[4],"AC=3000\r\0",9);
 8001b10:	2209      	movs	r2, #9
 8001b12:	4935      	ldr	r1, [pc, #212]	; (8001be8 <CreateInitList+0x104>)
 8001b14:	4835      	ldr	r0, [pc, #212]	; (8001bec <CreateInitList+0x108>)
 8001b16:	f003 f889 	bl	8004c2c <memcpy>
	memcpy(MasterInitList[5],"DC=3000\r\0",9);
 8001b1a:	2209      	movs	r2, #9
 8001b1c:	4934      	ldr	r1, [pc, #208]	; (8001bf0 <CreateInitList+0x10c>)
 8001b1e:	4835      	ldr	r0, [pc, #212]	; (8001bf4 <CreateInitList+0x110>)
 8001b20:	f003 f884 	bl	8004c2c <memcpy>
	memcpy(MasterInitList[6],"UM\r\0",4);
 8001b24:	2204      	movs	r2, #4
 8001b26:	4934      	ldr	r1, [pc, #208]	; (8001bf8 <CreateInitList+0x114>)
 8001b28:	4834      	ldr	r0, [pc, #208]	; (8001bfc <CreateInitList+0x118>)
 8001b2a:	f003 f87f 	bl	8004c2c <memcpy>
	memcpy(MasterInitList[7],"SP=20000\r\0",10);
 8001b2e:	220a      	movs	r2, #10
 8001b30:	4933      	ldr	r1, [pc, #204]	; (8001c00 <CreateInitList+0x11c>)
 8001b32:	4834      	ldr	r0, [pc, #208]	; (8001c04 <CreateInitList+0x120>)
 8001b34:	f003 f87a 	bl	8004c2c <memcpy>
	memcpy(MasterInitList[8],"MO=1\r\0",6);
 8001b38:	2206      	movs	r2, #6
 8001b3a:	4933      	ldr	r1, [pc, #204]	; (8001c08 <CreateInitList+0x124>)
 8001b3c:	4833      	ldr	r0, [pc, #204]	; (8001c0c <CreateInitList+0x128>)
 8001b3e:	f003 f875 	bl	8004c2c <memcpy>
	memcpy(MasterInitList[9],"SR\r\0",4);
 8001b42:	2204      	movs	r2, #4
 8001b44:	4920      	ldr	r1, [pc, #128]	; (8001bc8 <CreateInitList+0xe4>)
 8001b46:	4832      	ldr	r0, [pc, #200]	; (8001c10 <CreateInitList+0x12c>)
 8001b48:	f003 f870 	bl	8004c2c <memcpy>
	//memcpy(MasterInitList[10],"LD\r\0",4);
	memcpy(MasterInitList[10],"MO\r\0",4);
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4920      	ldr	r1, [pc, #128]	; (8001bd0 <CreateInitList+0xec>)
 8001b50:	4830      	ldr	r0, [pc, #192]	; (8001c14 <CreateInitList+0x130>)
 8001b52:	f003 f86b 	bl	8004c2c <memcpy>
//	memcpy(MasterInitList[7],"IQ\r\0",4);
//	memcpy(MasterInitList[8],"IQ\r\0",4);
//	memcpy(MasterInitList[9],"SR\r\0",4);
//	memcpy(MasterInitList[10],"IQ\r\0",4);

	memcpy(SlaveInitList[0],"SR\r\0",4);
 8001b56:	2204      	movs	r2, #4
 8001b58:	491b      	ldr	r1, [pc, #108]	; (8001bc8 <CreateInitList+0xe4>)
 8001b5a:	482f      	ldr	r0, [pc, #188]	; (8001c18 <CreateInitList+0x134>)
 8001b5c:	f003 f866 	bl	8004c2c <memcpy>
	memcpy(SlaveInitList[1],"MO\r\0",4);
 8001b60:	2204      	movs	r2, #4
 8001b62:	491b      	ldr	r1, [pc, #108]	; (8001bd0 <CreateInitList+0xec>)
 8001b64:	482d      	ldr	r0, [pc, #180]	; (8001c1c <CreateInitList+0x138>)
 8001b66:	f003 f861 	bl	8004c2c <memcpy>
	memcpy(SlaveInitList[2],"LD\r\0",4);
 8001b6a:	2204      	movs	r2, #4
 8001b6c:	491a      	ldr	r1, [pc, #104]	; (8001bd8 <CreateInitList+0xf4>)
 8001b6e:	482c      	ldr	r0, [pc, #176]	; (8001c20 <CreateInitList+0x13c>)
 8001b70:	f003 f85c 	bl	8004c2c <memcpy>
	memcpy(SlaveInitList[3],"UM=1\r\0",6);
 8001b74:	2206      	movs	r2, #6
 8001b76:	492b      	ldr	r1, [pc, #172]	; (8001c24 <CreateInitList+0x140>)
 8001b78:	482b      	ldr	r0, [pc, #172]	; (8001c28 <CreateInitList+0x144>)
 8001b7a:	f003 f857 	bl	8004c2c <memcpy>
	memcpy(SlaveInitList[4],"AC=3000\r\0",9);
 8001b7e:	2209      	movs	r2, #9
 8001b80:	4919      	ldr	r1, [pc, #100]	; (8001be8 <CreateInitList+0x104>)
 8001b82:	482a      	ldr	r0, [pc, #168]	; (8001c2c <CreateInitList+0x148>)
 8001b84:	f003 f852 	bl	8004c2c <memcpy>
	memcpy(SlaveInitList[5],"DC=3000\r\0",9);
 8001b88:	2209      	movs	r2, #9
 8001b8a:	4919      	ldr	r1, [pc, #100]	; (8001bf0 <CreateInitList+0x10c>)
 8001b8c:	4828      	ldr	r0, [pc, #160]	; (8001c30 <CreateInitList+0x14c>)
 8001b8e:	f003 f84d 	bl	8004c2c <memcpy>
	memcpy(SlaveInitList[6],"UM\r\0",4);
 8001b92:	2204      	movs	r2, #4
 8001b94:	4918      	ldr	r1, [pc, #96]	; (8001bf8 <CreateInitList+0x114>)
 8001b96:	4827      	ldr	r0, [pc, #156]	; (8001c34 <CreateInitList+0x150>)
 8001b98:	f003 f848 	bl	8004c2c <memcpy>
	memcpy(SlaveInitList[7],"SP=20000\r\0",10);
 8001b9c:	220a      	movs	r2, #10
 8001b9e:	4918      	ldr	r1, [pc, #96]	; (8001c00 <CreateInitList+0x11c>)
 8001ba0:	4825      	ldr	r0, [pc, #148]	; (8001c38 <CreateInitList+0x154>)
 8001ba2:	f003 f843 	bl	8004c2c <memcpy>
	memcpy(SlaveInitList[8],"MO=1\r\0",6);
 8001ba6:	2206      	movs	r2, #6
 8001ba8:	4917      	ldr	r1, [pc, #92]	; (8001c08 <CreateInitList+0x124>)
 8001baa:	4824      	ldr	r0, [pc, #144]	; (8001c3c <CreateInitList+0x158>)
 8001bac:	f003 f83e 	bl	8004c2c <memcpy>
	memcpy(SlaveInitList[9],"SR\r\0",4);
 8001bb0:	2204      	movs	r2, #4
 8001bb2:	4905      	ldr	r1, [pc, #20]	; (8001bc8 <CreateInitList+0xe4>)
 8001bb4:	4822      	ldr	r0, [pc, #136]	; (8001c40 <CreateInitList+0x15c>)
 8001bb6:	f003 f839 	bl	8004c2c <memcpy>
	//memcpy(SlaveInitList[10],"LD\r\0",4);
	memcpy(SlaveInitList[10],"MO=1\r\0",4);
 8001bba:	2204      	movs	r2, #4
 8001bbc:	4912      	ldr	r1, [pc, #72]	; (8001c08 <CreateInitList+0x124>)
 8001bbe:	4821      	ldr	r0, [pc, #132]	; (8001c44 <CreateInitList+0x160>)
 8001bc0:	f003 f834 	bl	8004c2c <memcpy>

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	08007bf4 	.word	0x08007bf4
 8001bcc:	20000290 	.word	0x20000290
 8001bd0:	08007c0c 	.word	0x08007c0c
 8001bd4:	2000029f 	.word	0x2000029f
 8001bd8:	08007c14 	.word	0x08007c14
 8001bdc:	200002ae 	.word	0x200002ae
 8001be0:	08007c1c 	.word	0x08007c1c
 8001be4:	200002bd 	.word	0x200002bd
 8001be8:	08007c24 	.word	0x08007c24
 8001bec:	200002cc 	.word	0x200002cc
 8001bf0:	08007c30 	.word	0x08007c30
 8001bf4:	200002db 	.word	0x200002db
 8001bf8:	08007c3c 	.word	0x08007c3c
 8001bfc:	200002ea 	.word	0x200002ea
 8001c00:	08007c44 	.word	0x08007c44
 8001c04:	200002f9 	.word	0x200002f9
 8001c08:	08007c50 	.word	0x08007c50
 8001c0c:	20000308 	.word	0x20000308
 8001c10:	20000317 	.word	0x20000317
 8001c14:	20000326 	.word	0x20000326
 8001c18:	20000344 	.word	0x20000344
 8001c1c:	20000353 	.word	0x20000353
 8001c20:	20000362 	.word	0x20000362
 8001c24:	08007c58 	.word	0x08007c58
 8001c28:	20000371 	.word	0x20000371
 8001c2c:	20000380 	.word	0x20000380
 8001c30:	2000038f 	.word	0x2000038f
 8001c34:	2000039e 	.word	0x2000039e
 8001c38:	200003ad 	.word	0x200003ad
 8001c3c:	200003bc 	.word	0x200003bc
 8001c40:	200003cb 	.word	0x200003cb
 8001c44:	200003da 	.word	0x200003da

08001c48 <getNextMasterCommand>:

void getNextMasterCommand(uint8_t *cmd){
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

	if(isMasterInit == FALSE){
 8001c50:	4b47      	ldr	r3, [pc, #284]	; (8001d70 <getNextMasterCommand+0x128>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d13d      	bne.n	8001cd4 <getNextMasterCommand+0x8c>

		if(MasterInitList[masterInitCmdIndex][0] != 0 && masterInitCmdIndex < MAX_INIT ){
 8001c58:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <getNextMasterCommand+0x12c>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4a46      	ldr	r2, [pc, #280]	; (8001d78 <getNextMasterCommand+0x130>)
 8001c60:	460b      	mov	r3, r1
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a5b      	subs	r3, r3, r1
 8001c66:	4413      	add	r3, r2
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d02a      	beq.n	8001cc4 <getNextMasterCommand+0x7c>
 8001c6e:	4b41      	ldr	r3, [pc, #260]	; (8001d74 <getNextMasterCommand+0x12c>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b0a      	cmp	r3, #10
 8001c74:	d826      	bhi.n	8001cc4 <getNextMasterCommand+0x7c>


			for(int i = 0; i < 14; i++){
 8001c76:	2300      	movs	r3, #0
 8001c78:	617b      	str	r3, [r7, #20]
 8001c7a:	e016      	b.n	8001caa <getNextMasterCommand+0x62>
				*(cmd + i) = 0;
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	4413      	add	r3, r2
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
				*(cmd + i) = MasterInitList[masterInitCmdIndex][i];
 8001c86:	4b3b      	ldr	r3, [pc, #236]	; (8001d74 <getNextMasterCommand+0x12c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	441a      	add	r2, r3
 8001c92:	4939      	ldr	r1, [pc, #228]	; (8001d78 <getNextMasterCommand+0x130>)
 8001c94:	4603      	mov	r3, r0
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a1b      	subs	r3, r3, r0
 8001c9a:	4419      	add	r1, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	440b      	add	r3, r1
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	7013      	strb	r3, [r2, #0]
			for(int i = 0; i < 14; i++){
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	2b0d      	cmp	r3, #13
 8001cae:	dde5      	ble.n	8001c7c <getNextMasterCommand+0x34>
			}

			//copyArrays((uint8_t*)MasterInitList[masterInitCmdIndex], cmd);
			fetchNextMaster = FALSE;
 8001cb0:	4b32      	ldr	r3, [pc, #200]	; (8001d7c <getNextMasterCommand+0x134>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	701a      	strb	r2, [r3, #0]
			masterInitCmdIndex++;
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	; (8001d74 <getNextMasterCommand+0x12c>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <getNextMasterCommand+0x12c>)
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e051      	b.n	8001d68 <getNextMasterCommand+0x120>


		}else if(masterInitCmdIndex >= MAX_INIT){
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	; (8001d74 <getNextMasterCommand+0x12c>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	2b0a      	cmp	r3, #10
 8001cca:	d94d      	bls.n	8001d68 <getNextMasterCommand+0x120>
			isMasterInit = TRUE;
 8001ccc:	4b28      	ldr	r3, [pc, #160]	; (8001d70 <getNextMasterCommand+0x128>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
 8001cd2:	e049      	b.n	8001d68 <getNextMasterCommand+0x120>

		}else{

		}
	}else if(isMasterInit == TRUE){
 8001cd4:	4b26      	ldr	r3, [pc, #152]	; (8001d70 <getNextMasterCommand+0x128>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d145      	bne.n	8001d68 <getNextMasterCommand+0x120>

		/*Check if there is any user command or sync command*/
		uint8_t * tmp = Dequeue(&q1);
 8001cdc:	4828      	ldr	r0, [pc, #160]	; (8001d80 <getNextMasterCommand+0x138>)
 8001cde:	f7ff feaa 	bl	8001a36 <Dequeue>
 8001ce2:	60b8      	str	r0, [r7, #8]
		if(tmp != NULL){
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d016      	beq.n	8001d18 <getNextMasterCommand+0xd0>

			//cmd = tmp; // this will not modify the pointer, either return pointer or fill it
			for(int i = 0; i < 14; i++){
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	e00f      	b.n	8001d10 <getNextMasterCommand+0xc8>
				*(cmd + i) = 0;
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	687a      	ldr	r2, [r7, #4]
 8001cf4:	4413      	add	r3, r2
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	701a      	strb	r2, [r3, #0]
				*(cmd + i) = *(tmp+i);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	441a      	add	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	6879      	ldr	r1, [r7, #4]
 8001d04:	440b      	add	r3, r1
 8001d06:	7812      	ldrb	r2, [r2, #0]
 8001d08:	701a      	strb	r2, [r3, #0]
			for(int i = 0; i < 14; i++){
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	613b      	str	r3, [r7, #16]
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	2b0d      	cmp	r3, #13
 8001d14:	ddec      	ble.n	8001cf0 <getNextMasterCommand+0xa8>
			}
			//copyArrays(tmp, cmd);
			return;
 8001d16:	e027      	b.n	8001d68 <getNextMasterCommand+0x120>

		}else{	/*If no user command check whether need to poll and send poll cmd*/

			if(isPolling == TRUE && isPositionCheck == TRUE){
 8001d18:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <getNextMasterCommand+0x13c>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d103      	bne.n	8001d28 <getNextMasterCommand+0xe0>
 8001d20:	4b19      	ldr	r3, [pc, #100]	; (8001d88 <getNextMasterCommand+0x140>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d01e      	beq.n	8001d66 <getNextMasterCommand+0x11e>
				return;
			}else if(isPolling == TRUE && isPositionCheck == FALSE){
 8001d28:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <getNextMasterCommand+0x13c>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d11b      	bne.n	8001d68 <getNextMasterCommand+0x120>
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <getNextMasterCommand+0x140>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d117      	bne.n	8001d68 <getNextMasterCommand+0x120>

				for(int i = 0; i < 14; i++){
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e00f      	b.n	8001d5e <getNextMasterCommand+0x116>
					*(cmd + i) = 0;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	2200      	movs	r2, #0
 8001d46:	701a      	strb	r2, [r3, #0]
					*(cmd + i) = PollingList[0][i];
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	490f      	ldr	r1, [pc, #60]	; (8001d8c <getNextMasterCommand+0x144>)
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	440a      	add	r2, r1
 8001d54:	7812      	ldrb	r2, [r2, #0]
 8001d56:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 14; i++){
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2b0d      	cmp	r3, #13
 8001d62:	ddec      	ble.n	8001d3e <getNextMasterCommand+0xf6>
				}
				return;
 8001d64:	e000      	b.n	8001d68 <getNextMasterCommand+0x120>
				return;
 8001d66:	bf00      	nop
			}
		}
	}
}
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20000e60 	.word	0x20000e60
 8001d74:	20000244 	.word	0x20000244
 8001d78:	20000290 	.word	0x20000290
 8001d7c:	20000042 	.word	0x20000042
 8001d80:	20000e64 	.word	0x20000e64
 8001d84:	20000e5d 	.word	0x20000e5d
 8001d88:	20000e5f 	.word	0x20000e5f
 8001d8c:	20000268 	.word	0x20000268

08001d90 <getNextSlaveCommand>:

void getNextSlaveCommand(uint8_t *cmd){
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]

	if(isSlaveInit == FALSE){
 8001d98:	4b42      	ldr	r3, [pc, #264]	; (8001ea4 <getNextSlaveCommand+0x114>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d13d      	bne.n	8001e1c <getNextSlaveCommand+0x8c>

			if(SlaveInitList[slaveInitCmdIndex][0] != 0 && slaveInitCmdIndex < MAX_INIT ){
 8001da0:	4b41      	ldr	r3, [pc, #260]	; (8001ea8 <getNextSlaveCommand+0x118>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	4a41      	ldr	r2, [pc, #260]	; (8001eac <getNextSlaveCommand+0x11c>)
 8001da8:	460b      	mov	r3, r1
 8001daa:	011b      	lsls	r3, r3, #4
 8001dac:	1a5b      	subs	r3, r3, r1
 8001dae:	4413      	add	r3, r2
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d02a      	beq.n	8001e0c <getNextSlaveCommand+0x7c>
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <getNextSlaveCommand+0x118>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	2b0a      	cmp	r3, #10
 8001dbc:	d826      	bhi.n	8001e0c <getNextSlaveCommand+0x7c>


				for(int i = 0; i < 14; i++){
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	e016      	b.n	8001df2 <getNextSlaveCommand+0x62>
					*(cmd + i) = 0;
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
					*(cmd + i) = SlaveInitList[slaveInitCmdIndex][i];
 8001dce:	4b36      	ldr	r3, [pc, #216]	; (8001ea8 <getNextSlaveCommand+0x118>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	687a      	ldr	r2, [r7, #4]
 8001dd8:	441a      	add	r2, r3
 8001dda:	4934      	ldr	r1, [pc, #208]	; (8001eac <getNextSlaveCommand+0x11c>)
 8001ddc:	4603      	mov	r3, r0
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a1b      	subs	r3, r3, r0
 8001de2:	4419      	add	r1, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	440b      	add	r3, r1
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	7013      	strb	r3, [r2, #0]
				for(int i = 0; i < 14; i++){
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	3301      	adds	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	2b0d      	cmp	r3, #13
 8001df6:	dde5      	ble.n	8001dc4 <getNextSlaveCommand+0x34>
				}

				//copyArrays((uint8_t*)SlaveInitList[slaveInitCmdIndex], cmd);
				fetchNextSlave = FALSE;
 8001df8:	4b2d      	ldr	r3, [pc, #180]	; (8001eb0 <getNextSlaveCommand+0x120>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
				slaveInitCmdIndex++;
 8001dfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ea8 <getNextSlaveCommand+0x118>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b28      	ldr	r3, [pc, #160]	; (8001ea8 <getNextSlaveCommand+0x118>)
 8001e08:	701a      	strb	r2, [r3, #0]
 8001e0a:	e048      	b.n	8001e9e <getNextSlaveCommand+0x10e>


			}else if(slaveInitCmdIndex >= MAX_INIT){
 8001e0c:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <getNextSlaveCommand+0x118>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b0a      	cmp	r3, #10
 8001e12:	d944      	bls.n	8001e9e <getNextSlaveCommand+0x10e>
				isSlaveInit = TRUE;
 8001e14:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <getNextSlaveCommand+0x114>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
 8001e1a:	e040      	b.n	8001e9e <getNextSlaveCommand+0x10e>

			}else{

			}
		}else if(isSlaveInit == TRUE){
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <getNextSlaveCommand+0x114>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d13c      	bne.n	8001e9e <getNextSlaveCommand+0x10e>

			/*Check if there is any user command or sync command*/
			uint8_t * tmp = Dequeue(&q2);
 8001e24:	4823      	ldr	r0, [pc, #140]	; (8001eb4 <getNextSlaveCommand+0x124>)
 8001e26:	f7ff fe06 	bl	8001a36 <Dequeue>
 8001e2a:	60b8      	str	r0, [r7, #8]
			if(tmp != NULL){
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d016      	beq.n	8001e60 <getNextSlaveCommand+0xd0>

				//cmd = tmp; // this will not modify the pointer, either return pointer or fill it
				for(int i = 0; i < 14; i++){
 8001e32:	2300      	movs	r3, #0
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	e00f      	b.n	8001e58 <getNextSlaveCommand+0xc8>
					*(cmd + i) = 0;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2200      	movs	r2, #0
 8001e40:	701a      	strb	r2, [r3, #0]
					*(cmd + i) = *(tmp+i);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	441a      	add	r2, r3
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	440b      	add	r3, r1
 8001e4e:	7812      	ldrb	r2, [r2, #0]
 8001e50:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 14; i++){
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	3301      	adds	r3, #1
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	2b0d      	cmp	r3, #13
 8001e5c:	ddec      	ble.n	8001e38 <getNextSlaveCommand+0xa8>
				}
				//copyArrays(tmp, cmd);
				return;
 8001e5e:	e01e      	b.n	8001e9e <getNextSlaveCommand+0x10e>

			}else{	/*If no user command check whether need to poll and send poll cmd*/

				if(isPolling == TRUE){
 8001e60:	4b15      	ldr	r3, [pc, #84]	; (8001eb8 <getNextSlaveCommand+0x128>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d11a      	bne.n	8001e9e <getNextSlaveCommand+0x10e>

					/*Create the current command using the drive1->syncCmd*/
					/*syncCmd is created with algorithmically derived drive1->syncCurrent*/
					CreateCurrentCommand(&drive1);
 8001e68:	4814      	ldr	r0, [pc, #80]	; (8001ebc <getNextSlaveCommand+0x12c>)
 8001e6a:	f7ff fbd5 	bl	8001618 <CreateCurrentCommand>

					/*drive1->syncCmd is populated, copy to cmd*/
					for(int i = 0; i < 14; i++){
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e010      	b.n	8001e96 <getNextSlaveCommand+0x106>
						*(cmd + i) = 0;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	4413      	add	r3, r2
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	701a      	strb	r2, [r3, #0]
						*(cmd + i) = drive1.syncCmd[i];
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	4413      	add	r3, r2
 8001e84:	490d      	ldr	r1, [pc, #52]	; (8001ebc <getNextSlaveCommand+0x12c>)
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	440a      	add	r2, r1
 8001e8a:	3280      	adds	r2, #128	; 0x80
 8001e8c:	7812      	ldrb	r2, [r2, #0]
 8001e8e:	701a      	strb	r2, [r3, #0]
					for(int i = 0; i < 14; i++){
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b0d      	cmp	r3, #13
 8001e9a:	ddeb      	ble.n	8001e74 <getNextSlaveCommand+0xe4>
					}
					return;
 8001e9c:	bf00      	nop


				}
			}
		}
}
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000e61 	.word	0x20000e61
 8001ea8:	20000245 	.word	0x20000245
 8001eac:	20000344 	.word	0x20000344
 8001eb0:	20000043 	.word	0x20000043
 8001eb4:	20000e6c 	.word	0x20000e6c
 8001eb8:	20000e5d 	.word	0x20000e5d
 8001ebc:	200005b0 	.word	0x200005b0

08001ec0 <StateMachine>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*This function handles all the sequencing */
void StateMachine(){
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0

	/*Main States are 1.Init, 2.ReInit, 3.Run, 4.SyncRun */
	/*Different behaviors depending on isPolling, isGraphing, isPollPosition */
	switch(state){
 8001ec4:	4b54      	ldr	r3, [pc, #336]	; (8002018 <StateMachine+0x158>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	2b04      	cmp	r3, #4
 8001ecc:	f200 809c 	bhi.w	8002008 <StateMachine+0x148>
 8001ed0:	a201      	add	r2, pc, #4	; (adr r2, 8001ed8 <StateMachine+0x18>)
 8001ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ed6:	bf00      	nop
 8001ed8:	08001f2f 	.word	0x08001f2f
 8001edc:	08001fc5 	.word	0x08001fc5
 8001ee0:	08001fdd 	.word	0x08001fdd
 8001ee4:	08002009 	.word	0x08002009
 8001ee8:	08001eed 	.word	0x08001eed

	case START: isDelayUpdate = TRUE; 	/*At the startup it will be reside on this state */
 8001eec:	4b4b      	ldr	r3, [pc, #300]	; (800201c <StateMachine+0x15c>)
 8001eee:	2201      	movs	r2, #1
 8001ef0:	701a      	strb	r2, [r3, #0]
				setDelay(200);			/*No communication will be happen on this state */
 8001ef2:	20c8      	movs	r0, #200	; 0xc8
 8001ef4:	f7ff fb5e 	bl	80015b4 <setDelay>

				if(isStart == TRUE){
 8001ef8:	4b49      	ldr	r3, [pc, #292]	; (8002020 <StateMachine+0x160>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	f040 8085 	bne.w	800200c <StateMachine+0x14c>
					writeStringPC("\r\nStarting..\r\n\0");
 8001f02:	4848      	ldr	r0, [pc, #288]	; (8002024 <StateMachine+0x164>)
 8001f04:	f000 fc1c 	bl	8002740 <writeStringPC>
					HAL_Delay(100);
 8001f08:	2064      	movs	r0, #100	; 0x64
 8001f0a:	f001 f8f5 	bl	80030f8 <HAL_Delay>
					setState(INIT);
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 fc7e 	bl	8002810 <setState>
					ClearCurrentBuffer(&drive1);
 8001f14:	4844      	ldr	r0, [pc, #272]	; (8002028 <StateMachine+0x168>)
 8001f16:	f000 ff8b 	bl	8002e30 <ClearCurrentBuffer>
					fetchNextMaster = TRUE;
 8001f1a:	4b44      	ldr	r3, [pc, #272]	; (800202c <StateMachine+0x16c>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
					fetchNextSlave = TRUE;
 8001f20:	4b43      	ldr	r3, [pc, #268]	; (8002030 <StateMachine+0x170>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	701a      	strb	r2, [r3, #0]
					isStart = FALSE;
 8001f26:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <StateMachine+0x160>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	701a      	strb	r2, [r3, #0]
				}
				break;
 8001f2c:	e06e      	b.n	800200c <StateMachine+0x14c>

	case INIT:  if(isSyncing == TRUE){ /*If two or one motor is connected slowly send init commands */
 8001f2e:	4b41      	ldr	r3, [pc, #260]	; (8002034 <StateMachine+0x174>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d129      	bne.n	8001f8a <StateMachine+0xca>

					/*Send Initializing set of commands to both motors*/
					if(isMasterInit == FALSE || isSlaveInit == FALSE){
 8001f36:	4b40      	ldr	r3, [pc, #256]	; (8002038 <StateMachine+0x178>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d003      	beq.n	8001f46 <StateMachine+0x86>
 8001f3e:	4b3f      	ldr	r3, [pc, #252]	; (800203c <StateMachine+0x17c>)
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d114      	bne.n	8001f70 <StateMachine+0xb0>

						/*Get the init commands for master drive */
						if(fetchNextMaster == TRUE){
 8001f46:	4b39      	ldr	r3, [pc, #228]	; (800202c <StateMachine+0x16c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <StateMachine+0x9a>
							getNextMasterCommand(nextCmdMaster);
 8001f4e:	483c      	ldr	r0, [pc, #240]	; (8002040 <StateMachine+0x180>)
 8001f50:	f7ff fe7a 	bl	8001c48 <getNextMasterCommand>
							fetchNextMaster = FALSE;
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <StateMachine+0x16c>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	701a      	strb	r2, [r3, #0]
						}

						/*Get the init commands for slave drive */
						if(fetchNextSlave == TRUE){
 8001f5a:	4b35      	ldr	r3, [pc, #212]	; (8002030 <StateMachine+0x170>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d12f      	bne.n	8001fc2 <StateMachine+0x102>
							getNextSlaveCommand(nextCmdSlave);
 8001f62:	4838      	ldr	r0, [pc, #224]	; (8002044 <StateMachine+0x184>)
 8001f64:	f7ff ff14 	bl	8001d90 <getNextSlaveCommand>
							fetchNextSlave = FALSE;
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <StateMachine+0x170>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
						if(fetchNextSlave == TRUE){
 8001f6e:	e028      	b.n	8001fc2 <StateMachine+0x102>
						}

					}else{

						/*Inits are completed, set the next state and query the current at a faster rate*/
						isPolling = TRUE;
 8001f70:	4b35      	ldr	r3, [pc, #212]	; (8002048 <StateMachine+0x188>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	701a      	strb	r2, [r3, #0]
						setState(SYNC_RUN);
 8001f76:	2003      	movs	r0, #3
 8001f78:	f000 fc4a 	bl	8002810 <setState>
						isDelayUpdate = TRUE;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <StateMachine+0x15c>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
						setDelay(5);
 8001f82:	2005      	movs	r0, #5
 8001f84:	f7ff fb16 	bl	80015b4 <setDelay>
						setState(RUN);
						setDelay(5);
					}

				}
				break;
 8001f88:	e042      	b.n	8002010 <StateMachine+0x150>
					if(isMasterInit == FALSE){
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <StateMachine+0x178>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10a      	bne.n	8001fa8 <StateMachine+0xe8>
						if(fetchNextMaster == TRUE){
 8001f92:	4b26      	ldr	r3, [pc, #152]	; (800202c <StateMachine+0x16c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d13a      	bne.n	8002010 <StateMachine+0x150>
							getNextMasterCommand(nextCmdMaster);
 8001f9a:	4829      	ldr	r0, [pc, #164]	; (8002040 <StateMachine+0x180>)
 8001f9c:	f7ff fe54 	bl	8001c48 <getNextMasterCommand>
							fetchNextMaster = FALSE;
 8001fa0:	4b22      	ldr	r3, [pc, #136]	; (800202c <StateMachine+0x16c>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
				break;
 8001fa6:	e033      	b.n	8002010 <StateMachine+0x150>
						isPolling = TRUE;
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <StateMachine+0x188>)
 8001faa:	2201      	movs	r2, #1
 8001fac:	701a      	strb	r2, [r3, #0]
						isDelayUpdate = TRUE;
 8001fae:	4b1b      	ldr	r3, [pc, #108]	; (800201c <StateMachine+0x15c>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
						setState(RUN);
 8001fb4:	2002      	movs	r0, #2
 8001fb6:	f000 fc2b 	bl	8002810 <setState>
						setDelay(5);
 8001fba:	2005      	movs	r0, #5
 8001fbc:	f7ff fafa 	bl	80015b4 <setDelay>
				break;
 8001fc0:	e026      	b.n	8002010 <StateMachine+0x150>
 8001fc2:	e025      	b.n	8002010 <StateMachine+0x150>
	case RUN: /*Keep record the currents and position with drive status*/
			  /*If SYNC command issues in the middle go to re init and init the slave and
			   * then go to the SYNC_RUN state
			   */
				/*if user Buffer is empty, get the commands from pollBuffer and record process and log results*/
				if(fetchNextMaster == TRUE){
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <StateMachine+0x16c>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d105      	bne.n	8001fd8 <StateMachine+0x118>
					getNextMasterCommand(nextCmdMaster);
 8001fcc:	481c      	ldr	r0, [pc, #112]	; (8002040 <StateMachine+0x180>)
 8001fce:	f7ff fe3b 	bl	8001c48 <getNextMasterCommand>
					fetchNextMaster = FALSE;
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <StateMachine+0x16c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	701a      	strb	r2, [r3, #0]
				}

				__NOP();
 8001fd8:	bf00      	nop
				break;
 8001fda:	e01a      	b.n	8002012 <StateMachine+0x152>

	case SYNC_RUN: /*Query current, run the sync algorithm and sync the current*/
				/*if user Buffer is empty, get the commands from pollBuffer and record process and log results*/
				if(fetchNextMaster == TRUE){
 8001fdc:	4b13      	ldr	r3, [pc, #76]	; (800202c <StateMachine+0x16c>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d105      	bne.n	8001ff0 <StateMachine+0x130>
					getNextMasterCommand(nextCmdMaster);
 8001fe4:	4816      	ldr	r0, [pc, #88]	; (8002040 <StateMachine+0x180>)
 8001fe6:	f7ff fe2f 	bl	8001c48 <getNextMasterCommand>
					fetchNextMaster = FALSE;
 8001fea:	4b10      	ldr	r3, [pc, #64]	; (800202c <StateMachine+0x16c>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	701a      	strb	r2, [r3, #0]
				}

				if(fetchNextSlave == TRUE){
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	; (8002030 <StateMachine+0x170>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d105      	bne.n	8002004 <StateMachine+0x144>
					getNextSlaveCommand(nextCmdSlave);
 8001ff8:	4812      	ldr	r0, [pc, #72]	; (8002044 <StateMachine+0x184>)
 8001ffa:	f7ff fec9 	bl	8001d90 <getNextSlaveCommand>
					fetchNextSlave = FALSE;
 8001ffe:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <StateMachine+0x170>)
 8002000:	2200      	movs	r2, #0
 8002002:	701a      	strb	r2, [r3, #0]
				}

				__NOP();
 8002004:	bf00      	nop
				break;
 8002006:	e004      	b.n	8002012 <StateMachine+0x152>
	case RE_INIT: /*This will happen at the request of user INIT command*/

				break;
	default: break;
 8002008:	bf00      	nop
 800200a:	e002      	b.n	8002012 <StateMachine+0x152>
				break;
 800200c:	bf00      	nop
 800200e:	e000      	b.n	8002012 <StateMachine+0x152>
				break;
 8002010:	bf00      	nop



	}
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000045 	.word	0x20000045
 800201c:	20000041 	.word	0x20000041
 8002020:	20000e5c 	.word	0x20000e5c
 8002024:	08007c60 	.word	0x08007c60
 8002028:	200005b0 	.word	0x200005b0
 800202c:	20000042 	.word	0x20000042
 8002030:	20000043 	.word	0x20000043
 8002034:	20000e5e 	.word	0x20000e5e
 8002038:	20000e60 	.word	0x20000e60
 800203c:	20000e61 	.word	0x20000e61
 8002040:	20000e38 	.word	0x20000e38
 8002044:	20000e48 	.word	0x20000e48
 8002048:	20000e5d 	.word	0x20000e5d

0800204c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002050:	f000 fff0 	bl	8003034 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002054:	f000 f8c4 	bl	80021e0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /*Use default delay value*/
  interCmdDelay = CMD_DELAY;
 8002058:	4b50      	ldr	r3, [pc, #320]	; (800219c <main+0x150>)
 800205a:	22c8      	movs	r2, #200	; 0xc8
 800205c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800205e:	f000 fae5 	bl	800262c <MX_GPIO_Init>
  MX_DAC_Init();
 8002062:	f000 f8f9 	bl	8002258 <MX_DAC_Init>
  MX_USART1_UART_Init();
 8002066:	f000 fa09 	bl	800247c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800206a:	f000 fa8b 	bl	8002584 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800206e:	f000 fab3 	bl	80025d8 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002072:	f000 f91b 	bl	80022ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8002076:	f000 f965 	bl	8002344 <MX_TIM3_Init>
  MX_TIM4_Init();
 800207a:	f000 f9b1 	bl	80023e0 <MX_TIM4_Init>

  /* USER CODE BEGIN 2 */

  /* Will not use the HAL UART libraries due to overrun issue when reading one char at a time */
  /*Start receiving one character in interrupt mode*/
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800207e:	4b48      	ldr	r3, [pc, #288]	; (80021a0 <main+0x154>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4b46      	ldr	r3, [pc, #280]	; (80021a0 <main+0x154>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f042 0220 	orr.w	r2, r2, #32
 800208c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800208e:	4b45      	ldr	r3, [pc, #276]	; (80021a4 <main+0x158>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68da      	ldr	r2, [r3, #12]
 8002094:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <main+0x158>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f042 0220 	orr.w	r2, r2, #32
 800209c:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 800209e:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <main+0x15c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68da      	ldr	r2, [r3, #12]
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <main+0x15c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f042 0220 	orr.w	r2, r2, #32
 80020ac:	60da      	str	r2, [r3, #12]


  InitQueue(&q1);
 80020ae:	483f      	ldr	r0, [pc, #252]	; (80021ac <main+0x160>)
 80020b0:	f7ff fc86 	bl	80019c0 <InitQueue>
  InitQueue(&q2);
 80020b4:	483e      	ldr	r0, [pc, #248]	; (80021b0 <main+0x164>)
 80020b6:	f7ff fc83 	bl	80019c0 <InitQueue>

  drive1.isMaster = TRUE;
 80020ba:	4b3e      	ldr	r3, [pc, #248]	; (80021b4 <main+0x168>)
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da
  drive2.isMaster = FALSE;
 80020c2:	4b3d      	ldr	r3, [pc, #244]	; (80021b8 <main+0x16c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	f883 23da 	strb.w	r2, [r3, #986]	; 0x3da

  InitDriveData(&drive1);
 80020ca:	483a      	ldr	r0, [pc, #232]	; (80021b4 <main+0x168>)
 80020cc:	f7fe fd94 	bl	8000bf8 <InitDriveData>
  InitDriveData(&drive2);
 80020d0:	4839      	ldr	r0, [pc, #228]	; (80021b8 <main+0x16c>)
 80020d2:	f7fe fd91 	bl	8000bf8 <InitDriveData>

  CreateInitList();
 80020d6:	f7ff fd05 	bl	8001ae4 <CreateInitList>
  CreatePollingList();
 80020da:	f7ff fcd1 	bl	8001a80 <CreatePollingList>

  htim2.Init.Period = 8333;
 80020de:	4b37      	ldr	r3, [pc, #220]	; (80021bc <main+0x170>)
 80020e0:	f242 028d 	movw	r2, #8333	; 0x208d
 80020e4:	60da      	str	r2, [r3, #12]
  htim2.Instance->ARR = 8333;
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <main+0x170>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f242 028d 	movw	r2, #8333	; 0x208d
 80020ee:	62da      	str	r2, [r3, #44]	; 0x2c
  //Setup the timers
  HAL_TIM_Base_Start_IT(&htim2);
 80020f0:	4832      	ldr	r0, [pc, #200]	; (80021bc <main+0x170>)
 80020f2:	f001 ffb9 	bl	8004068 <HAL_TIM_Base_Start_IT>

  //while(1) time++;
  HAL_TIM_Base_Start_IT(&htim3);
 80020f6:	4832      	ldr	r0, [pc, #200]	; (80021c0 <main+0x174>)
 80020f8:	f001 ffb6 	bl	8004068 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 80020fc:	4831      	ldr	r0, [pc, #196]	; (80021c4 <main+0x178>)
 80020fe:	f001 ffb3 	bl	8004068 <HAL_TIM_Base_Start_IT>


  writeStringPC("\r\nServo Drive Controller Command Interface..\r\n\>\0");
 8002102:	4831      	ldr	r0, [pc, #196]	; (80021c8 <main+0x17c>)
 8002104:	f000 fb1c 	bl	8002740 <writeStringPC>
  writeStringDrive1("\r\0");
 8002108:	4830      	ldr	r0, [pc, #192]	; (80021cc <main+0x180>)
 800210a:	f000 fae5 	bl	80026d8 <writeStringDrive1>
  writeStringDrive2("\r\0");
 800210e:	482f      	ldr	r0, [pc, #188]	; (80021cc <main+0x180>)
 8002110:	f000 fafc 	bl	800270c <writeStringDrive2>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	 if(drive1.isCmdAvailable == TRUE){
 8002114:	4b27      	ldr	r3, [pc, #156]	; (80021b4 <main+0x168>)
 8002116:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 800211a:	2b01      	cmp	r3, #1
 800211c:	d111      	bne.n	8002142 <main+0xf6>
		 DecodeCommand(&drive1);
 800211e:	4825      	ldr	r0, [pc, #148]	; (80021b4 <main+0x168>)
 8002120:	f7ff f914 	bl	800134c <DecodeCommand>
		 drive1.isCmdAvailable = FALSE;
 8002124:	4b23      	ldr	r3, [pc, #140]	; (80021b4 <main+0x168>)
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		 //if(isLogging == TRUE) void logPC(uint8_t *pStr,bool isMaster)((&drive1)->rxBuffer);
		 if(isLogging == TRUE) logPC((&drive1)->rxBuffer,TRUE);
 800212c:	4b28      	ldr	r3, [pc, #160]	; (80021d0 <main+0x184>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d103      	bne.n	800213c <main+0xf0>
 8002134:	2101      	movs	r1, #1
 8002136:	4827      	ldr	r0, [pc, #156]	; (80021d4 <main+0x188>)
 8002138:	f000 fb1c 	bl	8002774 <logPC>
		 ClearReceiveBuffer(&drive1);
 800213c:	481d      	ldr	r0, [pc, #116]	; (80021b4 <main+0x168>)
 800213e:	f7ff fa0d 	bl	800155c <ClearReceiveBuffer>
	 }
	 if(drive2.isCmdAvailable == TRUE){
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <main+0x16c>)
 8002144:	f893 3420 	ldrb.w	r3, [r3, #1056]	; 0x420
 8002148:	2b01      	cmp	r3, #1
 800214a:	d111      	bne.n	8002170 <main+0x124>
		 DecodeCommand(&drive2);
 800214c:	481a      	ldr	r0, [pc, #104]	; (80021b8 <main+0x16c>)
 800214e:	f7ff f8fd 	bl	800134c <DecodeCommand>
		 drive2.isCmdAvailable = FALSE;
 8002152:	4b19      	ldr	r3, [pc, #100]	; (80021b8 <main+0x16c>)
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
		 //if(isLogging  == TRUE) writeStringPC((&drive2)->rxBuffer);
		 if(isLogging  == TRUE) logPC((&drive2)->rxBuffer,FALSE);
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <main+0x184>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d103      	bne.n	800216a <main+0x11e>
 8002162:	2100      	movs	r1, #0
 8002164:	481c      	ldr	r0, [pc, #112]	; (80021d8 <main+0x18c>)
 8002166:	f000 fb05 	bl	8002774 <logPC>
		 ClearReceiveBuffer(&drive2);
 800216a:	4813      	ldr	r0, [pc, #76]	; (80021b8 <main+0x16c>)
 800216c:	f7ff f9f6 	bl	800155c <ClearReceiveBuffer>
	 }
	 if(userCmd.isCmdAvailable == TRUE){
 8002170:	4b1a      	ldr	r3, [pc, #104]	; (80021dc <main+0x190>)
 8002172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002176:	2b01      	cmp	r3, #1
 8002178:	d106      	bne.n	8002188 <main+0x13c>
		 //DecodeCommand(&drive2);
		 userCmd.isCmdAvailable = FALSE;
 800217a:	4b18      	ldr	r3, [pc, #96]	; (80021dc <main+0x190>)
 800217c:	2200      	movs	r2, #0
 800217e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		 ClearUserBuffer(&userCmd);
 8002182:	4816      	ldr	r0, [pc, #88]	; (80021dc <main+0x190>)
 8002184:	f7ff f9fe 	bl	8001584 <ClearUserBuffer>
	 }
	 CheckReceiveBuffer(&drive1);
 8002188:	480a      	ldr	r0, [pc, #40]	; (80021b4 <main+0x168>)
 800218a:	f7fe fdd9 	bl	8000d40 <CheckReceiveBuffer>
	 CheckReceiveBuffer(&drive2);
 800218e:	480a      	ldr	r0, [pc, #40]	; (80021b8 <main+0x16c>)
 8002190:	f7fe fdd6 	bl	8000d40 <CheckReceiveBuffer>
	 StateMachine();
 8002194:	f7ff fe94 	bl	8001ec0 <StateMachine>
	 if(drive1.isCmdAvailable == TRUE){
 8002198:	e7bc      	b.n	8002114 <main+0xc8>
 800219a:	bf00      	nop
 800219c:	20000e5a 	.word	0x20000e5a
 80021a0:	200004e4 	.word	0x200004e4
 80021a4:	20000528 	.word	0x20000528
 80021a8:	2000056c 	.word	0x2000056c
 80021ac:	20000e64 	.word	0x20000e64
 80021b0:	20000e6c 	.word	0x20000e6c
 80021b4:	200005b0 	.word	0x200005b0
 80021b8:	200009d8 	.word	0x200009d8
 80021bc:	2000040c 	.word	0x2000040c
 80021c0:	20000454 	.word	0x20000454
 80021c4:	2000049c 	.word	0x2000049c
 80021c8:	08007c70 	.word	0x08007c70
 80021cc:	08007ca4 	.word	0x08007ca4
 80021d0:	2000003f 	.word	0x2000003f
 80021d4:	2000098e 	.word	0x2000098e
 80021d8:	20000db6 	.word	0x20000db6
 80021dc:	20000e00 	.word	0x20000e00

080021e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b090      	sub	sp, #64	; 0x40
 80021e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021e6:	f107 0318 	add.w	r3, r7, #24
 80021ea:	2228      	movs	r2, #40	; 0x28
 80021ec:	2100      	movs	r1, #0
 80021ee:	4618      	mov	r0, r3
 80021f0:	f002 fd2a 	bl	8004c48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021f4:	1d3b      	adds	r3, r7, #4
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	605a      	str	r2, [r3, #4]
 80021fc:	609a      	str	r2, [r3, #8]
 80021fe:	60da      	str	r2, [r3, #12]
 8002200:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002202:	2302      	movs	r3, #2
 8002204:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002206:	2301      	movs	r3, #1
 8002208:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800220a:	2310      	movs	r3, #16
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800220e:	2300      	movs	r3, #0
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002212:	f107 0318 	add.w	r3, r7, #24
 8002216:	4618      	mov	r0, r3
 8002218:	f001 fabc 	bl	8003794 <HAL_RCC_OscConfig>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8002222:	f000 fb23 	bl	800286c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002226:	230f      	movs	r3, #15
 8002228:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002236:	2300      	movs	r3, #0
 8002238:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800223a:	1d3b      	adds	r3, r7, #4
 800223c:	2100      	movs	r1, #0
 800223e:	4618      	mov	r0, r3
 8002240:	f001 fd2a 	bl	8003c98 <HAL_RCC_ClockConfig>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800224a:	f000 fb0f 	bl	800286c <Error_Handler>
  }
}
 800224e:	bf00      	nop
 8002250:	3740      	adds	r7, #64	; 0x40
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
	...

08002258 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800225e:	463b      	mov	r3, r7
 8002260:	2200      	movs	r2, #0
 8002262:	601a      	str	r2, [r3, #0]
 8002264:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002266:	4b0f      	ldr	r3, [pc, #60]	; (80022a4 <MX_DAC_Init+0x4c>)
 8002268:	4a0f      	ldr	r2, [pc, #60]	; (80022a8 <MX_DAC_Init+0x50>)
 800226a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800226c:	480d      	ldr	r0, [pc, #52]	; (80022a4 <MX_DAC_Init+0x4c>)
 800226e:	f001 f874 	bl	800335a <HAL_DAC_Init>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002278:	f000 faf8 	bl	800286c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800227c:	2300      	movs	r3, #0
 800227e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002280:	2300      	movs	r3, #0
 8002282:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002284:	463b      	mov	r3, r7
 8002286:	2200      	movs	r2, #0
 8002288:	4619      	mov	r1, r3
 800228a:	4806      	ldr	r0, [pc, #24]	; (80022a4 <MX_DAC_Init+0x4c>)
 800228c:	f001 f887 	bl	800339e <HAL_DAC_ConfigChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002296:	f000 fae9 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800229a:	bf00      	nop
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200003f8 	.word	0x200003f8
 80022a8:	40007400 	.word	0x40007400

080022ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b086      	sub	sp, #24
 80022b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	2200      	movs	r2, #0
 80022b8:	601a      	str	r2, [r3, #0]
 80022ba:	605a      	str	r2, [r3, #4]
 80022bc:	609a      	str	r2, [r3, #8]
 80022be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022c0:	463b      	mov	r3, r7
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022c8:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <MX_TIM2_Init+0x94>)
 80022ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ce:	601a      	str	r2, [r3, #0]
  //htim2.Init.Prescaler = 10;
  htim2.Init.Prescaler = CMD_DELAY;    //Number of ms
 80022d0:	4b1b      	ldr	r3, [pc, #108]	; (8002340 <MX_TIM2_Init+0x94>)
 80022d2:	22c8      	movs	r2, #200	; 0xc8
 80022d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d6:	4b1a      	ldr	r3, [pc, #104]	; (8002340 <MX_TIM2_Init+0x94>)
 80022d8:	2200      	movs	r2, #0
 80022da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8333;
 80022dc:	4b18      	ldr	r3, [pc, #96]	; (8002340 <MX_TIM2_Init+0x94>)
 80022de:	f242 028d 	movw	r2, #8333	; 0x208d
 80022e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e4:	4b16      	ldr	r3, [pc, #88]	; (8002340 <MX_TIM2_Init+0x94>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  //htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <MX_TIM2_Init+0x94>)
 80022ec:	2280      	movs	r2, #128	; 0x80
 80022ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022f0:	4813      	ldr	r0, [pc, #76]	; (8002340 <MX_TIM2_Init+0x94>)
 80022f2:	f001 fe69 	bl	8003fc8 <HAL_TIM_Base_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80022fc:	f000 fab6 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002304:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	4619      	mov	r1, r3
 800230c:	480c      	ldr	r0, [pc, #48]	; (8002340 <MX_TIM2_Init+0x94>)
 800230e:	f002 f813 	bl	8004338 <HAL_TIM_ConfigClockSource>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002318:	f000 faa8 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002320:	2300      	movs	r3, #0
 8002322:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002324:	463b      	mov	r3, r7
 8002326:	4619      	mov	r1, r3
 8002328:	4805      	ldr	r0, [pc, #20]	; (8002340 <MX_TIM2_Init+0x94>)
 800232a:	f002 fa07 	bl	800473c <HAL_TIMEx_MasterConfigSynchronization>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002334:	f000 fa9a 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002338:	bf00      	nop
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	2000040c 	.word	0x2000040c

08002344 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234a:	f107 0308 	add.w	r3, r7, #8
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	463b      	mov	r3, r7
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <MX_TIM3_Init+0x94>)
 8002362:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <MX_TIM3_Init+0x98>)
 8002364:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <MX_TIM3_Init+0x94>)
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <MX_TIM3_Init+0x94>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002372:	4b19      	ldr	r3, [pc, #100]	; (80023d8 <MX_TIM3_Init+0x94>)
 8002374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002378:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800237a:	4b17      	ldr	r3, [pc, #92]	; (80023d8 <MX_TIM3_Init+0x94>)
 800237c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002380:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <MX_TIM3_Init+0x94>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002388:	4813      	ldr	r0, [pc, #76]	; (80023d8 <MX_TIM3_Init+0x94>)
 800238a:	f001 fe1d 	bl	8003fc8 <HAL_TIM_Base_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002394:	f000 fa6a 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	4619      	mov	r1, r3
 80023a4:	480c      	ldr	r0, [pc, #48]	; (80023d8 <MX_TIM3_Init+0x94>)
 80023a6:	f001 ffc7 	bl	8004338 <HAL_TIM_ConfigClockSource>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80023b0:	f000 fa5c 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_TIM3_Init+0x94>)
 80023c2:	f002 f9bb 	bl	800473c <HAL_TIMEx_MasterConfigSynchronization>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80023cc:	f000 fa4e 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000454 	.word	0x20000454
 80023dc:	40000400 	.word	0x40000400

080023e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b086      	sub	sp, #24
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80023e6:	f107 0308 	add.w	r3, r7, #8
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
 80023ee:	605a      	str	r2, [r3, #4]
 80023f0:	609a      	str	r2, [r3, #8]
 80023f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f4:	463b      	mov	r3, r7
 80023f6:	2200      	movs	r2, #0
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023fc:	4b1d      	ldr	r3, [pc, #116]	; (8002474 <MX_TIM4_Init+0x94>)
 80023fe:	4a1e      	ldr	r2, [pc, #120]	; (8002478 <MX_TIM4_Init+0x98>)
 8002400:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <MX_TIM4_Init+0x94>)
 8002404:	2200      	movs	r2, #0
 8002406:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002408:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <MX_TIM4_Init+0x94>)
 800240a:	2200      	movs	r2, #0
 800240c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800240e:	4b19      	ldr	r3, [pc, #100]	; (8002474 <MX_TIM4_Init+0x94>)
 8002410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002414:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002416:	4b17      	ldr	r3, [pc, #92]	; (8002474 <MX_TIM4_Init+0x94>)
 8002418:	2200      	movs	r2, #0
 800241a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <MX_TIM4_Init+0x94>)
 800241e:	2200      	movs	r2, #0
 8002420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002422:	4814      	ldr	r0, [pc, #80]	; (8002474 <MX_TIM4_Init+0x94>)
 8002424:	f001 fdd0 	bl	8003fc8 <HAL_TIM_Base_Init>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800242e:	f000 fa1d 	bl	800286c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002436:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002438:	f107 0308 	add.w	r3, r7, #8
 800243c:	4619      	mov	r1, r3
 800243e:	480d      	ldr	r0, [pc, #52]	; (8002474 <MX_TIM4_Init+0x94>)
 8002440:	f001 ff7a 	bl	8004338 <HAL_TIM_ConfigClockSource>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d001      	beq.n	800244e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800244a:	f000 fa0f 	bl	800286c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002456:	463b      	mov	r3, r7
 8002458:	4619      	mov	r1, r3
 800245a:	4806      	ldr	r0, [pc, #24]	; (8002474 <MX_TIM4_Init+0x94>)
 800245c:	f002 f96e 	bl	800473c <HAL_TIMEx_MasterConfigSynchronization>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8002466:	f000 fa01 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	2000049c 	.word	0x2000049c
 8002478:	40000800 	.word	0x40000800

0800247c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 8002482:	4a12      	ldr	r2, [pc, #72]	; (80024cc <MX_USART1_UART_Init+0x50>)
 8002484:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 57600;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 8002488:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 800248c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 8002490:	2200      	movs	r2, #0
 8002492:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 8002496:	2200      	movs	r2, #0
 8002498:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800249a:	4b0b      	ldr	r3, [pc, #44]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 800249c:	2200      	movs	r2, #0
 800249e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024a0:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 80024a2:	220c      	movs	r2, #12
 80024a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ac:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024b2:	4805      	ldr	r0, [pc, #20]	; (80024c8 <MX_USART1_UART_Init+0x4c>)
 80024b4:	f002 f9c0 	bl	8004838 <HAL_UART_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024be:	f000 f9d5 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024c2:	bf00      	nop
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	200004e4 	.word	0x200004e4
 80024cc:	40013800 	.word	0x40013800

080024d0 <UART1_GetChar>:

uint8_t UART1_GetChar (void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
	2. Read the data from USART_DR  Register. This also clears the RXNE bit

	****************************************/
	uint8_t Temp;
	uint32_t cnt;
	while ((!(USART1->SR & (1<<5))) && (cnt < 100000) )cnt++;
 80024d6:	e002      	b.n	80024de <UART1_GetChar+0xe>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	607b      	str	r3, [r7, #4]
 80024de:	4b09      	ldr	r3, [pc, #36]	; (8002504 <UART1_GetChar+0x34>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <UART1_GetChar+0x22>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a06      	ldr	r2, [pc, #24]	; (8002508 <UART1_GetChar+0x38>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d9f2      	bls.n	80024d8 <UART1_GetChar+0x8>
	//while (!(USART1->SR & (1<<5)) ){
		// Wait for RXNE to SET.. This indicates that the data has been Received

	Temp = USART1->DR;  // Read the data.
 80024f2:	4b04      	ldr	r3, [pc, #16]	; (8002504 <UART1_GetChar+0x34>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	70fb      	strb	r3, [r7, #3]
	return Temp;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr
 8002504:	40013800 	.word	0x40013800
 8002508:	0001869f 	.word	0x0001869f

0800250c <UART2_GetChar>:

uint8_t UART2_GetChar (void)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
	2. Read the data from USART_DR  Register. This also clears the RXNE bit

	****************************************/
	uint8_t Temp;
	uint32_t cnt;
	while ((!(USART2->SR & (1<<5))) && (cnt < 100000) )cnt++;
 8002512:	e002      	b.n	800251a <UART2_GetChar+0xe>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	3301      	adds	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <UART2_GetChar+0x34>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0320 	and.w	r3, r3, #32
 8002522:	2b00      	cmp	r3, #0
 8002524:	d103      	bne.n	800252e <UART2_GetChar+0x22>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a06      	ldr	r2, [pc, #24]	; (8002544 <UART2_GetChar+0x38>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d9f2      	bls.n	8002514 <UART2_GetChar+0x8>
	//while (!(USART2->SR & (1<<5)));  // Wait for RXNE to SET.. This indicates that the data has been Received
	Temp = USART2->DR;  // Read the data.
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <UART2_GetChar+0x34>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	70fb      	strb	r3, [r7, #3]
	return Temp;
 8002534:	78fb      	ldrb	r3, [r7, #3]
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr
 8002540:	40004400 	.word	0x40004400
 8002544:	0001869f 	.word	0x0001869f

08002548 <UART3_GetChar>:

uint8_t UART3_GetChar (void)
{
 8002548:	b480      	push	{r7}
 800254a:	b083      	sub	sp, #12
 800254c:	af00      	add	r7, sp, #0
	2. Read the data from USART_DR  Register. This also clears the RXNE bit

	****************************************/
	uint8_t Temp;
	uint32_t cnt;
	while ((!(USART3->SR & (1<<5))) && (cnt < 100000) ) cnt++;
 800254e:	e002      	b.n	8002556 <UART3_GetChar+0xe>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3301      	adds	r3, #1
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	4b09      	ldr	r3, [pc, #36]	; (800257c <UART3_GetChar+0x34>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0320 	and.w	r3, r3, #32
 800255e:	2b00      	cmp	r3, #0
 8002560:	d103      	bne.n	800256a <UART3_GetChar+0x22>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a06      	ldr	r2, [pc, #24]	; (8002580 <UART3_GetChar+0x38>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d9f2      	bls.n	8002550 <UART3_GetChar+0x8>
	//while (!(USART3->SR & (1<<5)));  // Wait for RXNE to SET.. This indicates that the data has been Received
	Temp = USART3->DR;  // Read the data.
 800256a:	4b04      	ldr	r3, [pc, #16]	; (800257c <UART3_GetChar+0x34>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	70fb      	strb	r3, [r7, #3]
	return Temp;
 8002570:	78fb      	ldrb	r3, [r7, #3]
}
 8002572:	4618      	mov	r0, r3
 8002574:	370c      	adds	r7, #12
 8002576:	46bd      	mov	sp, r7
 8002578:	bc80      	pop	{r7}
 800257a:	4770      	bx	lr
 800257c:	40004800 	.word	0x40004800
 8002580:	0001869f 	.word	0x0001869f

08002584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002588:	4b11      	ldr	r3, [pc, #68]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 800258a:	4a12      	ldr	r2, [pc, #72]	; (80025d4 <MX_USART2_UART_Init+0x50>)
 800258c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800258e:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 8002590:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b09      	ldr	r3, [pc, #36]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80025ba:	4805      	ldr	r0, [pc, #20]	; (80025d0 <MX_USART2_UART_Init+0x4c>)
 80025bc:	f002 f93c 	bl	8004838 <HAL_UART_Init>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80025c6:	f000 f951 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000528 	.word	0x20000528
 80025d4:	40004400 	.word	0x40004400

080025d8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <MX_USART3_UART_Init+0x4c>)
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <MX_USART3_UART_Init+0x50>)
 80025e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 460800;
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <MX_USART3_UART_Init+0x4c>)
 80025e4:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 80025e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80025ea:	4b0e      	ldr	r3, [pc, #56]	; (8002624 <MX_USART3_UART_Init+0x4c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80025f0:	4b0c      	ldr	r3, [pc, #48]	; (8002624 <MX_USART3_UART_Init+0x4c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <MX_USART3_UART_Init+0x4c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025fc:	4b09      	ldr	r3, [pc, #36]	; (8002624 <MX_USART3_UART_Init+0x4c>)
 80025fe:	220c      	movs	r2, #12
 8002600:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002602:	4b08      	ldr	r3, [pc, #32]	; (8002624 <MX_USART3_UART_Init+0x4c>)
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002608:	4b06      	ldr	r3, [pc, #24]	; (8002624 <MX_USART3_UART_Init+0x4c>)
 800260a:	2200      	movs	r2, #0
 800260c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800260e:	4805      	ldr	r0, [pc, #20]	; (8002624 <MX_USART3_UART_Init+0x4c>)
 8002610:	f002 f912 	bl	8004838 <HAL_UART_Init>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d001      	beq.n	800261e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800261a:	f000 f927 	bl	800286c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000056c 	.word	0x2000056c
 8002628:	40004800 	.word	0x40004800

0800262c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002632:	f107 0310 	add.w	r3, r7, #16
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	605a      	str	r2, [r3, #4]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002640:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <MX_GPIO_Init+0xa4>)
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	4a22      	ldr	r2, [pc, #136]	; (80026d0 <MX_GPIO_Init+0xa4>)
 8002646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800264a:	6193      	str	r3, [r2, #24]
 800264c:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <MX_GPIO_Init+0xa4>)
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002654:	60fb      	str	r3, [r7, #12]
 8002656:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002658:	4b1d      	ldr	r3, [pc, #116]	; (80026d0 <MX_GPIO_Init+0xa4>)
 800265a:	699b      	ldr	r3, [r3, #24]
 800265c:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <MX_GPIO_Init+0xa4>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6193      	str	r3, [r2, #24]
 8002664:	4b1a      	ldr	r3, [pc, #104]	; (80026d0 <MX_GPIO_Init+0xa4>)
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	60bb      	str	r3, [r7, #8]
 800266e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002670:	4b17      	ldr	r3, [pc, #92]	; (80026d0 <MX_GPIO_Init+0xa4>)
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	4a16      	ldr	r2, [pc, #88]	; (80026d0 <MX_GPIO_Init+0xa4>)
 8002676:	f043 0308 	orr.w	r3, r3, #8
 800267a:	6193      	str	r3, [r2, #24]
 800267c:	4b14      	ldr	r3, [pc, #80]	; (80026d0 <MX_GPIO_Init+0xa4>)
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	607b      	str	r3, [r7, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002688:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <MX_GPIO_Init+0xa4>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	4a10      	ldr	r2, [pc, #64]	; (80026d0 <MX_GPIO_Init+0xa4>)
 800268e:	f043 0320 	orr.w	r3, r3, #32
 8002692:	6193      	str	r3, [r2, #24]
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <MX_GPIO_Init+0xa4>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f003 0320 	and.w	r3, r3, #32
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80026a0:	2200      	movs	r2, #0
 80026a2:	2108      	movs	r1, #8
 80026a4:	480b      	ldr	r0, [pc, #44]	; (80026d4 <MX_GPIO_Init+0xa8>)
 80026a6:	f001 f85d 	bl	8003764 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80026aa:	2308      	movs	r3, #8
 80026ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ae:	2301      	movs	r3, #1
 80026b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b6:	2302      	movs	r3, #2
 80026b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026ba:	f107 0310 	add.w	r3, r7, #16
 80026be:	4619      	mov	r1, r3
 80026c0:	4804      	ldr	r0, [pc, #16]	; (80026d4 <MX_GPIO_Init+0xa8>)
 80026c2:	f000 febb 	bl	800343c <HAL_GPIO_Init>

}
 80026c6:	bf00      	nop
 80026c8:	3720      	adds	r7, #32
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000
 80026d4:	40011800 	.word	0x40011800

080026d8 <writeStringDrive1>:

/* USER CODE BEGIN 4 */
void writeStringDrive1(uint8_t *pStr){
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

	//uint8_t s = size(pStr);
	if(*pStr == 0) return;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00b      	beq.n	8002700 <writeStringDrive1+0x28>
	HAL_UART_Transmit(&huart1,pStr,size(pStr),10000);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 f875 	bl	80027d8 <size>
 80026ee:	4603      	mov	r3, r0
 80026f0:	461a      	mov	r2, r3
 80026f2:	f242 7310 	movw	r3, #10000	; 0x2710
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4803      	ldr	r0, [pc, #12]	; (8002708 <writeStringDrive1+0x30>)
 80026fa:	f002 f8ea 	bl	80048d2 <HAL_UART_Transmit>
 80026fe:	e000      	b.n	8002702 <writeStringDrive1+0x2a>
	if(*pStr == 0) return;
 8002700:	bf00      	nop


}
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	200004e4 	.word	0x200004e4

0800270c <writeStringDrive2>:
void writeStringDrive2(uint8_t *pStr){
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]

	if(*pStr == 0) return;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00b      	beq.n	8002734 <writeStringDrive2+0x28>
	//HAL_UART_Transmit(&huart2,pStr,size(pStr),10000);
	HAL_UART_Transmit(&huart2,pStr,size(pStr),10000);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f85b 	bl	80027d8 <size>
 8002722:	4603      	mov	r3, r0
 8002724:	461a      	mov	r2, r3
 8002726:	f242 7310 	movw	r3, #10000	; 0x2710
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	4803      	ldr	r0, [pc, #12]	; (800273c <writeStringDrive2+0x30>)
 800272e:	f002 f8d0 	bl	80048d2 <HAL_UART_Transmit>
 8002732:	e000      	b.n	8002736 <writeStringDrive2+0x2a>
	if(*pStr == 0) return;
 8002734:	bf00      	nop

}
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}
 800273c:	20000528 	.word	0x20000528

08002740 <writeStringPC>:
void writeStringPC(uint8_t *pStr){
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

	if(*pStr == 0) return;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	781b      	ldrb	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <writeStringPC+0x26>
	HAL_UART_Transmit(&huart3,pStr,size(pStr),10);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f841 	bl	80027d8 <size>
 8002756:	4603      	mov	r3, r0
 8002758:	461a      	mov	r2, r3
 800275a:	230a      	movs	r3, #10
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4804      	ldr	r0, [pc, #16]	; (8002770 <writeStringPC+0x30>)
 8002760:	f002 f8b7 	bl	80048d2 <HAL_UART_Transmit>
 8002764:	e000      	b.n	8002768 <writeStringPC+0x28>
	if(*pStr == 0) return;
 8002766:	bf00      	nop
	//Non-Blocking
	//HAL_UART_Transmit_IT(&huart3,pStr,size(pStr));

}
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000056c 	.word	0x2000056c

08002774 <logPC>:

void logPC(uint8_t *pStr,bool isMaster){
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	460b      	mov	r3, r1
 800277e:	70fb      	strb	r3, [r7, #3]

	/*Will first remove the CR*/
	//uint8_t size = size(pStr);
	uint8_t *modifiedStr;

	if(isMaster == TRUE)
 8002780:	78fb      	ldrb	r3, [r7, #3]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d103      	bne.n	800278e <logPC+0x1a>
		writeStringPC("M,\0");
 8002786:	4807      	ldr	r0, [pc, #28]	; (80027a4 <logPC+0x30>)
 8002788:	f7ff ffda 	bl	8002740 <writeStringPC>
 800278c:	e002      	b.n	8002794 <logPC+0x20>
	else
		writeStringPC("S,\0");
 800278e:	4806      	ldr	r0, [pc, #24]	; (80027a8 <logPC+0x34>)
 8002790:	f7ff ffd6 	bl	8002740 <writeStringPC>

	writeStringPC(pStr);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff ffd3 	bl	8002740 <writeStringPC>

//	for(int i; i<size; i++){
//		if(*(pStr + i) == '\n'
//		*()
//	}
}
 800279a:	bf00      	nop
 800279c:	3708      	adds	r7, #8
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	08007ca8 	.word	0x08007ca8
 80027a8:	08007cac 	.word	0x08007cac

080027ac <putCharPC>:

void putCharPC(uint8_t chr){
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]

	uint8_t str[2] = {0,0};
 80027b6:	2300      	movs	r3, #0
 80027b8:	81bb      	strh	r3, [r7, #12]
	str[0] = chr;
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart3,str,1,10);
 80027be:	f107 010c 	add.w	r1, r7, #12
 80027c2:	230a      	movs	r3, #10
 80027c4:	2201      	movs	r2, #1
 80027c6:	4803      	ldr	r0, [pc, #12]	; (80027d4 <putCharPC+0x28>)
 80027c8:	f002 f883 	bl	80048d2 <HAL_UART_Transmit>
	//Non-Blocking
	//HAL_UART_Transmit_IT(&huart3,pStr,size(pStr));

}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	2000056c 	.word	0x2000056c

080027d8 <size>:
uint16_t size(char *ptr)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
    //variable used to access the subsequent array elements.
    int offset = 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	60fb      	str	r3, [r7, #12]
    //variable that counts the number of elements in your array
    int count = 0;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60bb      	str	r3, [r7, #8]

    //While loop that tests whether the end of the array has been reached
    while (*(ptr + offset) != '\0')
 80027e8:	e005      	b.n	80027f6 <size+0x1e>
    {
        //increment the count variable
        ++count;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	3301      	adds	r3, #1
 80027ee:	60bb      	str	r3, [r7, #8]
        //advance to the next element of the array
        ++offset;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	3301      	adds	r3, #1
 80027f4:	60fb      	str	r3, [r7, #12]
    while (*(ptr + offset) != '\0')
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	4413      	add	r3, r2
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1f3      	bne.n	80027ea <size+0x12>
    }
    //return the size of the array
    return count;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	b29b      	uxth	r3, r3
}
 8002806:	4618      	mov	r0, r3
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <setState>:

void setState(uint8_t st){
 8002810:	b480      	push	{r7}
 8002812:	b083      	sub	sp, #12
 8002814:	af00      	add	r7, sp, #0
 8002816:	4603      	mov	r3, r0
 8002818:	71fb      	strb	r3, [r7, #7]

	prevState = state;
 800281a:	4b06      	ldr	r3, [pc, #24]	; (8002834 <setState+0x24>)
 800281c:	781a      	ldrb	r2, [r3, #0]
 800281e:	4b06      	ldr	r3, [pc, #24]	; (8002838 <setState+0x28>)
 8002820:	701a      	strb	r2, [r3, #0]
	state = st;
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <setState+0x24>)
 8002824:	79fb      	ldrb	r3, [r7, #7]
 8002826:	7013      	strb	r3, [r2, #0]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	20000045 	.word	0x20000045
 8002838:	20000046 	.word	0x20000046

0800283c <clearNextCommandMaster>:

void clearNextCommandMaster(){
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
	memset(nextCmdMaster,0,15);
 8002840:	220f      	movs	r2, #15
 8002842:	2100      	movs	r1, #0
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <clearNextCommandMaster+0x14>)
 8002846:	f002 f9ff 	bl	8004c48 <memset>
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000e38 	.word	0x20000e38

08002854 <clearNextCommandSlave>:

void clearNextCommandSlave(){
 8002854:	b580      	push	{r7, lr}
 8002856:	af00      	add	r7, sp, #0
	memset(nextCmdSlave,0,15);
 8002858:	220f      	movs	r2, #15
 800285a:	2100      	movs	r1, #0
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <clearNextCommandSlave+0x14>)
 800285e:	f002 f9f3 	bl	8004c48 <memset>
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	20000e48 	.word	0x20000e48

0800286c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002870:	b672      	cpsid	i
}
 8002872:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002874:	e7fe      	b.n	8002874 <Error_Handler+0x8>
	...

08002878 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <HAL_MspInit+0x40>)
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	4a0d      	ldr	r2, [pc, #52]	; (80028b8 <HAL_MspInit+0x40>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6193      	str	r3, [r2, #24]
 800288a:	4b0b      	ldr	r3, [pc, #44]	; (80028b8 <HAL_MspInit+0x40>)
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	607b      	str	r3, [r7, #4]
 8002894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_MspInit+0x40>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	4a07      	ldr	r2, [pc, #28]	; (80028b8 <HAL_MspInit+0x40>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	61d3      	str	r3, [r2, #28]
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_MspInit+0x40>)
 80028a4:	69db      	ldr	r3, [r3, #28]
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40021000 	.word	0x40021000

080028bc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c4:	f107 0310 	add.w	r3, r7, #16
 80028c8:	2200      	movs	r2, #0
 80028ca:	601a      	str	r2, [r3, #0]
 80028cc:	605a      	str	r2, [r3, #4]
 80028ce:	609a      	str	r2, [r3, #8]
 80028d0:	60da      	str	r2, [r3, #12]
  if(hdac->Instance==DAC)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a14      	ldr	r2, [pc, #80]	; (8002928 <HAL_DAC_MspInit+0x6c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d121      	bne.n	8002920 <HAL_DAC_MspInit+0x64>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80028dc:	4b13      	ldr	r3, [pc, #76]	; (800292c <HAL_DAC_MspInit+0x70>)
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	4a12      	ldr	r2, [pc, #72]	; (800292c <HAL_DAC_MspInit+0x70>)
 80028e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80028e6:	61d3      	str	r3, [r2, #28]
 80028e8:	4b10      	ldr	r3, [pc, #64]	; (800292c <HAL_DAC_MspInit+0x70>)
 80028ea:	69db      	ldr	r3, [r3, #28]
 80028ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028f4:	4b0d      	ldr	r3, [pc, #52]	; (800292c <HAL_DAC_MspInit+0x70>)
 80028f6:	699b      	ldr	r3, [r3, #24]
 80028f8:	4a0c      	ldr	r2, [pc, #48]	; (800292c <HAL_DAC_MspInit+0x70>)
 80028fa:	f043 0304 	orr.w	r3, r3, #4
 80028fe:	6193      	str	r3, [r2, #24]
 8002900:	4b0a      	ldr	r3, [pc, #40]	; (800292c <HAL_DAC_MspInit+0x70>)
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800290c:	2310      	movs	r3, #16
 800290e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002910:	2303      	movs	r3, #3
 8002912:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	4619      	mov	r1, r3
 800291a:	4805      	ldr	r0, [pc, #20]	; (8002930 <HAL_DAC_MspInit+0x74>)
 800291c:	f000 fd8e 	bl	800343c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8002920:	bf00      	nop
 8002922:	3720      	adds	r7, #32
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40007400 	.word	0x40007400
 800292c:	40021000 	.word	0x40021000
 8002930:	40010800 	.word	0x40010800

08002934 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b086      	sub	sp, #24
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002944:	d114      	bne.n	8002970 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002946:	4b26      	ldr	r3, [pc, #152]	; (80029e0 <HAL_TIM_Base_MspInit+0xac>)
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <HAL_TIM_Base_MspInit+0xac>)
 800294c:	f043 0301 	orr.w	r3, r3, #1
 8002950:	61d3      	str	r3, [r2, #28]
 8002952:	4b23      	ldr	r3, [pc, #140]	; (80029e0 <HAL_TIM_Base_MspInit+0xac>)
 8002954:	69db      	ldr	r3, [r3, #28]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	2100      	movs	r1, #0
 8002962:	201c      	movs	r0, #28
 8002964:	f000 fcc3 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002968:	201c      	movs	r0, #28
 800296a:	f000 fcdc 	bl	8003326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800296e:	e032      	b.n	80029d6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM3)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a1b      	ldr	r2, [pc, #108]	; (80029e4 <HAL_TIM_Base_MspInit+0xb0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d114      	bne.n	80029a4 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800297a:	4b19      	ldr	r3, [pc, #100]	; (80029e0 <HAL_TIM_Base_MspInit+0xac>)
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4a18      	ldr	r2, [pc, #96]	; (80029e0 <HAL_TIM_Base_MspInit+0xac>)
 8002980:	f043 0302 	orr.w	r3, r3, #2
 8002984:	61d3      	str	r3, [r2, #28]
 8002986:	4b16      	ldr	r3, [pc, #88]	; (80029e0 <HAL_TIM_Base_MspInit+0xac>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	f003 0302 	and.w	r3, r3, #2
 800298e:	613b      	str	r3, [r7, #16]
 8002990:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002992:	2200      	movs	r2, #0
 8002994:	2101      	movs	r1, #1
 8002996:	201d      	movs	r0, #29
 8002998:	f000 fca9 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800299c:	201d      	movs	r0, #29
 800299e:	f000 fcc2 	bl	8003326 <HAL_NVIC_EnableIRQ>
}
 80029a2:	e018      	b.n	80029d6 <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM4)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <HAL_TIM_Base_MspInit+0xb4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d113      	bne.n	80029d6 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80029ae:	4b0c      	ldr	r3, [pc, #48]	; (80029e0 <HAL_TIM_Base_MspInit+0xac>)
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <HAL_TIM_Base_MspInit+0xac>)
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	61d3      	str	r3, [r2, #28]
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <HAL_TIM_Base_MspInit+0xac>)
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	60fb      	str	r3, [r7, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 1, 1);
 80029c6:	2201      	movs	r2, #1
 80029c8:	2101      	movs	r1, #1
 80029ca:	201e      	movs	r0, #30
 80029cc:	f000 fc8f 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80029d0:	201e      	movs	r0, #30
 80029d2:	f000 fca8 	bl	8003326 <HAL_NVIC_EnableIRQ>
}
 80029d6:	bf00      	nop
 80029d8:	3718      	adds	r7, #24
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40021000 	.word	0x40021000
 80029e4:	40000400 	.word	0x40000400
 80029e8:	40000800 	.word	0x40000800

080029ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08e      	sub	sp, #56	; 0x38
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f4:	f107 0320 	add.w	r3, r7, #32
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a6c      	ldr	r2, [pc, #432]	; (8002bb8 <HAL_UART_MspInit+0x1cc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d146      	bne.n	8002a9a <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a0c:	4b6b      	ldr	r3, [pc, #428]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	4a6a      	ldr	r2, [pc, #424]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002a12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a16:	6193      	str	r3, [r2, #24]
 8002a18:	4b68      	ldr	r3, [pc, #416]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a20:	61fb      	str	r3, [r7, #28]
 8002a22:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a24:	4b65      	ldr	r3, [pc, #404]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	4a64      	ldr	r2, [pc, #400]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002a2a:	f043 0308 	orr.w	r3, r3, #8
 8002a2e:	6193      	str	r3, [r2, #24]
 8002a30:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	61bb      	str	r3, [r7, #24]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002a3c:	2340      	movs	r3, #64	; 0x40
 8002a3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a40:	2302      	movs	r3, #2
 8002a42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a48:	f107 0320 	add.w	r3, r7, #32
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	485c      	ldr	r0, [pc, #368]	; (8002bc0 <HAL_UART_MspInit+0x1d4>)
 8002a50:	f000 fcf4 	bl	800343c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a54:	2380      	movs	r3, #128	; 0x80
 8002a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a60:	f107 0320 	add.w	r3, r7, #32
 8002a64:	4619      	mov	r1, r3
 8002a66:	4856      	ldr	r0, [pc, #344]	; (8002bc0 <HAL_UART_MspInit+0x1d4>)
 8002a68:	f000 fce8 	bl	800343c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8002a6c:	4b55      	ldr	r3, [pc, #340]	; (8002bc4 <HAL_UART_MspInit+0x1d8>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	633b      	str	r3, [r7, #48]	; 0x30
 8002a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a74:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002a78:	633b      	str	r3, [r7, #48]	; 0x30
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a7c:	f043 0304 	orr.w	r3, r3, #4
 8002a80:	633b      	str	r3, [r7, #48]	; 0x30
 8002a82:	4a50      	ldr	r2, [pc, #320]	; (8002bc4 <HAL_UART_MspInit+0x1d8>)
 8002a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a86:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2101      	movs	r1, #1
 8002a8c:	2025      	movs	r0, #37	; 0x25
 8002a8e:	f000 fc2e 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002a92:	2025      	movs	r0, #37	; 0x25
 8002a94:	f000 fc47 	bl	8003326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002a98:	e08a      	b.n	8002bb0 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART2)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a4a      	ldr	r2, [pc, #296]	; (8002bc8 <HAL_UART_MspInit+0x1dc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d146      	bne.n	8002b32 <HAL_UART_MspInit+0x146>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002aa4:	4b45      	ldr	r3, [pc, #276]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	4a44      	ldr	r2, [pc, #272]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002aaa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aae:	61d3      	str	r3, [r2, #28]
 8002ab0:	4b42      	ldr	r3, [pc, #264]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002ab2:	69db      	ldr	r3, [r3, #28]
 8002ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002abc:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	4a3e      	ldr	r2, [pc, #248]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002ac2:	f043 0320 	orr.w	r3, r3, #32
 8002ac6:	6193      	str	r3, [r2, #24]
 8002ac8:	4b3c      	ldr	r3, [pc, #240]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002aca:	699b      	ldr	r3, [r3, #24]
 8002acc:	f003 0320 	and.w	r3, r3, #32
 8002ad0:	613b      	str	r3, [r7, #16]
 8002ad2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ad4:	2320      	movs	r3, #32
 8002ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad8:	2302      	movs	r3, #2
 8002ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ae0:	f107 0320 	add.w	r3, r7, #32
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	4839      	ldr	r0, [pc, #228]	; (8002bcc <HAL_UART_MspInit+0x1e0>)
 8002ae8:	f000 fca8 	bl	800343c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002aec:	2340      	movs	r3, #64	; 0x40
 8002aee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002af0:	2300      	movs	r3, #0
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002af8:	f107 0320 	add.w	r3, r7, #32
 8002afc:	4619      	mov	r1, r3
 8002afe:	4833      	ldr	r0, [pc, #204]	; (8002bcc <HAL_UART_MspInit+0x1e0>)
 8002b00:	f000 fc9c 	bl	800343c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART2_ENABLE();
 8002b04:	4b2f      	ldr	r3, [pc, #188]	; (8002bc4 <HAL_UART_MspInit+0x1d8>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	637b      	str	r3, [r7, #52]	; 0x34
 8002b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b0c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002b10:	637b      	str	r3, [r7, #52]	; 0x34
 8002b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b14:	f043 0308 	orr.w	r3, r3, #8
 8002b18:	637b      	str	r3, [r7, #52]	; 0x34
 8002b1a:	4a2a      	ldr	r2, [pc, #168]	; (8002bc4 <HAL_UART_MspInit+0x1d8>)
 8002b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1e:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8002b20:	2200      	movs	r2, #0
 8002b22:	2102      	movs	r1, #2
 8002b24:	2026      	movs	r0, #38	; 0x26
 8002b26:	f000 fbe2 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b2a:	2026      	movs	r0, #38	; 0x26
 8002b2c:	f000 fbfb 	bl	8003326 <HAL_NVIC_EnableIRQ>
}
 8002b30:	e03e      	b.n	8002bb0 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART3)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a26      	ldr	r2, [pc, #152]	; (8002bd0 <HAL_UART_MspInit+0x1e4>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d139      	bne.n	8002bb0 <HAL_UART_MspInit+0x1c4>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b3c:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	4a1e      	ldr	r2, [pc, #120]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002b42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b46:	61d3      	str	r3, [r2, #28]
 8002b48:	4b1c      	ldr	r3, [pc, #112]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002b4a:	69db      	ldr	r3, [r3, #28]
 8002b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b54:	4b19      	ldr	r3, [pc, #100]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002b5a:	f043 0308 	orr.w	r3, r3, #8
 8002b5e:	6193      	str	r3, [r2, #24]
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_UART_MspInit+0x1d0>)
 8002b62:	699b      	ldr	r3, [r3, #24]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b72:	2302      	movs	r3, #2
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b76:	2303      	movs	r3, #3
 8002b78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b7a:	f107 0320 	add.w	r3, r7, #32
 8002b7e:	4619      	mov	r1, r3
 8002b80:	480f      	ldr	r0, [pc, #60]	; (8002bc0 <HAL_UART_MspInit+0x1d4>)
 8002b82:	f000 fc5b 	bl	800343c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002b86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b94:	f107 0320 	add.w	r3, r7, #32
 8002b98:	4619      	mov	r1, r3
 8002b9a:	4809      	ldr	r0, [pc, #36]	; (8002bc0 <HAL_UART_MspInit+0x1d4>)
 8002b9c:	f000 fc4e 	bl	800343c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	2027      	movs	r0, #39	; 0x27
 8002ba6:	f000 fba2 	bl	80032ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002baa:	2027      	movs	r0, #39	; 0x27
 8002bac:	f000 fbbb 	bl	8003326 <HAL_NVIC_EnableIRQ>
}
 8002bb0:	bf00      	nop
 8002bb2:	3738      	adds	r7, #56	; 0x38
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40013800 	.word	0x40013800
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40010c00 	.word	0x40010c00
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40004400 	.word	0x40004400
 8002bcc:	40011400 	.word	0x40011400
 8002bd0:	40004800 	.word	0x40004800

08002bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bd8:	e7fe      	b.n	8002bd8 <NMI_Handler+0x4>

08002bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bde:	e7fe      	b.n	8002bde <HardFault_Handler+0x4>

08002be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <MemManage_Handler+0x4>

08002be6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002be6:	b480      	push	{r7}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <BusFault_Handler+0x4>

08002bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf0:	e7fe      	b.n	8002bf0 <UsageFault_Handler+0x4>

08002bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bf2:	b480      	push	{r7}
 8002bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bc80      	pop	{r7}
 8002bfc:	4770      	bx	lr

08002bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bc80      	pop	{r7}
 8002c08:	4770      	bx	lr

08002c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c0e:	bf00      	nop
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bc80      	pop	{r7}
 8002c14:	4770      	bx	lr

08002c16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c1a:	f000 fa51 	bl	80030c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	uint8_t One[10][8] = {"IQ\r","SR\r","UM=1\r","TC\r","PX\r","UM\r","SP\r","AC\r","DC\r","PR\r"};
//	uint8_t Two[] = "SR\r";
//	uint8_t Three[] = "3\n";
	//uint8_t cmdStr[20];
	ClearReceiveBuffer(&drive1);
 8002c28:	4814      	ldr	r0, [pc, #80]	; (8002c7c <TIM2_IRQHandler+0x58>)
 8002c2a:	f7fe fc97 	bl	800155c <ClearReceiveBuffer>

	if(state != START){
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <TIM2_IRQHandler+0x5c>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d01d      	beq.n	8002c72 <TIM2_IRQHandler+0x4e>

		/*Alternate between master and slave polling*/
		if(isPollMaster == TRUE){
 8002c36:	4b13      	ldr	r3, [pc, #76]	; (8002c84 <TIM2_IRQHandler+0x60>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d10b      	bne.n	8002c56 <TIM2_IRQHandler+0x32>
			writeStringDrive1(nextCmdMaster);
 8002c3e:	4812      	ldr	r0, [pc, #72]	; (8002c88 <TIM2_IRQHandler+0x64>)
 8002c40:	f7ff fd4a 	bl	80026d8 <writeStringDrive1>
			clearNextCommandMaster();
 8002c44:	f7ff fdfa 	bl	800283c <clearNextCommandMaster>
			fetchNextMaster = TRUE;
 8002c48:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <TIM2_IRQHandler+0x68>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
			isPollMaster = FALSE;
 8002c4e:	4b0d      	ldr	r3, [pc, #52]	; (8002c84 <TIM2_IRQHandler+0x60>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	e00d      	b.n	8002c72 <TIM2_IRQHandler+0x4e>
		}else{
			writeStringPC(nextCmdSlave);
 8002c56:	480e      	ldr	r0, [pc, #56]	; (8002c90 <TIM2_IRQHandler+0x6c>)
 8002c58:	f7ff fd72 	bl	8002740 <writeStringPC>
			writeStringDrive2(nextCmdSlave);
 8002c5c:	480c      	ldr	r0, [pc, #48]	; (8002c90 <TIM2_IRQHandler+0x6c>)
 8002c5e:	f7ff fd55 	bl	800270c <writeStringDrive2>
			clearNextCommandSlave();
 8002c62:	f7ff fdf7 	bl	8002854 <clearNextCommandSlave>
			fetchNextSlave = TRUE;
 8002c66:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <TIM2_IRQHandler+0x70>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	701a      	strb	r2, [r3, #0]
			isPollMaster = TRUE;
 8002c6c:	4b05      	ldr	r3, [pc, #20]	; (8002c84 <TIM2_IRQHandler+0x60>)
 8002c6e:	2201      	movs	r2, #1
 8002c70:	701a      	strb	r2, [r3, #0]
		}
	}

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c72:	4809      	ldr	r0, [pc, #36]	; (8002c98 <TIM2_IRQHandler+0x74>)
 8002c74:	f001 fa58 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c78:	bf00      	nop
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	200005b0 	.word	0x200005b0
 8002c80:	20000045 	.word	0x20000045
 8002c84:	20000044 	.word	0x20000044
 8002c88:	20000e38 	.word	0x20000e38
 8002c8c:	20000042 	.word	0x20000042
 8002c90:	20000e48 	.word	0x20000e48
 8002c94:	20000043 	.word	0x20000043
 8002c98:	2000040c 	.word	0x2000040c

08002c9c <TIM3_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
//	uint8_t Three[] = "7";
//	writeStringDrive1(One);
//	writeStringDrive2(Two);
//	writeStringPC(Three);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002ca0:	4802      	ldr	r0, [pc, #8]	; (8002cac <TIM3_IRQHandler+0x10>)
 8002ca2:	f001 fa41 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ca6:	bf00      	nop
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	20000454 	.word	0x20000454

08002cb0 <TIM4_IRQHandler>:
/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
//	uint8_t Three[] = "9";
//	writeStringDrive1(One);
//	writeStringDrive2(Two);
//	writeStringPC(Three);
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <TIM4_IRQHandler+0x10>)
 8002cb6:	f001 fa37 	bl	8004128 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	2000049c 	.word	0x2000049c

08002cc4 <USART1_IRQHandler>:
/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

	  lastChar = UART1_GetChar();
 8002cc8:	f7ff fc02 	bl	80024d0 <UART1_GetChar>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <USART1_IRQHandler+0x34>)
 8002cd2:	701a      	strb	r2, [r3, #0]
	  drive1.rxBuffer[drive1.rxBufPtr++] = lastChar;
 8002cd4:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <USART1_IRQHandler+0x38>)
 8002cd6:	f893 33fc 	ldrb.w	r3, [r3, #1020]	; 0x3fc
 8002cda:	1c5a      	adds	r2, r3, #1
 8002cdc:	b2d1      	uxtb	r1, r2
 8002cde:	4a07      	ldr	r2, [pc, #28]	; (8002cfc <USART1_IRQHandler+0x38>)
 8002ce0:	f882 13fc 	strb.w	r1, [r2, #1020]	; 0x3fc
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <USART1_IRQHandler+0x34>)
 8002ce8:	781a      	ldrb	r2, [r3, #0]
 8002cea:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <USART1_IRQHandler+0x38>)
 8002cec:	440b      	add	r3, r1
 8002cee:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
//
//		if(rxIndex == 200){
//			__NOP();
//		}
//	  }
	  return;
 8002cf2:	bf00      	nop
//  }
  //memset(UART1_rxBuffer, 0, sizeof(UART1_rxBuffer) * (sizeof UART1_rxBuffer[0]) );
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20000e57 	.word	0x20000e57
 8002cfc:	200005b0 	.word	0x200005b0

08002d00 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	  lastChar = UART2_GetChar();
 8002d04:	f7ff fc02 	bl	800250c <UART2_GetChar>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	4b09      	ldr	r3, [pc, #36]	; (8002d34 <USART2_IRQHandler+0x34>)
 8002d0e:	701a      	strb	r2, [r3, #0]
	  drive2.rxBuffer[drive2.rxBufPtr++] = lastChar;
 8002d10:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <USART2_IRQHandler+0x38>)
 8002d12:	f893 33fc 	ldrb.w	r3, [r3, #1020]	; 0x3fc
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	b2d1      	uxtb	r1, r2
 8002d1a:	4a07      	ldr	r2, [pc, #28]	; (8002d38 <USART2_IRQHandler+0x38>)
 8002d1c:	f882 13fc 	strb.w	r1, [r2, #1020]	; 0x3fc
 8002d20:	4619      	mov	r1, r3
 8002d22:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <USART2_IRQHandler+0x34>)
 8002d24:	781a      	ldrb	r2, [r3, #0]
 8002d26:	4b04      	ldr	r3, [pc, #16]	; (8002d38 <USART2_IRQHandler+0x38>)
 8002d28:	440b      	add	r3, r1
 8002d2a:	f883 23de 	strb.w	r2, [r3, #990]	; 0x3de
	  return;
 8002d2e:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	20000e57 	.word	0x20000e57
 8002d38:	200009d8 	.word	0x200009d8

08002d3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	userChar = UART3_GetChar();
 8002d40:	f7ff fc02 	bl	8002548 <UART3_GetChar>
 8002d44:	4603      	mov	r3, r0
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	4b14      	ldr	r3, [pc, #80]	; (8002d9c <USART3_IRQHandler+0x60>)
 8002d4a:	701a      	strb	r2, [r3, #0]
	userCmd.rxBuffer[userCmd.rxBufPtr++] = userChar;
 8002d4c:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <USART3_IRQHandler+0x64>)
 8002d4e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	b2d1      	uxtb	r1, r2
 8002d56:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <USART3_IRQHandler+0x64>)
 8002d58:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	4b0f      	ldr	r3, [pc, #60]	; (8002d9c <USART3_IRQHandler+0x60>)
 8002d60:	781a      	ldrb	r2, [r3, #0]
 8002d62:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <USART3_IRQHandler+0x64>)
 8002d64:	440b      	add	r3, r1
 8002d66:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	/*Echo on, if in console mode*/
	//if(isLogging == FALSE){
	if(isPolling == FALSE){
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <USART3_IRQHandler+0x68>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d104      	bne.n	8002d7c <USART3_IRQHandler+0x40>
		//writeStringPC(&userChar);
		putCharPC(userChar);
 8002d72:	4b0a      	ldr	r3, [pc, #40]	; (8002d9c <USART3_IRQHandler+0x60>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff fd18 	bl	80027ac <putCharPC>
	}

	if(userChar == '\r'){
 8002d7c:	4b07      	ldr	r3, [pc, #28]	; (8002d9c <USART3_IRQHandler+0x60>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b0d      	cmp	r3, #13
 8002d82:	d109      	bne.n	8002d98 <USART3_IRQHandler+0x5c>
		userCmd.isCmdAvailable = TRUE;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <USART3_IRQHandler+0x64>)
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		ProcessUserBuffer(&userCmd);
 8002d8c:	4804      	ldr	r0, [pc, #16]	; (8002da0 <USART3_IRQHandler+0x64>)
 8002d8e:	f7fe f8f7 	bl	8000f80 <ProcessUserBuffer>
		userChar = 0;
 8002d92:	4b02      	ldr	r3, [pc, #8]	; (8002d9c <USART3_IRQHandler+0x60>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
	}

	return;
 8002d98:	bf00      	nop
  HAL_UART_IRQHandler(&huart3);

  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	20000e58 	.word	0x20000e58
 8002da0:	20000e00 	.word	0x20000e00
 8002da4:	20000e5d 	.word	0x20000e5d

08002da8 <getMeanCurrent>:

#include "sync_algorithm.h"

uint8_t	samples = 20;

double getMeanCurrent(DriveTypeDef *drive){
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b088      	sub	sp, #32
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]

        double mean = 0.0;
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	e9c7 2302 	strd	r2, r3, [r7, #8]
        double sum = 0.0;
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
        //calculate the average
        for(int i =0; i< samples;i++){
 8002dc8:	2300      	movs	r3, #0
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e011      	b.n	8002df2 <getMeanCurrent+0x4a>
            sum = sum + drive->currentRecords[i];
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	3315      	adds	r3, #21
 8002dd4:	00db      	lsls	r3, r3, #3
 8002dd6:	4413      	add	r3, r2
 8002dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ddc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002de0:	f7fd fa3a 	bl	8000258 <__adddf3>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	e9c7 2306 	strd	r2, r3, [r7, #24]
        for(int i =0; i< samples;i++){
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	3301      	adds	r3, #1
 8002df0:	617b      	str	r3, [r7, #20]
 8002df2:	4b0e      	ldr	r3, [pc, #56]	; (8002e2c <getMeanCurrent+0x84>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	461a      	mov	r2, r3
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	dbe7      	blt.n	8002dce <getMeanCurrent+0x26>
        }
        mean  = sum/samples;
 8002dfe:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <getMeanCurrent+0x84>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fd fb74 	bl	80004f0 <__aeabi_i2d>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	460b      	mov	r3, r1
 8002e0c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e10:	f7fd fd02 	bl	8000818 <__aeabi_ddiv>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	e9c7 2302 	strd	r2, r3, [r7, #8]
        return mean;
 8002e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]

}
 8002e20:	4610      	mov	r0, r2
 8002e22:	4619      	mov	r1, r3
 8002e24:	3720      	adds	r7, #32
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	20000047 	.word	0x20000047

08002e30 <ClearCurrentBuffer>:

void ClearCurrentBuffer(DriveTypeDef *drive){ /*Clear Buffer*/
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	drive->currentRecordIndex = 0;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 23c8 	strb.w	r2, [r3, #968]	; 0x3c8
	memset(drive->currentRecords, 0, samples);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	33a8      	adds	r3, #168	; 0xa8
 8002e44:	4a04      	ldr	r2, [pc, #16]	; (8002e58 <ClearCurrentBuffer+0x28>)
 8002e46:	7812      	ldrb	r2, [r2, #0]
 8002e48:	2100      	movs	r1, #0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fefc 	bl	8004c48 <memset>

}
 8002e50:	bf00      	nop
 8002e52:	3708      	adds	r7, #8
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20000047 	.word	0x20000047

08002e5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0
	return 1;
 8002e60:	2301      	movs	r3, #1
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <_kill>:

int _kill(int pid, int sig)
{
 8002e6a:	b580      	push	{r7, lr}
 8002e6c:	b082      	sub	sp, #8
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	6078      	str	r0, [r7, #4]
 8002e72:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e74:	f001 fea0 	bl	8004bb8 <__errno>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2216      	movs	r2, #22
 8002e7c:	601a      	str	r2, [r3, #0]
	return -1;
 8002e7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <_exit>:

void _exit (int status)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e92:	f04f 31ff 	mov.w	r1, #4294967295
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ffe7 	bl	8002e6a <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e9c:	e7fe      	b.n	8002e9c <_exit+0x12>

08002e9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b086      	sub	sp, #24
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	60f8      	str	r0, [r7, #12]
 8002ea6:	60b9      	str	r1, [r7, #8]
 8002ea8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	e00a      	b.n	8002ec6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002eb0:	f3af 8000 	nop.w
 8002eb4:	4601      	mov	r1, r0
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	60ba      	str	r2, [r7, #8]
 8002ebc:	b2ca      	uxtb	r2, r1
 8002ebe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	697a      	ldr	r2, [r7, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	dbf0      	blt.n	8002eb0 <_read+0x12>
	}

return len;
 8002ece:	687b      	ldr	r3, [r7, #4]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}

08002ed8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	60f8      	str	r0, [r7, #12]
 8002ee0:	60b9      	str	r1, [r7, #8]
 8002ee2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
 8002ee8:	e009      	b.n	8002efe <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	60ba      	str	r2, [r7, #8]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	3301      	adds	r3, #1
 8002efc:	617b      	str	r3, [r7, #20]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	dbf1      	blt.n	8002eea <_write+0x12>
	}
	return len;
 8002f06:	687b      	ldr	r3, [r7, #4]
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3718      	adds	r7, #24
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <_close>:

int _close(int file)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	return -1;
 8002f18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
 8002f2e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f36:	605a      	str	r2, [r3, #4]
	return 0;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr

08002f44 <_isatty>:

int _isatty(int file)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
	return 1;
 8002f4c:	2301      	movs	r3, #1
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bc80      	pop	{r7}
 8002f56:	4770      	bx	lr

08002f58 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
	return 0;
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3714      	adds	r7, #20
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bc80      	pop	{r7}
 8002f6e:	4770      	bx	lr

08002f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f78:	4a14      	ldr	r2, [pc, #80]	; (8002fcc <_sbrk+0x5c>)
 8002f7a:	4b15      	ldr	r3, [pc, #84]	; (8002fd0 <_sbrk+0x60>)
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f84:	4b13      	ldr	r3, [pc, #76]	; (8002fd4 <_sbrk+0x64>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d102      	bne.n	8002f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <_sbrk+0x64>)
 8002f8e:	4a12      	ldr	r2, [pc, #72]	; (8002fd8 <_sbrk+0x68>)
 8002f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <_sbrk+0x64>)
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4413      	add	r3, r2
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d207      	bcs.n	8002fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fa0:	f001 fe0a 	bl	8004bb8 <__errno>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	220c      	movs	r2, #12
 8002fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002faa:	f04f 33ff 	mov.w	r3, #4294967295
 8002fae:	e009      	b.n	8002fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fb6:	4b07      	ldr	r3, [pc, #28]	; (8002fd4 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <_sbrk+0x64>)
 8002fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20010000 	.word	0x20010000
 8002fd0:	00000400 	.word	0x00000400
 8002fd4:	20000e74 	.word	0x20000e74
 8002fd8:	20000e90 	.word	0x20000e90

08002fdc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bc80      	pop	{r7}
 8002fe6:	4770      	bx	lr

08002fe8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002fe8:	480c      	ldr	r0, [pc, #48]	; (800301c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002fea:	490d      	ldr	r1, [pc, #52]	; (8003020 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002fec:	4a0d      	ldr	r2, [pc, #52]	; (8003024 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ff0:	e002      	b.n	8002ff8 <LoopCopyDataInit>

08002ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ff6:	3304      	adds	r3, #4

08002ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ffc:	d3f9      	bcc.n	8002ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003000:	4c0a      	ldr	r4, [pc, #40]	; (800302c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003004:	e001      	b.n	800300a <LoopFillZerobss>

08003006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003008:	3204      	adds	r2, #4

0800300a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800300a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800300c:	d3fb      	bcc.n	8003006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800300e:	f7ff ffe5 	bl	8002fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003012:	f001 fdd7 	bl	8004bc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003016:	f7ff f819 	bl	800204c <main>
  bx lr
 800301a:	4770      	bx	lr
  ldr r0, =_sdata
 800301c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003020:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8003024:	08008164 	.word	0x08008164
  ldr r2, =_sbss
 8003028:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 800302c:	20000e8c 	.word	0x20000e8c

08003030 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003030:	e7fe      	b.n	8003030 <ADC1_2_IRQHandler>
	...

08003034 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003038:	4b08      	ldr	r3, [pc, #32]	; (800305c <HAL_Init+0x28>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a07      	ldr	r2, [pc, #28]	; (800305c <HAL_Init+0x28>)
 800303e:	f043 0310 	orr.w	r3, r3, #16
 8003042:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003044:	2003      	movs	r0, #3
 8003046:	f000 f947 	bl	80032d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800304a:	200f      	movs	r0, #15
 800304c:	f000 f808 	bl	8003060 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003050:	f7ff fc12 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003054:	2300      	movs	r3, #0
}
 8003056:	4618      	mov	r0, r3
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	40022000 	.word	0x40022000

08003060 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003068:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <HAL_InitTick+0x54>)
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_InitTick+0x58>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	4619      	mov	r1, r3
 8003072:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003076:	fbb3 f3f1 	udiv	r3, r3, r1
 800307a:	fbb2 f3f3 	udiv	r3, r2, r3
 800307e:	4618      	mov	r0, r3
 8003080:	f000 f95f 	bl	8003342 <HAL_SYSTICK_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e00e      	b.n	80030ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b0f      	cmp	r3, #15
 8003092:	d80a      	bhi.n	80030aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003094:	2200      	movs	r2, #0
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	f04f 30ff 	mov.w	r0, #4294967295
 800309c:	f000 f927 	bl	80032ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a0:	4a06      	ldr	r2, [pc, #24]	; (80030bc <HAL_InitTick+0x5c>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
 80030a8:	e000      	b.n	80030ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3708      	adds	r7, #8
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	20000048 	.word	0x20000048
 80030b8:	20000050 	.word	0x20000050
 80030bc:	2000004c 	.word	0x2000004c

080030c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c4:	4b05      	ldr	r3, [pc, #20]	; (80030dc <HAL_IncTick+0x1c>)
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	461a      	mov	r2, r3
 80030ca:	4b05      	ldr	r3, [pc, #20]	; (80030e0 <HAL_IncTick+0x20>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4413      	add	r3, r2
 80030d0:	4a03      	ldr	r2, [pc, #12]	; (80030e0 <HAL_IncTick+0x20>)
 80030d2:	6013      	str	r3, [r2, #0]
}
 80030d4:	bf00      	nop
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bc80      	pop	{r7}
 80030da:	4770      	bx	lr
 80030dc:	20000050 	.word	0x20000050
 80030e0:	20000e78 	.word	0x20000e78

080030e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return uwTick;
 80030e8:	4b02      	ldr	r3, [pc, #8]	; (80030f4 <HAL_GetTick+0x10>)
 80030ea:	681b      	ldr	r3, [r3, #0]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr
 80030f4:	20000e78 	.word	0x20000e78

080030f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003100:	f7ff fff0 	bl	80030e4 <HAL_GetTick>
 8003104:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003110:	d005      	beq.n	800311e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003112:	4b0a      	ldr	r3, [pc, #40]	; (800313c <HAL_Delay+0x44>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4413      	add	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800311e:	bf00      	nop
 8003120:	f7ff ffe0 	bl	80030e4 <HAL_GetTick>
 8003124:	4602      	mov	r2, r0
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	1ad3      	subs	r3, r2, r3
 800312a:	68fa      	ldr	r2, [r7, #12]
 800312c:	429a      	cmp	r2, r3
 800312e:	d8f7      	bhi.n	8003120 <HAL_Delay+0x28>
  {
  }
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20000050 	.word	0x20000050

08003140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003150:	4b0c      	ldr	r3, [pc, #48]	; (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003168:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800316c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003172:	4a04      	ldr	r2, [pc, #16]	; (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <__NVIC_GetPriorityGrouping+0x18>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	f003 0307 	and.w	r3, r3, #7
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db0b      	blt.n	80031ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f003 021f 	and.w	r2, r3, #31
 80031bc:	4906      	ldr	r1, [pc, #24]	; (80031d8 <__NVIC_EnableIRQ+0x34>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2001      	movs	r0, #1
 80031c6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100

080031dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	db0a      	blt.n	8003206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	b2da      	uxtb	r2, r3
 80031f4:	490c      	ldr	r1, [pc, #48]	; (8003228 <__NVIC_SetPriority+0x4c>)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	0112      	lsls	r2, r2, #4
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	440b      	add	r3, r1
 8003200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003204:	e00a      	b.n	800321c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	b2da      	uxtb	r2, r3
 800320a:	4908      	ldr	r1, [pc, #32]	; (800322c <__NVIC_SetPriority+0x50>)
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	3b04      	subs	r3, #4
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	b2d2      	uxtb	r2, r2
 8003218:	440b      	add	r3, r1
 800321a:	761a      	strb	r2, [r3, #24]
}
 800321c:	bf00      	nop
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	e000e100 	.word	0xe000e100
 800322c:	e000ed00 	.word	0xe000ed00

08003230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003230:	b480      	push	{r7}
 8003232:	b089      	sub	sp, #36	; 0x24
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0307 	and.w	r3, r3, #7
 8003242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f1c3 0307 	rsb	r3, r3, #7
 800324a:	2b04      	cmp	r3, #4
 800324c:	bf28      	it	cs
 800324e:	2304      	movcs	r3, #4
 8003250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3304      	adds	r3, #4
 8003256:	2b06      	cmp	r3, #6
 8003258:	d902      	bls.n	8003260 <NVIC_EncodePriority+0x30>
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	3b03      	subs	r3, #3
 800325e:	e000      	b.n	8003262 <NVIC_EncodePriority+0x32>
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	f04f 32ff 	mov.w	r2, #4294967295
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43da      	mvns	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	401a      	ands	r2, r3
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003278:	f04f 31ff 	mov.w	r1, #4294967295
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	fa01 f303 	lsl.w	r3, r1, r3
 8003282:	43d9      	mvns	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003288:	4313      	orrs	r3, r2
         );
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	; 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	bc80      	pop	{r7}
 8003292:	4770      	bx	lr

08003294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b082      	sub	sp, #8
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	3b01      	subs	r3, #1
 80032a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a4:	d301      	bcc.n	80032aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a6:	2301      	movs	r3, #1
 80032a8:	e00f      	b.n	80032ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <SysTick_Config+0x40>)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3b01      	subs	r3, #1
 80032b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032b2:	210f      	movs	r1, #15
 80032b4:	f04f 30ff 	mov.w	r0, #4294967295
 80032b8:	f7ff ff90 	bl	80031dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032bc:	4b05      	ldr	r3, [pc, #20]	; (80032d4 <SysTick_Config+0x40>)
 80032be:	2200      	movs	r2, #0
 80032c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032c2:	4b04      	ldr	r3, [pc, #16]	; (80032d4 <SysTick_Config+0x40>)
 80032c4:	2207      	movs	r2, #7
 80032c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	e000e010 	.word	0xe000e010

080032d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b082      	sub	sp, #8
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f7ff ff2d 	bl	8003140 <__NVIC_SetPriorityGrouping>
}
 80032e6:	bf00      	nop
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b086      	sub	sp, #24
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4603      	mov	r3, r0
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003300:	f7ff ff42 	bl	8003188 <__NVIC_GetPriorityGrouping>
 8003304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	68b9      	ldr	r1, [r7, #8]
 800330a:	6978      	ldr	r0, [r7, #20]
 800330c:	f7ff ff90 	bl	8003230 <NVIC_EncodePriority>
 8003310:	4602      	mov	r2, r0
 8003312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003316:	4611      	mov	r1, r2
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff ff5f 	bl	80031dc <__NVIC_SetPriority>
}
 800331e:	bf00      	nop
 8003320:	3718      	adds	r7, #24
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	4603      	mov	r3, r0
 800332e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003334:	4618      	mov	r0, r3
 8003336:	f7ff ff35 	bl	80031a4 <__NVIC_EnableIRQ>
}
 800333a:	bf00      	nop
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003342:	b580      	push	{r7, lr}
 8003344:	b082      	sub	sp, #8
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff ffa2 	bl	8003294 <SysTick_Config>
 8003350:	4603      	mov	r3, r0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b082      	sub	sp, #8
 800335e:	af00      	add	r7, sp, #0
 8003360:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e014      	b.n	8003396 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	791b      	ldrb	r3, [r3, #4]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d105      	bne.n	8003382 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fa9d 	bl	80028bc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2202      	movs	r2, #2
 8003386:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2201      	movs	r2, #1
 8003392:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3708      	adds	r7, #8
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}

0800339e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800339e:	b480      	push	{r7}
 80033a0:	b087      	sub	sp, #28
 80033a2:	af00      	add	r7, sp, #0
 80033a4:	60f8      	str	r0, [r7, #12]
 80033a6:	60b9      	str	r1, [r7, #8]
 80033a8:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	795b      	ldrb	r3, [r3, #5]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_DAC_ConfigChannel+0x18>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e03c      	b.n	8003430 <HAL_DAC_ConfigChannel+0x92>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2202      	movs	r2, #2
 80033c0:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4013      	ands	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	697a      	ldr	r2, [r7, #20]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	22c0      	movs	r2, #192	; 0xc0
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43da      	mvns	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	400a      	ands	r2, r1
 8003420:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2201      	movs	r2, #1
 8003426:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	371c      	adds	r7, #28
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
	...

0800343c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800343c:	b480      	push	{r7}
 800343e:	b08b      	sub	sp, #44	; 0x2c
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003446:	2300      	movs	r3, #0
 8003448:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800344e:	e179      	b.n	8003744 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003450:	2201      	movs	r2, #1
 8003452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	4013      	ands	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	429a      	cmp	r2, r3
 800346a:	f040 8168 	bne.w	800373e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	4a96      	ldr	r2, [pc, #600]	; (80036cc <HAL_GPIO_Init+0x290>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d05e      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 8003478:	4a94      	ldr	r2, [pc, #592]	; (80036cc <HAL_GPIO_Init+0x290>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d875      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 800347e:	4a94      	ldr	r2, [pc, #592]	; (80036d0 <HAL_GPIO_Init+0x294>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d058      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 8003484:	4a92      	ldr	r2, [pc, #584]	; (80036d0 <HAL_GPIO_Init+0x294>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d86f      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 800348a:	4a92      	ldr	r2, [pc, #584]	; (80036d4 <HAL_GPIO_Init+0x298>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d052      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 8003490:	4a90      	ldr	r2, [pc, #576]	; (80036d4 <HAL_GPIO_Init+0x298>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d869      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 8003496:	4a90      	ldr	r2, [pc, #576]	; (80036d8 <HAL_GPIO_Init+0x29c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d04c      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 800349c:	4a8e      	ldr	r2, [pc, #568]	; (80036d8 <HAL_GPIO_Init+0x29c>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d863      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 80034a2:	4a8e      	ldr	r2, [pc, #568]	; (80036dc <HAL_GPIO_Init+0x2a0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d046      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
 80034a8:	4a8c      	ldr	r2, [pc, #560]	; (80036dc <HAL_GPIO_Init+0x2a0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d85d      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 80034ae:	2b12      	cmp	r3, #18
 80034b0:	d82a      	bhi.n	8003508 <HAL_GPIO_Init+0xcc>
 80034b2:	2b12      	cmp	r3, #18
 80034b4:	d859      	bhi.n	800356a <HAL_GPIO_Init+0x12e>
 80034b6:	a201      	add	r2, pc, #4	; (adr r2, 80034bc <HAL_GPIO_Init+0x80>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	08003537 	.word	0x08003537
 80034c0:	08003511 	.word	0x08003511
 80034c4:	08003523 	.word	0x08003523
 80034c8:	08003565 	.word	0x08003565
 80034cc:	0800356b 	.word	0x0800356b
 80034d0:	0800356b 	.word	0x0800356b
 80034d4:	0800356b 	.word	0x0800356b
 80034d8:	0800356b 	.word	0x0800356b
 80034dc:	0800356b 	.word	0x0800356b
 80034e0:	0800356b 	.word	0x0800356b
 80034e4:	0800356b 	.word	0x0800356b
 80034e8:	0800356b 	.word	0x0800356b
 80034ec:	0800356b 	.word	0x0800356b
 80034f0:	0800356b 	.word	0x0800356b
 80034f4:	0800356b 	.word	0x0800356b
 80034f8:	0800356b 	.word	0x0800356b
 80034fc:	0800356b 	.word	0x0800356b
 8003500:	08003519 	.word	0x08003519
 8003504:	0800352d 	.word	0x0800352d
 8003508:	4a75      	ldr	r2, [pc, #468]	; (80036e0 <HAL_GPIO_Init+0x2a4>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800350e:	e02c      	b.n	800356a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	623b      	str	r3, [r7, #32]
          break;
 8003516:	e029      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	3304      	adds	r3, #4
 800351e:	623b      	str	r3, [r7, #32]
          break;
 8003520:	e024      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	3308      	adds	r3, #8
 8003528:	623b      	str	r3, [r7, #32]
          break;
 800352a:	e01f      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	330c      	adds	r3, #12
 8003532:	623b      	str	r3, [r7, #32]
          break;
 8003534:	e01a      	b.n	800356c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800353e:	2304      	movs	r3, #4
 8003540:	623b      	str	r3, [r7, #32]
          break;
 8003542:	e013      	b.n	800356c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800354c:	2308      	movs	r3, #8
 800354e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	611a      	str	r2, [r3, #16]
          break;
 8003556:	e009      	b.n	800356c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003558:	2308      	movs	r3, #8
 800355a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	69fa      	ldr	r2, [r7, #28]
 8003560:	615a      	str	r2, [r3, #20]
          break;
 8003562:	e003      	b.n	800356c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003564:	2300      	movs	r3, #0
 8003566:	623b      	str	r3, [r7, #32]
          break;
 8003568:	e000      	b.n	800356c <HAL_GPIO_Init+0x130>
          break;
 800356a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800356c:	69bb      	ldr	r3, [r7, #24]
 800356e:	2bff      	cmp	r3, #255	; 0xff
 8003570:	d801      	bhi.n	8003576 <HAL_GPIO_Init+0x13a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	e001      	b.n	800357a <HAL_GPIO_Init+0x13e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3304      	adds	r3, #4
 800357a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2bff      	cmp	r3, #255	; 0xff
 8003580:	d802      	bhi.n	8003588 <HAL_GPIO_Init+0x14c>
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	e002      	b.n	800358e <HAL_GPIO_Init+0x152>
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	3b08      	subs	r3, #8
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	210f      	movs	r1, #15
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	fa01 f303 	lsl.w	r3, r1, r3
 800359c:	43db      	mvns	r3, r3
 800359e:	401a      	ands	r2, r3
 80035a0:	6a39      	ldr	r1, [r7, #32]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	431a      	orrs	r2, r3
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80c1 	beq.w	800373e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80035bc:	4b49      	ldr	r3, [pc, #292]	; (80036e4 <HAL_GPIO_Init+0x2a8>)
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	4a48      	ldr	r2, [pc, #288]	; (80036e4 <HAL_GPIO_Init+0x2a8>)
 80035c2:	f043 0301 	orr.w	r3, r3, #1
 80035c6:	6193      	str	r3, [r2, #24]
 80035c8:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_GPIO_Init+0x2a8>)
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	60bb      	str	r3, [r7, #8]
 80035d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80035d4:	4a44      	ldr	r2, [pc, #272]	; (80036e8 <HAL_GPIO_Init+0x2ac>)
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	089b      	lsrs	r3, r3, #2
 80035da:	3302      	adds	r3, #2
 80035dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	f003 0303 	and.w	r3, r3, #3
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	220f      	movs	r2, #15
 80035ec:	fa02 f303 	lsl.w	r3, r2, r3
 80035f0:	43db      	mvns	r3, r3
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a3c      	ldr	r2, [pc, #240]	; (80036ec <HAL_GPIO_Init+0x2b0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d01f      	beq.n	8003640 <HAL_GPIO_Init+0x204>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a3b      	ldr	r2, [pc, #236]	; (80036f0 <HAL_GPIO_Init+0x2b4>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d019      	beq.n	800363c <HAL_GPIO_Init+0x200>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a3a      	ldr	r2, [pc, #232]	; (80036f4 <HAL_GPIO_Init+0x2b8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d013      	beq.n	8003638 <HAL_GPIO_Init+0x1fc>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a39      	ldr	r2, [pc, #228]	; (80036f8 <HAL_GPIO_Init+0x2bc>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00d      	beq.n	8003634 <HAL_GPIO_Init+0x1f8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a38      	ldr	r2, [pc, #224]	; (80036fc <HAL_GPIO_Init+0x2c0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d007      	beq.n	8003630 <HAL_GPIO_Init+0x1f4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a37      	ldr	r2, [pc, #220]	; (8003700 <HAL_GPIO_Init+0x2c4>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_GPIO_Init+0x1f0>
 8003628:	2305      	movs	r3, #5
 800362a:	e00a      	b.n	8003642 <HAL_GPIO_Init+0x206>
 800362c:	2306      	movs	r3, #6
 800362e:	e008      	b.n	8003642 <HAL_GPIO_Init+0x206>
 8003630:	2304      	movs	r3, #4
 8003632:	e006      	b.n	8003642 <HAL_GPIO_Init+0x206>
 8003634:	2303      	movs	r3, #3
 8003636:	e004      	b.n	8003642 <HAL_GPIO_Init+0x206>
 8003638:	2302      	movs	r3, #2
 800363a:	e002      	b.n	8003642 <HAL_GPIO_Init+0x206>
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_GPIO_Init+0x206>
 8003640:	2300      	movs	r3, #0
 8003642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003644:	f002 0203 	and.w	r2, r2, #3
 8003648:	0092      	lsls	r2, r2, #2
 800364a:	4093      	lsls	r3, r2
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003652:	4925      	ldr	r1, [pc, #148]	; (80036e8 <HAL_GPIO_Init+0x2ac>)
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d006      	beq.n	800367a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	4924      	ldr	r1, [pc, #144]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	4313      	orrs	r3, r2
 8003676:	600b      	str	r3, [r1, #0]
 8003678:	e006      	b.n	8003688 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800367a:	4b22      	ldr	r3, [pc, #136]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	43db      	mvns	r3, r3
 8003682:	4920      	ldr	r1, [pc, #128]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 8003684:	4013      	ands	r3, r2
 8003686:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d006      	beq.n	80036a2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003694:	4b1b      	ldr	r3, [pc, #108]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 8003696:	685a      	ldr	r2, [r3, #4]
 8003698:	491a      	ldr	r1, [pc, #104]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 800369a:	69bb      	ldr	r3, [r7, #24]
 800369c:	4313      	orrs	r3, r2
 800369e:	604b      	str	r3, [r1, #4]
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	43db      	mvns	r3, r3
 80036aa:	4916      	ldr	r1, [pc, #88]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d025      	beq.n	8003708 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80036bc:	4b11      	ldr	r3, [pc, #68]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	4910      	ldr	r1, [pc, #64]	; (8003704 <HAL_GPIO_Init+0x2c8>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	608b      	str	r3, [r1, #8]
 80036c8:	e025      	b.n	8003716 <HAL_GPIO_Init+0x2da>
 80036ca:	bf00      	nop
 80036cc:	10320000 	.word	0x10320000
 80036d0:	10310000 	.word	0x10310000
 80036d4:	10220000 	.word	0x10220000
 80036d8:	10210000 	.word	0x10210000
 80036dc:	10120000 	.word	0x10120000
 80036e0:	10110000 	.word	0x10110000
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40010000 	.word	0x40010000
 80036ec:	40010800 	.word	0x40010800
 80036f0:	40010c00 	.word	0x40010c00
 80036f4:	40011000 	.word	0x40011000
 80036f8:	40011400 	.word	0x40011400
 80036fc:	40011800 	.word	0x40011800
 8003700:	40011c00 	.word	0x40011c00
 8003704:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003708:	4b15      	ldr	r3, [pc, #84]	; (8003760 <HAL_GPIO_Init+0x324>)
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	43db      	mvns	r3, r3
 8003710:	4913      	ldr	r1, [pc, #76]	; (8003760 <HAL_GPIO_Init+0x324>)
 8003712:	4013      	ands	r3, r2
 8003714:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800371e:	2b00      	cmp	r3, #0
 8003720:	d006      	beq.n	8003730 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003722:	4b0f      	ldr	r3, [pc, #60]	; (8003760 <HAL_GPIO_Init+0x324>)
 8003724:	68da      	ldr	r2, [r3, #12]
 8003726:	490e      	ldr	r1, [pc, #56]	; (8003760 <HAL_GPIO_Init+0x324>)
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	4313      	orrs	r3, r2
 800372c:	60cb      	str	r3, [r1, #12]
 800372e:	e006      	b.n	800373e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_GPIO_Init+0x324>)
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	43db      	mvns	r3, r3
 8003738:	4909      	ldr	r1, [pc, #36]	; (8003760 <HAL_GPIO_Init+0x324>)
 800373a:	4013      	ands	r3, r2
 800373c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800373e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003740:	3301      	adds	r3, #1
 8003742:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374a:	fa22 f303 	lsr.w	r3, r2, r3
 800374e:	2b00      	cmp	r3, #0
 8003750:	f47f ae7e 	bne.w	8003450 <HAL_GPIO_Init+0x14>
  }
}
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	372c      	adds	r7, #44	; 0x2c
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	40010400 	.word	0x40010400

08003764 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	460b      	mov	r3, r1
 800376e:	807b      	strh	r3, [r7, #2]
 8003770:	4613      	mov	r3, r2
 8003772:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003774:	787b      	ldrb	r3, [r7, #1]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800377a:	887a      	ldrh	r2, [r7, #2]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003780:	e003      	b.n	800378a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003782:	887b      	ldrh	r3, [r7, #2]
 8003784:	041a      	lsls	r2, r3, #16
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	611a      	str	r2, [r3, #16]
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	bc80      	pop	{r7}
 8003792:	4770      	bx	lr

08003794 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e272      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 8087 	beq.w	80038c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80037b4:	4b92      	ldr	r3, [pc, #584]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 030c 	and.w	r3, r3, #12
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d00c      	beq.n	80037da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80037c0:	4b8f      	ldr	r3, [pc, #572]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 030c 	and.w	r3, r3, #12
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d112      	bne.n	80037f2 <HAL_RCC_OscConfig+0x5e>
 80037cc:	4b8c      	ldr	r3, [pc, #560]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d8:	d10b      	bne.n	80037f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037da:	4b89      	ldr	r3, [pc, #548]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d06c      	beq.n	80038c0 <HAL_RCC_OscConfig+0x12c>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d168      	bne.n	80038c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e24c      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x76>
 80037fc:	4b80      	ldr	r3, [pc, #512]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a7f      	ldr	r2, [pc, #508]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003802:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	e02e      	b.n	8003868 <HAL_RCC_OscConfig+0xd4>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x98>
 8003812:	4b7b      	ldr	r3, [pc, #492]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a7a      	ldr	r2, [pc, #488]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b78      	ldr	r3, [pc, #480]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a77      	ldr	r2, [pc, #476]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003824:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e01d      	b.n	8003868 <HAL_RCC_OscConfig+0xd4>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003834:	d10c      	bne.n	8003850 <HAL_RCC_OscConfig+0xbc>
 8003836:	4b72      	ldr	r3, [pc, #456]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a71      	ldr	r2, [pc, #452]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 800383c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003840:	6013      	str	r3, [r2, #0]
 8003842:	4b6f      	ldr	r3, [pc, #444]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a6e      	ldr	r2, [pc, #440]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800384c:	6013      	str	r3, [r2, #0]
 800384e:	e00b      	b.n	8003868 <HAL_RCC_OscConfig+0xd4>
 8003850:	4b6b      	ldr	r3, [pc, #428]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a6a      	ldr	r2, [pc, #424]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800385a:	6013      	str	r3, [r2, #0]
 800385c:	4b68      	ldr	r3, [pc, #416]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a67      	ldr	r2, [pc, #412]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003862:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003866:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d013      	beq.n	8003898 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003870:	f7ff fc38 	bl	80030e4 <HAL_GetTick>
 8003874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003876:	e008      	b.n	800388a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003878:	f7ff fc34 	bl	80030e4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	2b64      	cmp	r3, #100	; 0x64
 8003884:	d901      	bls.n	800388a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e200      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800388a:	4b5d      	ldr	r3, [pc, #372]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003892:	2b00      	cmp	r3, #0
 8003894:	d0f0      	beq.n	8003878 <HAL_RCC_OscConfig+0xe4>
 8003896:	e014      	b.n	80038c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003898:	f7ff fc24 	bl	80030e4 <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800389e:	e008      	b.n	80038b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038a0:	f7ff fc20 	bl	80030e4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b64      	cmp	r3, #100	; 0x64
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e1ec      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038b2:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1f0      	bne.n	80038a0 <HAL_RCC_OscConfig+0x10c>
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d063      	beq.n	8003996 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038ce:	4b4c      	ldr	r3, [pc, #304]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f003 030c 	and.w	r3, r3, #12
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038da:	4b49      	ldr	r3, [pc, #292]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f003 030c 	and.w	r3, r3, #12
 80038e2:	2b08      	cmp	r3, #8
 80038e4:	d11c      	bne.n	8003920 <HAL_RCC_OscConfig+0x18c>
 80038e6:	4b46      	ldr	r3, [pc, #280]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d116      	bne.n	8003920 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038f2:	4b43      	ldr	r3, [pc, #268]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0302 	and.w	r3, r3, #2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d005      	beq.n	800390a <HAL_RCC_OscConfig+0x176>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d001      	beq.n	800390a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e1c0      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800390a:	4b3d      	ldr	r3, [pc, #244]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4939      	ldr	r1, [pc, #228]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 800391a:	4313      	orrs	r3, r2
 800391c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800391e:	e03a      	b.n	8003996 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003928:	4b36      	ldr	r3, [pc, #216]	; (8003a04 <HAL_RCC_OscConfig+0x270>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392e:	f7ff fbd9 	bl	80030e4 <HAL_GetTick>
 8003932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003934:	e008      	b.n	8003948 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003936:	f7ff fbd5 	bl	80030e4 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	2b02      	cmp	r3, #2
 8003942:	d901      	bls.n	8003948 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e1a1      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003948:	4b2d      	ldr	r3, [pc, #180]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0302 	and.w	r3, r3, #2
 8003950:	2b00      	cmp	r3, #0
 8003952:	d0f0      	beq.n	8003936 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003954:	4b2a      	ldr	r3, [pc, #168]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	00db      	lsls	r3, r3, #3
 8003962:	4927      	ldr	r1, [pc, #156]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 8003964:	4313      	orrs	r3, r2
 8003966:	600b      	str	r3, [r1, #0]
 8003968:	e015      	b.n	8003996 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396a:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <HAL_RCC_OscConfig+0x270>)
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003970:	f7ff fbb8 	bl	80030e4 <HAL_GetTick>
 8003974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003976:	e008      	b.n	800398a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003978:	f7ff fbb4 	bl	80030e4 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	2b02      	cmp	r3, #2
 8003984:	d901      	bls.n	800398a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e180      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800398a:	4b1d      	ldr	r3, [pc, #116]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	2b00      	cmp	r3, #0
 8003994:	d1f0      	bne.n	8003978 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d03a      	beq.n	8003a18 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d019      	beq.n	80039de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039aa:	4b17      	ldr	r3, [pc, #92]	; (8003a08 <HAL_RCC_OscConfig+0x274>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039b0:	f7ff fb98 	bl	80030e4 <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039b8:	f7ff fb94 	bl	80030e4 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e160      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <HAL_RCC_OscConfig+0x26c>)
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0f0      	beq.n	80039b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039d6:	2001      	movs	r0, #1
 80039d8:	f000 fad8 	bl	8003f8c <RCC_Delay>
 80039dc:	e01c      	b.n	8003a18 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039de:	4b0a      	ldr	r3, [pc, #40]	; (8003a08 <HAL_RCC_OscConfig+0x274>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039e4:	f7ff fb7e 	bl	80030e4 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039ea:	e00f      	b.n	8003a0c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ec:	f7ff fb7a 	bl	80030e4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	2b02      	cmp	r3, #2
 80039f8:	d908      	bls.n	8003a0c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e146      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
 80039fe:	bf00      	nop
 8003a00:	40021000 	.word	0x40021000
 8003a04:	42420000 	.word	0x42420000
 8003a08:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a0c:	4b92      	ldr	r3, [pc, #584]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e9      	bne.n	80039ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80a6 	beq.w	8003b72 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a26:	2300      	movs	r3, #0
 8003a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a2a:	4b8b      	ldr	r3, [pc, #556]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003a2c:	69db      	ldr	r3, [r3, #28]
 8003a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10d      	bne.n	8003a52 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a36:	4b88      	ldr	r3, [pc, #544]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003a38:	69db      	ldr	r3, [r3, #28]
 8003a3a:	4a87      	ldr	r2, [pc, #540]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a40:	61d3      	str	r3, [r2, #28]
 8003a42:	4b85      	ldr	r3, [pc, #532]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003a44:	69db      	ldr	r3, [r3, #28]
 8003a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4a:	60bb      	str	r3, [r7, #8]
 8003a4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a52:	4b82      	ldr	r3, [pc, #520]	; (8003c5c <HAL_RCC_OscConfig+0x4c8>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d118      	bne.n	8003a90 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a5e:	4b7f      	ldr	r3, [pc, #508]	; (8003c5c <HAL_RCC_OscConfig+0x4c8>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a7e      	ldr	r2, [pc, #504]	; (8003c5c <HAL_RCC_OscConfig+0x4c8>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a6a:	f7ff fb3b 	bl	80030e4 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a72:	f7ff fb37 	bl	80030e4 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b64      	cmp	r3, #100	; 0x64
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e103      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a84:	4b75      	ldr	r3, [pc, #468]	; (8003c5c <HAL_RCC_OscConfig+0x4c8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d106      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x312>
 8003a98:	4b6f      	ldr	r3, [pc, #444]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	4a6e      	ldr	r2, [pc, #440]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6213      	str	r3, [r2, #32]
 8003aa4:	e02d      	b.n	8003b02 <HAL_RCC_OscConfig+0x36e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d10c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x334>
 8003aae:	4b6a      	ldr	r3, [pc, #424]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	4a69      	ldr	r2, [pc, #420]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	6213      	str	r3, [r2, #32]
 8003aba:	4b67      	ldr	r3, [pc, #412]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	4a66      	ldr	r2, [pc, #408]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003ac0:	f023 0304 	bic.w	r3, r3, #4
 8003ac4:	6213      	str	r3, [r2, #32]
 8003ac6:	e01c      	b.n	8003b02 <HAL_RCC_OscConfig+0x36e>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b05      	cmp	r3, #5
 8003ace:	d10c      	bne.n	8003aea <HAL_RCC_OscConfig+0x356>
 8003ad0:	4b61      	ldr	r3, [pc, #388]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4a60      	ldr	r2, [pc, #384]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	f043 0304 	orr.w	r3, r3, #4
 8003ada:	6213      	str	r3, [r2, #32]
 8003adc:	4b5e      	ldr	r3, [pc, #376]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	4a5d      	ldr	r2, [pc, #372]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	f043 0301 	orr.w	r3, r3, #1
 8003ae6:	6213      	str	r3, [r2, #32]
 8003ae8:	e00b      	b.n	8003b02 <HAL_RCC_OscConfig+0x36e>
 8003aea:	4b5b      	ldr	r3, [pc, #364]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	4a5a      	ldr	r2, [pc, #360]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	6213      	str	r3, [r2, #32]
 8003af6:	4b58      	ldr	r3, [pc, #352]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	4a57      	ldr	r2, [pc, #348]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003afc:	f023 0304 	bic.w	r3, r3, #4
 8003b00:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d015      	beq.n	8003b36 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b0a:	f7ff faeb 	bl	80030e4 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b10:	e00a      	b.n	8003b28 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b12:	f7ff fae7 	bl	80030e4 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d901      	bls.n	8003b28 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b24:	2303      	movs	r3, #3
 8003b26:	e0b1      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b28:	4b4b      	ldr	r3, [pc, #300]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003b2a:	6a1b      	ldr	r3, [r3, #32]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d0ee      	beq.n	8003b12 <HAL_RCC_OscConfig+0x37e>
 8003b34:	e014      	b.n	8003b60 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b36:	f7ff fad5 	bl	80030e4 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3c:	e00a      	b.n	8003b54 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7ff fad1 	bl	80030e4 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e09b      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b54:	4b40      	ldr	r3, [pc, #256]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003b56:	6a1b      	ldr	r3, [r3, #32]
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1ee      	bne.n	8003b3e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d105      	bne.n	8003b72 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b66:	4b3c      	ldr	r3, [pc, #240]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	4a3b      	ldr	r2, [pc, #236]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003b6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b70:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 8087 	beq.w	8003c8a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b7c:	4b36      	ldr	r3, [pc, #216]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f003 030c 	and.w	r3, r3, #12
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d061      	beq.n	8003c4c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	69db      	ldr	r3, [r3, #28]
 8003b8c:	2b02      	cmp	r3, #2
 8003b8e:	d146      	bne.n	8003c1e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b90:	4b33      	ldr	r3, [pc, #204]	; (8003c60 <HAL_RCC_OscConfig+0x4cc>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b96:	f7ff faa5 	bl	80030e4 <HAL_GetTick>
 8003b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b9c:	e008      	b.n	8003bb0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b9e:	f7ff faa1 	bl	80030e4 <HAL_GetTick>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	2b02      	cmp	r3, #2
 8003baa:	d901      	bls.n	8003bb0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003bac:	2303      	movs	r3, #3
 8003bae:	e06d      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bb0:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1f0      	bne.n	8003b9e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a1b      	ldr	r3, [r3, #32]
 8003bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bc4:	d108      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bc6:	4b24      	ldr	r3, [pc, #144]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	4921      	ldr	r1, [pc, #132]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bd8:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a19      	ldr	r1, [r3, #32]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	430b      	orrs	r3, r1
 8003bea:	491b      	ldr	r1, [pc, #108]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bf0:	4b1b      	ldr	r3, [pc, #108]	; (8003c60 <HAL_RCC_OscConfig+0x4cc>)
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf6:	f7ff fa75 	bl	80030e4 <HAL_GetTick>
 8003bfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bfc:	e008      	b.n	8003c10 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bfe:	f7ff fa71 	bl	80030e4 <HAL_GetTick>
 8003c02:	4602      	mov	r2, r0
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e03d      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003c10:	4b11      	ldr	r3, [pc, #68]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0f0      	beq.n	8003bfe <HAL_RCC_OscConfig+0x46a>
 8003c1c:	e035      	b.n	8003c8a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c1e:	4b10      	ldr	r3, [pc, #64]	; (8003c60 <HAL_RCC_OscConfig+0x4cc>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c24:	f7ff fa5e 	bl	80030e4 <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c2c:	f7ff fa5a 	bl	80030e4 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e026      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x498>
 8003c4a:	e01e      	b.n	8003c8a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d107      	bne.n	8003c64 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e019      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
 8003c60:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c64:	4b0b      	ldr	r3, [pc, #44]	; (8003c94 <HAL_RCC_OscConfig+0x500>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6a1b      	ldr	r3, [r3, #32]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d106      	bne.n	8003c86 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3718      	adds	r7, #24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	40021000 	.word	0x40021000

08003c98 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e0d0      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cac:	4b6a      	ldr	r3, [pc, #424]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d910      	bls.n	8003cdc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cba:	4b67      	ldr	r3, [pc, #412]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 0207 	bic.w	r2, r3, #7
 8003cc2:	4965      	ldr	r1, [pc, #404]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cca:	4b63      	ldr	r3, [pc, #396]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0307 	and.w	r3, r3, #7
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d001      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e0b8      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0302 	and.w	r3, r3, #2
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d020      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d005      	beq.n	8003d00 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cf4:	4b59      	ldr	r3, [pc, #356]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	4a58      	ldr	r2, [pc, #352]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003cfa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003cfe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d0c:	4b53      	ldr	r3, [pc, #332]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a52      	ldr	r2, [pc, #328]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d12:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003d16:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d18:	4b50      	ldr	r3, [pc, #320]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	494d      	ldr	r1, [pc, #308]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d040      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d107      	bne.n	8003d4e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d3e:	4b47      	ldr	r3, [pc, #284]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d115      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e07f      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d56:	4b41      	ldr	r3, [pc, #260]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e073      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	4b3d      	ldr	r3, [pc, #244]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e06b      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b39      	ldr	r3, [pc, #228]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4936      	ldr	r1, [pc, #216]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d88:	f7ff f9ac 	bl	80030e4 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7ff f9a8 	bl	80030e4 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e053      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b2d      	ldr	r3, [pc, #180]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003db8:	4b27      	ldr	r3, [pc, #156]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	683a      	ldr	r2, [r7, #0]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d210      	bcs.n	8003de8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dc6:	4b24      	ldr	r3, [pc, #144]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f023 0207 	bic.w	r2, r3, #7
 8003dce:	4922      	ldr	r1, [pc, #136]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dd6:	4b20      	ldr	r3, [pc, #128]	; (8003e58 <HAL_RCC_ClockConfig+0x1c0>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	683a      	ldr	r2, [r7, #0]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d001      	beq.n	8003de8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e032      	b.n	8003e4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df4:	4b19      	ldr	r3, [pc, #100]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	4916      	ldr	r1, [pc, #88]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 0308 	and.w	r3, r3, #8
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d009      	beq.n	8003e26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e12:	4b12      	ldr	r3, [pc, #72]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	490e      	ldr	r1, [pc, #56]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e22:	4313      	orrs	r3, r2
 8003e24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e26:	f000 f821 	bl	8003e6c <HAL_RCC_GetSysClockFreq>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	; (8003e5c <HAL_RCC_ClockConfig+0x1c4>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	091b      	lsrs	r3, r3, #4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	490a      	ldr	r1, [pc, #40]	; (8003e60 <HAL_RCC_ClockConfig+0x1c8>)
 8003e38:	5ccb      	ldrb	r3, [r1, r3]
 8003e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e3e:	4a09      	ldr	r2, [pc, #36]	; (8003e64 <HAL_RCC_ClockConfig+0x1cc>)
 8003e40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e42:	4b09      	ldr	r3, [pc, #36]	; (8003e68 <HAL_RCC_ClockConfig+0x1d0>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f7ff f90a 	bl	8003060 <HAL_InitTick>

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40022000 	.word	0x40022000
 8003e5c:	40021000 	.word	0x40021000
 8003e60:	08007d18 	.word	0x08007d18
 8003e64:	20000048 	.word	0x20000048
 8003e68:	2000004c 	.word	0x2000004c

08003e6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e6c:	b490      	push	{r4, r7}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003e72:	4b29      	ldr	r3, [pc, #164]	; (8003f18 <HAL_RCC_GetSysClockFreq+0xac>)
 8003e74:	1d3c      	adds	r4, r7, #4
 8003e76:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003e78:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003e7c:	f240 2301 	movw	r3, #513	; 0x201
 8003e80:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e82:	2300      	movs	r3, #0
 8003e84:	61fb      	str	r3, [r7, #28]
 8003e86:	2300      	movs	r3, #0
 8003e88:	61bb      	str	r3, [r7, #24]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e96:	4b21      	ldr	r3, [pc, #132]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	f003 030c 	and.w	r3, r3, #12
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d002      	beq.n	8003eac <HAL_RCC_GetSysClockFreq+0x40>
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d003      	beq.n	8003eb2 <HAL_RCC_GetSysClockFreq+0x46>
 8003eaa:	e02b      	b.n	8003f04 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003eac:	4b1c      	ldr	r3, [pc, #112]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003eae:	623b      	str	r3, [r7, #32]
      break;
 8003eb0:	e02b      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	0c9b      	lsrs	r3, r3, #18
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	3328      	adds	r3, #40	; 0x28
 8003ebc:	443b      	add	r3, r7
 8003ebe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003ec2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d012      	beq.n	8003ef4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003ece:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	0c5b      	lsrs	r3, r3, #17
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	3328      	adds	r3, #40	; 0x28
 8003eda:	443b      	add	r3, r7
 8003edc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003ee0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	4a0e      	ldr	r2, [pc, #56]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ee6:	fb03 f202 	mul.w	r2, r3, r2
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ef0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef2:	e004      	b.n	8003efe <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	4a0b      	ldr	r2, [pc, #44]	; (8003f24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ef8:	fb02 f303 	mul.w	r3, r2, r3
 8003efc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f00:	623b      	str	r3, [r7, #32]
      break;
 8003f02:	e002      	b.n	8003f0a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003f04:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003f06:	623b      	str	r3, [r7, #32]
      break;
 8003f08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f0a:	6a3b      	ldr	r3, [r7, #32]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3728      	adds	r7, #40	; 0x28
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bc90      	pop	{r4, r7}
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	08007cb0 	.word	0x08007cb0
 8003f1c:	40021000 	.word	0x40021000
 8003f20:	007a1200 	.word	0x007a1200
 8003f24:	003d0900 	.word	0x003d0900

08003f28 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f2c:	4b02      	ldr	r3, [pc, #8]	; (8003f38 <HAL_RCC_GetHCLKFreq+0x10>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bc80      	pop	{r7}
 8003f36:	4770      	bx	lr
 8003f38:	20000048 	.word	0x20000048

08003f3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f40:	f7ff fff2 	bl	8003f28 <HAL_RCC_GetHCLKFreq>
 8003f44:	4602      	mov	r2, r0
 8003f46:	4b05      	ldr	r3, [pc, #20]	; (8003f5c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	0a1b      	lsrs	r3, r3, #8
 8003f4c:	f003 0307 	and.w	r3, r3, #7
 8003f50:	4903      	ldr	r1, [pc, #12]	; (8003f60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f52:	5ccb      	ldrb	r3, [r1, r3]
 8003f54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	bd80      	pop	{r7, pc}
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	08007d28 	.word	0x08007d28

08003f64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003f68:	f7ff ffde 	bl	8003f28 <HAL_RCC_GetHCLKFreq>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	0adb      	lsrs	r3, r3, #11
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	4903      	ldr	r1, [pc, #12]	; (8003f88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f7a:	5ccb      	ldrb	r3, [r1, r3]
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	bd80      	pop	{r7, pc}
 8003f84:	40021000 	.word	0x40021000
 8003f88:	08007d28 	.word	0x08007d28

08003f8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <RCC_Delay+0x34>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a0a      	ldr	r2, [pc, #40]	; (8003fc4 <RCC_Delay+0x38>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	0a5b      	lsrs	r3, r3, #9
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fa8:	bf00      	nop
  }
  while (Delay --);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1e5a      	subs	r2, r3, #1
 8003fae:	60fa      	str	r2, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f9      	bne.n	8003fa8 <RCC_Delay+0x1c>
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	20000048 	.word	0x20000048
 8003fc4:	10624dd3 	.word	0x10624dd3

08003fc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e041      	b.n	800405e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d106      	bne.n	8003ff4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fe fca0 	bl	8002934 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2202      	movs	r2, #2
 8003ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f000 fa88 	bl	800451c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2201      	movs	r2, #1
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3708      	adds	r7, #8
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004076:	b2db      	uxtb	r3, r3
 8004078:	2b01      	cmp	r3, #1
 800407a:	d001      	beq.n	8004080 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e044      	b.n	800410a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2202      	movs	r2, #2
 8004084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <HAL_TIM_Base_Start_IT+0xac>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d018      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x6c>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_TIM_Base_Start_IT+0xb0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d013      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x6c>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040b4:	d00e      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x6c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a18      	ldr	r2, [pc, #96]	; (800411c <HAL_TIM_Base_Start_IT+0xb4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d009      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x6c>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a16      	ldr	r2, [pc, #88]	; (8004120 <HAL_TIM_Base_Start_IT+0xb8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d004      	beq.n	80040d4 <HAL_TIM_Base_Start_IT+0x6c>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a15      	ldr	r2, [pc, #84]	; (8004124 <HAL_TIM_Base_Start_IT+0xbc>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d111      	bne.n	80040f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d010      	beq.n	8004108 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f042 0201 	orr.w	r2, r2, #1
 80040f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040f6:	e007      	b.n	8004108 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3714      	adds	r7, #20
 800410e:	46bd      	mov	sp, r7
 8004110:	bc80      	pop	{r7}
 8004112:	4770      	bx	lr
 8004114:	40012c00 	.word	0x40012c00
 8004118:	40013400 	.word	0x40013400
 800411c:	40000400 	.word	0x40000400
 8004120:	40000800 	.word	0x40000800
 8004124:	40000c00 	.word	0x40000c00

08004128 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0302 	and.w	r3, r3, #2
 8004148:	2b02      	cmp	r3, #2
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0202 	mvn.w	r2, #2
 8004154:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2201      	movs	r2, #1
 800415a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f9ba 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f9ad 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f9bc 	bl	80044f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0304 	and.w	r3, r3, #4
 800418e:	2b04      	cmp	r3, #4
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b04      	cmp	r3, #4
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0204 	mvn.w	r2, #4
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f990 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f983 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f992 	bl	80044f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0308 	and.w	r3, r3, #8
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d122      	bne.n	800422c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0308 	and.w	r3, r3, #8
 80041f0:	2b08      	cmp	r3, #8
 80041f2:	d11b      	bne.n	800422c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0208 	mvn.w	r2, #8
 80041fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2204      	movs	r2, #4
 8004202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	69db      	ldr	r3, [r3, #28]
 800420a:	f003 0303 	and.w	r3, r3, #3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f966 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 8004218:	e005      	b.n	8004226 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f000 f959 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	f000 f968 	bl	80044f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	f003 0310 	and.w	r3, r3, #16
 8004236:	2b10      	cmp	r3, #16
 8004238:	d122      	bne.n	8004280 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	f003 0310 	and.w	r3, r3, #16
 8004244:	2b10      	cmp	r3, #16
 8004246:	d11b      	bne.n	8004280 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f06f 0210 	mvn.w	r2, #16
 8004250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2208      	movs	r2, #8
 8004256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004262:	2b00      	cmp	r3, #0
 8004264:	d003      	beq.n	800426e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 f93c 	bl	80044e4 <HAL_TIM_IC_CaptureCallback>
 800426c:	e005      	b.n	800427a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f000 f92f 	bl	80044d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 f93e 	bl	80044f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b01      	cmp	r3, #1
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0201 	mvn.w	r2, #1
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f90a 	bl	80044c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	691b      	ldr	r3, [r3, #16]
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d10e      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c4:	2b80      	cmp	r3, #128	; 0x80
 80042c6:	d107      	bne.n	80042d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 faa7 	bl	8004826 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d10e      	bne.n	8004304 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d107      	bne.n	8004304 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f000 f902 	bl	8004508 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b20      	cmp	r3, #32
 8004310:	d10e      	bne.n	8004330 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f003 0320 	and.w	r3, r3, #32
 800431c:	2b20      	cmp	r3, #32
 800431e:	d107      	bne.n	8004330 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0220 	mvn.w	r2, #32
 8004328:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 fa72 	bl	8004814 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004330:	bf00      	nop
 8004332:	3708      	adds	r7, #8
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIM_ConfigClockSource+0x18>
 800434c:	2302      	movs	r3, #2
 800434e:	e0b3      	b.n	80044b8 <HAL_TIM_ConfigClockSource+0x180>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800436e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004376:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004388:	d03e      	beq.n	8004408 <HAL_TIM_ConfigClockSource+0xd0>
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	f200 8087 	bhi.w	80044a0 <HAL_TIM_ConfigClockSource+0x168>
 8004392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004396:	f000 8085 	beq.w	80044a4 <HAL_TIM_ConfigClockSource+0x16c>
 800439a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439e:	d87f      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x168>
 80043a0:	2b70      	cmp	r3, #112	; 0x70
 80043a2:	d01a      	beq.n	80043da <HAL_TIM_ConfigClockSource+0xa2>
 80043a4:	2b70      	cmp	r3, #112	; 0x70
 80043a6:	d87b      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x168>
 80043a8:	2b60      	cmp	r3, #96	; 0x60
 80043aa:	d050      	beq.n	800444e <HAL_TIM_ConfigClockSource+0x116>
 80043ac:	2b60      	cmp	r3, #96	; 0x60
 80043ae:	d877      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x168>
 80043b0:	2b50      	cmp	r3, #80	; 0x50
 80043b2:	d03c      	beq.n	800442e <HAL_TIM_ConfigClockSource+0xf6>
 80043b4:	2b50      	cmp	r3, #80	; 0x50
 80043b6:	d873      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x168>
 80043b8:	2b40      	cmp	r3, #64	; 0x40
 80043ba:	d058      	beq.n	800446e <HAL_TIM_ConfigClockSource+0x136>
 80043bc:	2b40      	cmp	r3, #64	; 0x40
 80043be:	d86f      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x168>
 80043c0:	2b30      	cmp	r3, #48	; 0x30
 80043c2:	d064      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x156>
 80043c4:	2b30      	cmp	r3, #48	; 0x30
 80043c6:	d86b      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x168>
 80043c8:	2b20      	cmp	r3, #32
 80043ca:	d060      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x156>
 80043cc:	2b20      	cmp	r3, #32
 80043ce:	d867      	bhi.n	80044a0 <HAL_TIM_ConfigClockSource+0x168>
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d05c      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x156>
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d05a      	beq.n	800448e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80043d8:	e062      	b.n	80044a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6899      	ldr	r1, [r3, #8]
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	685a      	ldr	r2, [r3, #4]
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f000 f988 	bl	80046fe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	609a      	str	r2, [r3, #8]
      break;
 8004406:	e04e      	b.n	80044a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6818      	ldr	r0, [r3, #0]
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	6899      	ldr	r1, [r3, #8]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f000 f971 	bl	80046fe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689a      	ldr	r2, [r3, #8]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800442a:	609a      	str	r2, [r3, #8]
      break;
 800442c:	e03b      	b.n	80044a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6859      	ldr	r1, [r3, #4]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	461a      	mov	r2, r3
 800443c:	f000 f8e8 	bl	8004610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	2150      	movs	r1, #80	; 0x50
 8004446:	4618      	mov	r0, r3
 8004448:	f000 f93f 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 800444c:	e02b      	b.n	80044a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	461a      	mov	r2, r3
 800445c:	f000 f906 	bl	800466c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2160      	movs	r1, #96	; 0x60
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f92f 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 800446c:	e01b      	b.n	80044a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	6859      	ldr	r1, [r3, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	461a      	mov	r2, r3
 800447c:	f000 f8c8 	bl	8004610 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2140      	movs	r1, #64	; 0x40
 8004486:	4618      	mov	r0, r3
 8004488:	f000 f91f 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 800448c:	e00b      	b.n	80044a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4619      	mov	r1, r3
 8004498:	4610      	mov	r0, r2
 800449a:	f000 f916 	bl	80046ca <TIM_ITRx_SetConfig>
        break;
 800449e:	e002      	b.n	80044a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044a0:	bf00      	nop
 80044a2:	e000      	b.n	80044a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80044a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3710      	adds	r7, #16
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bc80      	pop	{r7}
 80044d0:	4770      	bx	lr

080044d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d2:	b480      	push	{r7}
 80044d4:	b083      	sub	sp, #12
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044da:	bf00      	nop
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bc80      	pop	{r7}
 80044f4:	4770      	bx	lr

080044f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b083      	sub	sp, #12
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044fe:	bf00      	nop
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	bc80      	pop	{r7}
 8004506:	4770      	bx	lr

08004508 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr
	...

0800451c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a33      	ldr	r2, [pc, #204]	; (80045fc <TIM_Base_SetConfig+0xe0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d013      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a32      	ldr	r2, [pc, #200]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00f      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004542:	d00b      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	4a2f      	ldr	r2, [pc, #188]	; (8004604 <TIM_Base_SetConfig+0xe8>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d007      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a2e      	ldr	r2, [pc, #184]	; (8004608 <TIM_Base_SetConfig+0xec>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d003      	beq.n	800455c <TIM_Base_SetConfig+0x40>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a2d      	ldr	r2, [pc, #180]	; (800460c <TIM_Base_SetConfig+0xf0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d108      	bne.n	800456e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004562:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a22      	ldr	r2, [pc, #136]	; (80045fc <TIM_Base_SetConfig+0xe0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d013      	beq.n	800459e <TIM_Base_SetConfig+0x82>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	4a21      	ldr	r2, [pc, #132]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d00f      	beq.n	800459e <TIM_Base_SetConfig+0x82>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004584:	d00b      	beq.n	800459e <TIM_Base_SetConfig+0x82>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4a1e      	ldr	r2, [pc, #120]	; (8004604 <TIM_Base_SetConfig+0xe8>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d007      	beq.n	800459e <TIM_Base_SetConfig+0x82>
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a1d      	ldr	r2, [pc, #116]	; (8004608 <TIM_Base_SetConfig+0xec>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d003      	beq.n	800459e <TIM_Base_SetConfig+0x82>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a1c      	ldr	r2, [pc, #112]	; (800460c <TIM_Base_SetConfig+0xf0>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d108      	bne.n	80045b0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	681a      	ldr	r2, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <TIM_Base_SetConfig+0xe0>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d003      	beq.n	80045e4 <TIM_Base_SetConfig+0xc8>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a08      	ldr	r2, [pc, #32]	; (8004600 <TIM_Base_SetConfig+0xe4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d103      	bne.n	80045ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	691a      	ldr	r2, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	615a      	str	r2, [r3, #20]
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40013400 	.word	0x40013400
 8004604:	40000400 	.word	0x40000400
 8004608:	40000800 	.word	0x40000800
 800460c:	40000c00 	.word	0x40000c00

08004610 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a1b      	ldr	r3, [r3, #32]
 8004626:	f023 0201 	bic.w	r2, r3, #1
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	699b      	ldr	r3, [r3, #24]
 8004632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f023 030a 	bic.w	r3, r3, #10
 800464c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4313      	orrs	r3, r2
 8004654:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	621a      	str	r2, [r3, #32]
}
 8004662:	bf00      	nop
 8004664:	371c      	adds	r7, #28
 8004666:	46bd      	mov	sp, r7
 8004668:	bc80      	pop	{r7}
 800466a:	4770      	bx	lr

0800466c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1b      	ldr	r3, [r3, #32]
 800467c:	f023 0210 	bic.w	r2, r3, #16
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004696:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	031b      	lsls	r3, r3, #12
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	4313      	orrs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	693a      	ldr	r2, [r7, #16]
 80046be:	621a      	str	r2, [r3, #32]
}
 80046c0:	bf00      	nop
 80046c2:	371c      	adds	r7, #28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bc80      	pop	{r7}
 80046c8:	4770      	bx	lr

080046ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f043 0307 	orr.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bc80      	pop	{r7}
 80046fc:	4770      	bx	lr

080046fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046fe:	b480      	push	{r7}
 8004700:	b087      	sub	sp, #28
 8004702:	af00      	add	r7, sp, #0
 8004704:	60f8      	str	r0, [r7, #12]
 8004706:	60b9      	str	r1, [r7, #8]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004718:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	021a      	lsls	r2, r3, #8
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	431a      	orrs	r2, r3
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	4313      	orrs	r3, r2
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	609a      	str	r2, [r3, #8]
}
 8004732:	bf00      	nop
 8004734:	371c      	adds	r7, #28
 8004736:	46bd      	mov	sp, r7
 8004738:	bc80      	pop	{r7}
 800473a:	4770      	bx	lr

0800473c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004750:	2302      	movs	r3, #2
 8004752:	e050      	b.n	80047f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2202      	movs	r2, #2
 8004760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1b      	ldr	r2, [pc, #108]	; (8004800 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d018      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a19      	ldr	r2, [pc, #100]	; (8004804 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d013      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047aa:	d00e      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a15      	ldr	r2, [pc, #84]	; (8004808 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d009      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a14      	ldr	r2, [pc, #80]	; (800480c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d004      	beq.n	80047ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a12      	ldr	r2, [pc, #72]	; (8004810 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d10c      	bne.n	80047e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	68ba      	ldr	r2, [r7, #8]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr
 8004800:	40012c00 	.word	0x40012c00
 8004804:	40013400 	.word	0x40013400
 8004808:	40000400 	.word	0x40000400
 800480c:	40000800 	.word	0x40000800
 8004810:	40000c00 	.word	0x40000c00

08004814 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004826:	b480      	push	{r7}
 8004828:	b083      	sub	sp, #12
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800482e:	bf00      	nop
 8004830:	370c      	adds	r7, #12
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e03f      	b.n	80048ca <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fe f8c4 	bl	80029ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2224      	movs	r2, #36	; 0x24
 8004868:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68da      	ldr	r2, [r3, #12]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800487a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f905 	bl	8004a8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	691a      	ldr	r2, [r3, #16]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004890:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695a      	ldr	r2, [r3, #20]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3708      	adds	r7, #8
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}

080048d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	b08a      	sub	sp, #40	; 0x28
 80048d6:	af02      	add	r7, sp, #8
 80048d8:	60f8      	str	r0, [r7, #12]
 80048da:	60b9      	str	r1, [r7, #8]
 80048dc:	603b      	str	r3, [r7, #0]
 80048de:	4613      	mov	r3, r2
 80048e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b20      	cmp	r3, #32
 80048f0:	d17c      	bne.n	80049ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_UART_Transmit+0x2c>
 80048f8:	88fb      	ldrh	r3, [r7, #6]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e075      	b.n	80049ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_UART_Transmit+0x3e>
 800490c:	2302      	movs	r3, #2
 800490e:	e06e      	b.n	80049ee <HAL_UART_Transmit+0x11c>
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2221      	movs	r2, #33	; 0x21
 8004922:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004926:	f7fe fbdd 	bl	80030e4 <HAL_GetTick>
 800492a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	88fa      	ldrh	r2, [r7, #6]
 8004930:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	88fa      	ldrh	r2, [r7, #6]
 8004936:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004940:	d108      	bne.n	8004954 <HAL_UART_Transmit+0x82>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d104      	bne.n	8004954 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800494a:	2300      	movs	r3, #0
 800494c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	61bb      	str	r3, [r7, #24]
 8004952:	e003      	b.n	800495c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004958:	2300      	movs	r3, #0
 800495a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	2200      	movs	r2, #0
 8004960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004964:	e02a      	b.n	80049bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	2200      	movs	r2, #0
 800496e:	2180      	movs	r1, #128	; 0x80
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f840 	bl	80049f6 <UART_WaitOnFlagUntilTimeout>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d001      	beq.n	8004980 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800497c:	2303      	movs	r3, #3
 800497e:	e036      	b.n	80049ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004980:	69fb      	ldr	r3, [r7, #28]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10b      	bne.n	800499e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	881b      	ldrh	r3, [r3, #0]
 800498a:	461a      	mov	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004994:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	3302      	adds	r3, #2
 800499a:	61bb      	str	r3, [r7, #24]
 800499c:	e007      	b.n	80049ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	781a      	ldrb	r2, [r3, #0]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	3301      	adds	r3, #1
 80049ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1cf      	bne.n	8004966 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2200      	movs	r2, #0
 80049ce:	2140      	movs	r1, #64	; 0x40
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f810 	bl	80049f6 <UART_WaitOnFlagUntilTimeout>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e006      	b.n	80049ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049e8:	2300      	movs	r3, #0
 80049ea:	e000      	b.n	80049ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
  }
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	603b      	str	r3, [r7, #0]
 8004a02:	4613      	mov	r3, r2
 8004a04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a06:	e02c      	b.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a0e:	d028      	beq.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d007      	beq.n	8004a26 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a16:	f7fe fb65 	bl	80030e4 <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d21d      	bcs.n	8004a62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695a      	ldr	r2, [r3, #20]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0201 	bic.w	r2, r2, #1
 8004a44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2220      	movs	r2, #32
 8004a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e00f      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	bf0c      	ite	eq
 8004a72:	2301      	moveq	r3, #1
 8004a74:	2300      	movne	r3, #0
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	461a      	mov	r2, r3
 8004a7a:	79fb      	ldrb	r3, [r7, #7]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d0c3      	beq.n	8004a08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689a      	ldr	r2, [r3, #8]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	695b      	ldr	r3, [r3, #20]
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ac6:	f023 030c 	bic.w	r3, r3, #12
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	6812      	ldr	r2, [r2, #0]
 8004ace:	68b9      	ldr	r1, [r7, #8]
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	695b      	ldr	r3, [r3, #20]
 8004ada:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a2c      	ldr	r2, [pc, #176]	; (8004ba0 <UART_SetConfig+0x114>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d103      	bne.n	8004afc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004af4:	f7ff fa36 	bl	8003f64 <HAL_RCC_GetPCLK2Freq>
 8004af8:	60f8      	str	r0, [r7, #12]
 8004afa:	e002      	b.n	8004b02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004afc:	f7ff fa1e 	bl	8003f3c <HAL_RCC_GetPCLK1Freq>
 8004b00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4613      	mov	r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	4413      	add	r3, r2
 8004b0a:	009a      	lsls	r2, r3, #2
 8004b0c:	441a      	add	r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	095b      	lsrs	r3, r3, #5
 8004b20:	0119      	lsls	r1, r3, #4
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009a      	lsls	r2, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b38:	4b1a      	ldr	r3, [pc, #104]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b3a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	2064      	movs	r0, #100	; 0x64
 8004b42:	fb00 f303 	mul.w	r3, r0, r3
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	011b      	lsls	r3, r3, #4
 8004b4a:	3332      	adds	r3, #50	; 0x32
 8004b4c:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b52:	095b      	lsrs	r3, r3, #5
 8004b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b58:	4419      	add	r1, r3
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009a      	lsls	r2, r3, #2
 8004b64:	441a      	add	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b70:	4b0c      	ldr	r3, [pc, #48]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b72:	fba3 0302 	umull	r0, r3, r3, r2
 8004b76:	095b      	lsrs	r3, r3, #5
 8004b78:	2064      	movs	r0, #100	; 0x64
 8004b7a:	fb00 f303 	mul.w	r3, r0, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	3332      	adds	r3, #50	; 0x32
 8004b84:	4a07      	ldr	r2, [pc, #28]	; (8004ba4 <UART_SetConfig+0x118>)
 8004b86:	fba2 2303 	umull	r2, r3, r2, r3
 8004b8a:	095b      	lsrs	r3, r3, #5
 8004b8c:	f003 020f 	and.w	r2, r3, #15
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	440a      	add	r2, r1
 8004b96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b98:	bf00      	nop
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	40013800 	.word	0x40013800
 8004ba4:	51eb851f 	.word	0x51eb851f

08004ba8 <atof>:
 8004ba8:	2100      	movs	r1, #0
 8004baa:	f000 bf55 	b.w	8005a58 <strtod>

08004bae <atoi>:
 8004bae:	220a      	movs	r2, #10
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	f000 bfd9 	b.w	8005b68 <strtol>
	...

08004bb8 <__errno>:
 8004bb8:	4b01      	ldr	r3, [pc, #4]	; (8004bc0 <__errno+0x8>)
 8004bba:	6818      	ldr	r0, [r3, #0]
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	20000054 	.word	0x20000054

08004bc4 <__libc_init_array>:
 8004bc4:	b570      	push	{r4, r5, r6, lr}
 8004bc6:	2600      	movs	r6, #0
 8004bc8:	4d0c      	ldr	r5, [pc, #48]	; (8004bfc <__libc_init_array+0x38>)
 8004bca:	4c0d      	ldr	r4, [pc, #52]	; (8004c00 <__libc_init_array+0x3c>)
 8004bcc:	1b64      	subs	r4, r4, r5
 8004bce:	10a4      	asrs	r4, r4, #2
 8004bd0:	42a6      	cmp	r6, r4
 8004bd2:	d109      	bne.n	8004be8 <__libc_init_array+0x24>
 8004bd4:	f002 ff48 	bl	8007a68 <_init>
 8004bd8:	2600      	movs	r6, #0
 8004bda:	4d0a      	ldr	r5, [pc, #40]	; (8004c04 <__libc_init_array+0x40>)
 8004bdc:	4c0a      	ldr	r4, [pc, #40]	; (8004c08 <__libc_init_array+0x44>)
 8004bde:	1b64      	subs	r4, r4, r5
 8004be0:	10a4      	asrs	r4, r4, #2
 8004be2:	42a6      	cmp	r6, r4
 8004be4:	d105      	bne.n	8004bf2 <__libc_init_array+0x2e>
 8004be6:	bd70      	pop	{r4, r5, r6, pc}
 8004be8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bec:	4798      	blx	r3
 8004bee:	3601      	adds	r6, #1
 8004bf0:	e7ee      	b.n	8004bd0 <__libc_init_array+0xc>
 8004bf2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf6:	4798      	blx	r3
 8004bf8:	3601      	adds	r6, #1
 8004bfa:	e7f2      	b.n	8004be2 <__libc_init_array+0x1e>
 8004bfc:	0800815c 	.word	0x0800815c
 8004c00:	0800815c 	.word	0x0800815c
 8004c04:	0800815c 	.word	0x0800815c
 8004c08:	08008160 	.word	0x08008160

08004c0c <malloc>:
 8004c0c:	4b02      	ldr	r3, [pc, #8]	; (8004c18 <malloc+0xc>)
 8004c0e:	4601      	mov	r1, r0
 8004c10:	6818      	ldr	r0, [r3, #0]
 8004c12:	f000 b889 	b.w	8004d28 <_malloc_r>
 8004c16:	bf00      	nop
 8004c18:	20000054 	.word	0x20000054

08004c1c <free>:
 8004c1c:	4b02      	ldr	r3, [pc, #8]	; (8004c28 <free+0xc>)
 8004c1e:	4601      	mov	r1, r0
 8004c20:	6818      	ldr	r0, [r3, #0]
 8004c22:	f000 b819 	b.w	8004c58 <_free_r>
 8004c26:	bf00      	nop
 8004c28:	20000054 	.word	0x20000054

08004c2c <memcpy>:
 8004c2c:	440a      	add	r2, r1
 8004c2e:	4291      	cmp	r1, r2
 8004c30:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c34:	d100      	bne.n	8004c38 <memcpy+0xc>
 8004c36:	4770      	bx	lr
 8004c38:	b510      	push	{r4, lr}
 8004c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c3e:	4291      	cmp	r1, r2
 8004c40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c44:	d1f9      	bne.n	8004c3a <memcpy+0xe>
 8004c46:	bd10      	pop	{r4, pc}

08004c48 <memset>:
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4402      	add	r2, r0
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d100      	bne.n	8004c52 <memset+0xa>
 8004c50:	4770      	bx	lr
 8004c52:	f803 1b01 	strb.w	r1, [r3], #1
 8004c56:	e7f9      	b.n	8004c4c <memset+0x4>

08004c58 <_free_r>:
 8004c58:	b538      	push	{r3, r4, r5, lr}
 8004c5a:	4605      	mov	r5, r0
 8004c5c:	2900      	cmp	r1, #0
 8004c5e:	d040      	beq.n	8004ce2 <_free_r+0x8a>
 8004c60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c64:	1f0c      	subs	r4, r1, #4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	bfb8      	it	lt
 8004c6a:	18e4      	addlt	r4, r4, r3
 8004c6c:	f001 fafe 	bl	800626c <__malloc_lock>
 8004c70:	4a1c      	ldr	r2, [pc, #112]	; (8004ce4 <_free_r+0x8c>)
 8004c72:	6813      	ldr	r3, [r2, #0]
 8004c74:	b933      	cbnz	r3, 8004c84 <_free_r+0x2c>
 8004c76:	6063      	str	r3, [r4, #4]
 8004c78:	6014      	str	r4, [r2, #0]
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c80:	f001 bafa 	b.w	8006278 <__malloc_unlock>
 8004c84:	42a3      	cmp	r3, r4
 8004c86:	d908      	bls.n	8004c9a <_free_r+0x42>
 8004c88:	6820      	ldr	r0, [r4, #0]
 8004c8a:	1821      	adds	r1, r4, r0
 8004c8c:	428b      	cmp	r3, r1
 8004c8e:	bf01      	itttt	eq
 8004c90:	6819      	ldreq	r1, [r3, #0]
 8004c92:	685b      	ldreq	r3, [r3, #4]
 8004c94:	1809      	addeq	r1, r1, r0
 8004c96:	6021      	streq	r1, [r4, #0]
 8004c98:	e7ed      	b.n	8004c76 <_free_r+0x1e>
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	b10b      	cbz	r3, 8004ca4 <_free_r+0x4c>
 8004ca0:	42a3      	cmp	r3, r4
 8004ca2:	d9fa      	bls.n	8004c9a <_free_r+0x42>
 8004ca4:	6811      	ldr	r1, [r2, #0]
 8004ca6:	1850      	adds	r0, r2, r1
 8004ca8:	42a0      	cmp	r0, r4
 8004caa:	d10b      	bne.n	8004cc4 <_free_r+0x6c>
 8004cac:	6820      	ldr	r0, [r4, #0]
 8004cae:	4401      	add	r1, r0
 8004cb0:	1850      	adds	r0, r2, r1
 8004cb2:	4283      	cmp	r3, r0
 8004cb4:	6011      	str	r1, [r2, #0]
 8004cb6:	d1e0      	bne.n	8004c7a <_free_r+0x22>
 8004cb8:	6818      	ldr	r0, [r3, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	4401      	add	r1, r0
 8004cbe:	6011      	str	r1, [r2, #0]
 8004cc0:	6053      	str	r3, [r2, #4]
 8004cc2:	e7da      	b.n	8004c7a <_free_r+0x22>
 8004cc4:	d902      	bls.n	8004ccc <_free_r+0x74>
 8004cc6:	230c      	movs	r3, #12
 8004cc8:	602b      	str	r3, [r5, #0]
 8004cca:	e7d6      	b.n	8004c7a <_free_r+0x22>
 8004ccc:	6820      	ldr	r0, [r4, #0]
 8004cce:	1821      	adds	r1, r4, r0
 8004cd0:	428b      	cmp	r3, r1
 8004cd2:	bf01      	itttt	eq
 8004cd4:	6819      	ldreq	r1, [r3, #0]
 8004cd6:	685b      	ldreq	r3, [r3, #4]
 8004cd8:	1809      	addeq	r1, r1, r0
 8004cda:	6021      	streq	r1, [r4, #0]
 8004cdc:	6063      	str	r3, [r4, #4]
 8004cde:	6054      	str	r4, [r2, #4]
 8004ce0:	e7cb      	b.n	8004c7a <_free_r+0x22>
 8004ce2:	bd38      	pop	{r3, r4, r5, pc}
 8004ce4:	20000e7c 	.word	0x20000e7c

08004ce8 <sbrk_aligned>:
 8004ce8:	b570      	push	{r4, r5, r6, lr}
 8004cea:	4e0e      	ldr	r6, [pc, #56]	; (8004d24 <sbrk_aligned+0x3c>)
 8004cec:	460c      	mov	r4, r1
 8004cee:	6831      	ldr	r1, [r6, #0]
 8004cf0:	4605      	mov	r5, r0
 8004cf2:	b911      	cbnz	r1, 8004cfa <sbrk_aligned+0x12>
 8004cf4:	f000 f88c 	bl	8004e10 <_sbrk_r>
 8004cf8:	6030      	str	r0, [r6, #0]
 8004cfa:	4621      	mov	r1, r4
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	f000 f887 	bl	8004e10 <_sbrk_r>
 8004d02:	1c43      	adds	r3, r0, #1
 8004d04:	d00a      	beq.n	8004d1c <sbrk_aligned+0x34>
 8004d06:	1cc4      	adds	r4, r0, #3
 8004d08:	f024 0403 	bic.w	r4, r4, #3
 8004d0c:	42a0      	cmp	r0, r4
 8004d0e:	d007      	beq.n	8004d20 <sbrk_aligned+0x38>
 8004d10:	1a21      	subs	r1, r4, r0
 8004d12:	4628      	mov	r0, r5
 8004d14:	f000 f87c 	bl	8004e10 <_sbrk_r>
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d101      	bne.n	8004d20 <sbrk_aligned+0x38>
 8004d1c:	f04f 34ff 	mov.w	r4, #4294967295
 8004d20:	4620      	mov	r0, r4
 8004d22:	bd70      	pop	{r4, r5, r6, pc}
 8004d24:	20000e80 	.word	0x20000e80

08004d28 <_malloc_r>:
 8004d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2c:	1ccd      	adds	r5, r1, #3
 8004d2e:	f025 0503 	bic.w	r5, r5, #3
 8004d32:	3508      	adds	r5, #8
 8004d34:	2d0c      	cmp	r5, #12
 8004d36:	bf38      	it	cc
 8004d38:	250c      	movcc	r5, #12
 8004d3a:	2d00      	cmp	r5, #0
 8004d3c:	4607      	mov	r7, r0
 8004d3e:	db01      	blt.n	8004d44 <_malloc_r+0x1c>
 8004d40:	42a9      	cmp	r1, r5
 8004d42:	d905      	bls.n	8004d50 <_malloc_r+0x28>
 8004d44:	230c      	movs	r3, #12
 8004d46:	2600      	movs	r6, #0
 8004d48:	603b      	str	r3, [r7, #0]
 8004d4a:	4630      	mov	r0, r6
 8004d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d50:	4e2e      	ldr	r6, [pc, #184]	; (8004e0c <_malloc_r+0xe4>)
 8004d52:	f001 fa8b 	bl	800626c <__malloc_lock>
 8004d56:	6833      	ldr	r3, [r6, #0]
 8004d58:	461c      	mov	r4, r3
 8004d5a:	bb34      	cbnz	r4, 8004daa <_malloc_r+0x82>
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	4638      	mov	r0, r7
 8004d60:	f7ff ffc2 	bl	8004ce8 <sbrk_aligned>
 8004d64:	1c43      	adds	r3, r0, #1
 8004d66:	4604      	mov	r4, r0
 8004d68:	d14d      	bne.n	8004e06 <_malloc_r+0xde>
 8004d6a:	6834      	ldr	r4, [r6, #0]
 8004d6c:	4626      	mov	r6, r4
 8004d6e:	2e00      	cmp	r6, #0
 8004d70:	d140      	bne.n	8004df4 <_malloc_r+0xcc>
 8004d72:	6823      	ldr	r3, [r4, #0]
 8004d74:	4631      	mov	r1, r6
 8004d76:	4638      	mov	r0, r7
 8004d78:	eb04 0803 	add.w	r8, r4, r3
 8004d7c:	f000 f848 	bl	8004e10 <_sbrk_r>
 8004d80:	4580      	cmp	r8, r0
 8004d82:	d13a      	bne.n	8004dfa <_malloc_r+0xd2>
 8004d84:	6821      	ldr	r1, [r4, #0]
 8004d86:	3503      	adds	r5, #3
 8004d88:	1a6d      	subs	r5, r5, r1
 8004d8a:	f025 0503 	bic.w	r5, r5, #3
 8004d8e:	3508      	adds	r5, #8
 8004d90:	2d0c      	cmp	r5, #12
 8004d92:	bf38      	it	cc
 8004d94:	250c      	movcc	r5, #12
 8004d96:	4638      	mov	r0, r7
 8004d98:	4629      	mov	r1, r5
 8004d9a:	f7ff ffa5 	bl	8004ce8 <sbrk_aligned>
 8004d9e:	3001      	adds	r0, #1
 8004da0:	d02b      	beq.n	8004dfa <_malloc_r+0xd2>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	442b      	add	r3, r5
 8004da6:	6023      	str	r3, [r4, #0]
 8004da8:	e00e      	b.n	8004dc8 <_malloc_r+0xa0>
 8004daa:	6822      	ldr	r2, [r4, #0]
 8004dac:	1b52      	subs	r2, r2, r5
 8004dae:	d41e      	bmi.n	8004dee <_malloc_r+0xc6>
 8004db0:	2a0b      	cmp	r2, #11
 8004db2:	d916      	bls.n	8004de2 <_malloc_r+0xba>
 8004db4:	1961      	adds	r1, r4, r5
 8004db6:	42a3      	cmp	r3, r4
 8004db8:	6025      	str	r5, [r4, #0]
 8004dba:	bf18      	it	ne
 8004dbc:	6059      	strne	r1, [r3, #4]
 8004dbe:	6863      	ldr	r3, [r4, #4]
 8004dc0:	bf08      	it	eq
 8004dc2:	6031      	streq	r1, [r6, #0]
 8004dc4:	5162      	str	r2, [r4, r5]
 8004dc6:	604b      	str	r3, [r1, #4]
 8004dc8:	4638      	mov	r0, r7
 8004dca:	f104 060b 	add.w	r6, r4, #11
 8004dce:	f001 fa53 	bl	8006278 <__malloc_unlock>
 8004dd2:	f026 0607 	bic.w	r6, r6, #7
 8004dd6:	1d23      	adds	r3, r4, #4
 8004dd8:	1af2      	subs	r2, r6, r3
 8004dda:	d0b6      	beq.n	8004d4a <_malloc_r+0x22>
 8004ddc:	1b9b      	subs	r3, r3, r6
 8004dde:	50a3      	str	r3, [r4, r2]
 8004de0:	e7b3      	b.n	8004d4a <_malloc_r+0x22>
 8004de2:	6862      	ldr	r2, [r4, #4]
 8004de4:	42a3      	cmp	r3, r4
 8004de6:	bf0c      	ite	eq
 8004de8:	6032      	streq	r2, [r6, #0]
 8004dea:	605a      	strne	r2, [r3, #4]
 8004dec:	e7ec      	b.n	8004dc8 <_malloc_r+0xa0>
 8004dee:	4623      	mov	r3, r4
 8004df0:	6864      	ldr	r4, [r4, #4]
 8004df2:	e7b2      	b.n	8004d5a <_malloc_r+0x32>
 8004df4:	4634      	mov	r4, r6
 8004df6:	6876      	ldr	r6, [r6, #4]
 8004df8:	e7b9      	b.n	8004d6e <_malloc_r+0x46>
 8004dfa:	230c      	movs	r3, #12
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	f001 fa3a 	bl	8006278 <__malloc_unlock>
 8004e04:	e7a1      	b.n	8004d4a <_malloc_r+0x22>
 8004e06:	6025      	str	r5, [r4, #0]
 8004e08:	e7de      	b.n	8004dc8 <_malloc_r+0xa0>
 8004e0a:	bf00      	nop
 8004e0c:	20000e7c 	.word	0x20000e7c

08004e10 <_sbrk_r>:
 8004e10:	b538      	push	{r3, r4, r5, lr}
 8004e12:	2300      	movs	r3, #0
 8004e14:	4d05      	ldr	r5, [pc, #20]	; (8004e2c <_sbrk_r+0x1c>)
 8004e16:	4604      	mov	r4, r0
 8004e18:	4608      	mov	r0, r1
 8004e1a:	602b      	str	r3, [r5, #0]
 8004e1c:	f7fe f8a8 	bl	8002f70 <_sbrk>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d102      	bne.n	8004e2a <_sbrk_r+0x1a>
 8004e24:	682b      	ldr	r3, [r5, #0]
 8004e26:	b103      	cbz	r3, 8004e2a <_sbrk_r+0x1a>
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	bd38      	pop	{r3, r4, r5, pc}
 8004e2c:	20000e84 	.word	0x20000e84

08004e30 <strcpy>:
 8004e30:	4603      	mov	r3, r0
 8004e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e36:	f803 2b01 	strb.w	r2, [r3], #1
 8004e3a:	2a00      	cmp	r2, #0
 8004e3c:	d1f9      	bne.n	8004e32 <strcpy+0x2>
 8004e3e:	4770      	bx	lr

08004e40 <sulp>:
 8004e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e44:	460f      	mov	r7, r1
 8004e46:	4690      	mov	r8, r2
 8004e48:	f001 fd8c 	bl	8006964 <__ulp>
 8004e4c:	4604      	mov	r4, r0
 8004e4e:	460d      	mov	r5, r1
 8004e50:	f1b8 0f00 	cmp.w	r8, #0
 8004e54:	d011      	beq.n	8004e7a <sulp+0x3a>
 8004e56:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004e5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	dd0b      	ble.n	8004e7a <sulp+0x3a>
 8004e62:	2400      	movs	r4, #0
 8004e64:	051b      	lsls	r3, r3, #20
 8004e66:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8004e6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004e6e:	4622      	mov	r2, r4
 8004e70:	462b      	mov	r3, r5
 8004e72:	f7fb fba7 	bl	80005c4 <__aeabi_dmul>
 8004e76:	4604      	mov	r4, r0
 8004e78:	460d      	mov	r5, r1
 8004e7a:	4620      	mov	r0, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e82:	0000      	movs	r0, r0
 8004e84:	0000      	movs	r0, r0
	...

08004e88 <_strtod_l>:
 8004e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8c:	469b      	mov	fp, r3
 8004e8e:	2300      	movs	r3, #0
 8004e90:	b09f      	sub	sp, #124	; 0x7c
 8004e92:	931a      	str	r3, [sp, #104]	; 0x68
 8004e94:	4b9e      	ldr	r3, [pc, #632]	; (8005110 <_strtod_l+0x288>)
 8004e96:	4682      	mov	sl, r0
 8004e98:	681f      	ldr	r7, [r3, #0]
 8004e9a:	460e      	mov	r6, r1
 8004e9c:	4638      	mov	r0, r7
 8004e9e:	9215      	str	r2, [sp, #84]	; 0x54
 8004ea0:	f7fb f9cc 	bl	800023c <strlen>
 8004ea4:	f04f 0800 	mov.w	r8, #0
 8004ea8:	4604      	mov	r4, r0
 8004eaa:	f04f 0900 	mov.w	r9, #0
 8004eae:	9619      	str	r6, [sp, #100]	; 0x64
 8004eb0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004eb2:	781a      	ldrb	r2, [r3, #0]
 8004eb4:	2a2b      	cmp	r2, #43	; 0x2b
 8004eb6:	d04c      	beq.n	8004f52 <_strtod_l+0xca>
 8004eb8:	d83a      	bhi.n	8004f30 <_strtod_l+0xa8>
 8004eba:	2a0d      	cmp	r2, #13
 8004ebc:	d833      	bhi.n	8004f26 <_strtod_l+0x9e>
 8004ebe:	2a08      	cmp	r2, #8
 8004ec0:	d833      	bhi.n	8004f2a <_strtod_l+0xa2>
 8004ec2:	2a00      	cmp	r2, #0
 8004ec4:	d03d      	beq.n	8004f42 <_strtod_l+0xba>
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	930a      	str	r3, [sp, #40]	; 0x28
 8004eca:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8004ecc:	782b      	ldrb	r3, [r5, #0]
 8004ece:	2b30      	cmp	r3, #48	; 0x30
 8004ed0:	f040 80aa 	bne.w	8005028 <_strtod_l+0x1a0>
 8004ed4:	786b      	ldrb	r3, [r5, #1]
 8004ed6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004eda:	2b58      	cmp	r3, #88	; 0x58
 8004edc:	d166      	bne.n	8004fac <_strtod_l+0x124>
 8004ede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ee0:	4650      	mov	r0, sl
 8004ee2:	9301      	str	r3, [sp, #4]
 8004ee4:	ab1a      	add	r3, sp, #104	; 0x68
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	4a8a      	ldr	r2, [pc, #552]	; (8005114 <_strtod_l+0x28c>)
 8004eea:	f8cd b008 	str.w	fp, [sp, #8]
 8004eee:	ab1b      	add	r3, sp, #108	; 0x6c
 8004ef0:	a919      	add	r1, sp, #100	; 0x64
 8004ef2:	f000 feab 	bl	8005c4c <__gethex>
 8004ef6:	f010 0607 	ands.w	r6, r0, #7
 8004efa:	4604      	mov	r4, r0
 8004efc:	d005      	beq.n	8004f0a <_strtod_l+0x82>
 8004efe:	2e06      	cmp	r6, #6
 8004f00:	d129      	bne.n	8004f56 <_strtod_l+0xce>
 8004f02:	2300      	movs	r3, #0
 8004f04:	3501      	adds	r5, #1
 8004f06:	9519      	str	r5, [sp, #100]	; 0x64
 8004f08:	930a      	str	r3, [sp, #40]	; 0x28
 8004f0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f040 858a 	bne.w	8005a26 <_strtod_l+0xb9e>
 8004f12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f14:	b1d3      	cbz	r3, 8004f4c <_strtod_l+0xc4>
 8004f16:	4642      	mov	r2, r8
 8004f18:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004f1c:	4610      	mov	r0, r2
 8004f1e:	4619      	mov	r1, r3
 8004f20:	b01f      	add	sp, #124	; 0x7c
 8004f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f26:	2a20      	cmp	r2, #32
 8004f28:	d1cd      	bne.n	8004ec6 <_strtod_l+0x3e>
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	9319      	str	r3, [sp, #100]	; 0x64
 8004f2e:	e7bf      	b.n	8004eb0 <_strtod_l+0x28>
 8004f30:	2a2d      	cmp	r2, #45	; 0x2d
 8004f32:	d1c8      	bne.n	8004ec6 <_strtod_l+0x3e>
 8004f34:	2201      	movs	r2, #1
 8004f36:	920a      	str	r2, [sp, #40]	; 0x28
 8004f38:	1c5a      	adds	r2, r3, #1
 8004f3a:	9219      	str	r2, [sp, #100]	; 0x64
 8004f3c:	785b      	ldrb	r3, [r3, #1]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1c3      	bne.n	8004eca <_strtod_l+0x42>
 8004f42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004f44:	9619      	str	r6, [sp, #100]	; 0x64
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f040 856b 	bne.w	8005a22 <_strtod_l+0xb9a>
 8004f4c:	4642      	mov	r2, r8
 8004f4e:	464b      	mov	r3, r9
 8004f50:	e7e4      	b.n	8004f1c <_strtod_l+0x94>
 8004f52:	2200      	movs	r2, #0
 8004f54:	e7ef      	b.n	8004f36 <_strtod_l+0xae>
 8004f56:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004f58:	b13a      	cbz	r2, 8004f6a <_strtod_l+0xe2>
 8004f5a:	2135      	movs	r1, #53	; 0x35
 8004f5c:	a81c      	add	r0, sp, #112	; 0x70
 8004f5e:	f001 fe05 	bl	8006b6c <__copybits>
 8004f62:	4650      	mov	r0, sl
 8004f64:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004f66:	f001 f9cd 	bl	8006304 <_Bfree>
 8004f6a:	3e01      	subs	r6, #1
 8004f6c:	2e04      	cmp	r6, #4
 8004f6e:	d806      	bhi.n	8004f7e <_strtod_l+0xf6>
 8004f70:	e8df f006 	tbb	[pc, r6]
 8004f74:	1714030a 	.word	0x1714030a
 8004f78:	0a          	.byte	0x0a
 8004f79:	00          	.byte	0x00
 8004f7a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8004f7e:	0721      	lsls	r1, r4, #28
 8004f80:	d5c3      	bpl.n	8004f0a <_strtod_l+0x82>
 8004f82:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004f86:	e7c0      	b.n	8004f0a <_strtod_l+0x82>
 8004f88:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004f8a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8004f8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004f92:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004f96:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8004f9a:	e7f0      	b.n	8004f7e <_strtod_l+0xf6>
 8004f9c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8005118 <_strtod_l+0x290>
 8004fa0:	e7ed      	b.n	8004f7e <_strtod_l+0xf6>
 8004fa2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004fa6:	f04f 38ff 	mov.w	r8, #4294967295
 8004faa:	e7e8      	b.n	8004f7e <_strtod_l+0xf6>
 8004fac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fae:	1c5a      	adds	r2, r3, #1
 8004fb0:	9219      	str	r2, [sp, #100]	; 0x64
 8004fb2:	785b      	ldrb	r3, [r3, #1]
 8004fb4:	2b30      	cmp	r3, #48	; 0x30
 8004fb6:	d0f9      	beq.n	8004fac <_strtod_l+0x124>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0a6      	beq.n	8004f0a <_strtod_l+0x82>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	9307      	str	r3, [sp, #28]
 8004fc0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004fc2:	220a      	movs	r2, #10
 8004fc4:	9308      	str	r3, [sp, #32]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	469b      	mov	fp, r3
 8004fca:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004fce:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004fd0:	7805      	ldrb	r5, [r0, #0]
 8004fd2:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004fd6:	b2d9      	uxtb	r1, r3
 8004fd8:	2909      	cmp	r1, #9
 8004fda:	d927      	bls.n	800502c <_strtod_l+0x1a4>
 8004fdc:	4622      	mov	r2, r4
 8004fde:	4639      	mov	r1, r7
 8004fe0:	f001 fe22 	bl	8006c28 <strncmp>
 8004fe4:	2800      	cmp	r0, #0
 8004fe6:	d033      	beq.n	8005050 <_strtod_l+0x1c8>
 8004fe8:	2000      	movs	r0, #0
 8004fea:	462a      	mov	r2, r5
 8004fec:	465c      	mov	r4, fp
 8004fee:	4603      	mov	r3, r0
 8004ff0:	9004      	str	r0, [sp, #16]
 8004ff2:	2a65      	cmp	r2, #101	; 0x65
 8004ff4:	d001      	beq.n	8004ffa <_strtod_l+0x172>
 8004ff6:	2a45      	cmp	r2, #69	; 0x45
 8004ff8:	d114      	bne.n	8005024 <_strtod_l+0x19c>
 8004ffa:	b91c      	cbnz	r4, 8005004 <_strtod_l+0x17c>
 8004ffc:	9a07      	ldr	r2, [sp, #28]
 8004ffe:	4302      	orrs	r2, r0
 8005000:	d09f      	beq.n	8004f42 <_strtod_l+0xba>
 8005002:	2400      	movs	r4, #0
 8005004:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005006:	1c72      	adds	r2, r6, #1
 8005008:	9219      	str	r2, [sp, #100]	; 0x64
 800500a:	7872      	ldrb	r2, [r6, #1]
 800500c:	2a2b      	cmp	r2, #43	; 0x2b
 800500e:	d079      	beq.n	8005104 <_strtod_l+0x27c>
 8005010:	2a2d      	cmp	r2, #45	; 0x2d
 8005012:	f000 8083 	beq.w	800511c <_strtod_l+0x294>
 8005016:	2700      	movs	r7, #0
 8005018:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800501c:	2909      	cmp	r1, #9
 800501e:	f240 8083 	bls.w	8005128 <_strtod_l+0x2a0>
 8005022:	9619      	str	r6, [sp, #100]	; 0x64
 8005024:	2500      	movs	r5, #0
 8005026:	e09f      	b.n	8005168 <_strtod_l+0x2e0>
 8005028:	2300      	movs	r3, #0
 800502a:	e7c8      	b.n	8004fbe <_strtod_l+0x136>
 800502c:	f1bb 0f08 	cmp.w	fp, #8
 8005030:	bfd5      	itete	le
 8005032:	9906      	ldrle	r1, [sp, #24]
 8005034:	9905      	ldrgt	r1, [sp, #20]
 8005036:	fb02 3301 	mlale	r3, r2, r1, r3
 800503a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800503e:	f100 0001 	add.w	r0, r0, #1
 8005042:	bfd4      	ite	le
 8005044:	9306      	strle	r3, [sp, #24]
 8005046:	9305      	strgt	r3, [sp, #20]
 8005048:	f10b 0b01 	add.w	fp, fp, #1
 800504c:	9019      	str	r0, [sp, #100]	; 0x64
 800504e:	e7be      	b.n	8004fce <_strtod_l+0x146>
 8005050:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005052:	191a      	adds	r2, r3, r4
 8005054:	9219      	str	r2, [sp, #100]	; 0x64
 8005056:	5d1a      	ldrb	r2, [r3, r4]
 8005058:	f1bb 0f00 	cmp.w	fp, #0
 800505c:	d036      	beq.n	80050cc <_strtod_l+0x244>
 800505e:	465c      	mov	r4, fp
 8005060:	9004      	str	r0, [sp, #16]
 8005062:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005066:	2b09      	cmp	r3, #9
 8005068:	d912      	bls.n	8005090 <_strtod_l+0x208>
 800506a:	2301      	movs	r3, #1
 800506c:	e7c1      	b.n	8004ff2 <_strtod_l+0x16a>
 800506e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005070:	3001      	adds	r0, #1
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	9219      	str	r2, [sp, #100]	; 0x64
 8005076:	785a      	ldrb	r2, [r3, #1]
 8005078:	2a30      	cmp	r2, #48	; 0x30
 800507a:	d0f8      	beq.n	800506e <_strtod_l+0x1e6>
 800507c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005080:	2b08      	cmp	r3, #8
 8005082:	f200 84d5 	bhi.w	8005a30 <_strtod_l+0xba8>
 8005086:	9004      	str	r0, [sp, #16]
 8005088:	2000      	movs	r0, #0
 800508a:	4604      	mov	r4, r0
 800508c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800508e:	9308      	str	r3, [sp, #32]
 8005090:	3a30      	subs	r2, #48	; 0x30
 8005092:	f100 0301 	add.w	r3, r0, #1
 8005096:	d013      	beq.n	80050c0 <_strtod_l+0x238>
 8005098:	9904      	ldr	r1, [sp, #16]
 800509a:	1905      	adds	r5, r0, r4
 800509c:	4419      	add	r1, r3
 800509e:	9104      	str	r1, [sp, #16]
 80050a0:	4623      	mov	r3, r4
 80050a2:	210a      	movs	r1, #10
 80050a4:	42ab      	cmp	r3, r5
 80050a6:	d113      	bne.n	80050d0 <_strtod_l+0x248>
 80050a8:	1823      	adds	r3, r4, r0
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	f104 0401 	add.w	r4, r4, #1
 80050b0:	4404      	add	r4, r0
 80050b2:	dc1b      	bgt.n	80050ec <_strtod_l+0x264>
 80050b4:	230a      	movs	r3, #10
 80050b6:	9906      	ldr	r1, [sp, #24]
 80050b8:	fb03 2301 	mla	r3, r3, r1, r2
 80050bc:	9306      	str	r3, [sp, #24]
 80050be:	2300      	movs	r3, #0
 80050c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80050c2:	4618      	mov	r0, r3
 80050c4:	1c51      	adds	r1, r2, #1
 80050c6:	9119      	str	r1, [sp, #100]	; 0x64
 80050c8:	7852      	ldrb	r2, [r2, #1]
 80050ca:	e7ca      	b.n	8005062 <_strtod_l+0x1da>
 80050cc:	4658      	mov	r0, fp
 80050ce:	e7d3      	b.n	8005078 <_strtod_l+0x1f0>
 80050d0:	2b08      	cmp	r3, #8
 80050d2:	dc04      	bgt.n	80050de <_strtod_l+0x256>
 80050d4:	9f06      	ldr	r7, [sp, #24]
 80050d6:	434f      	muls	r7, r1
 80050d8:	9706      	str	r7, [sp, #24]
 80050da:	3301      	adds	r3, #1
 80050dc:	e7e2      	b.n	80050a4 <_strtod_l+0x21c>
 80050de:	1c5f      	adds	r7, r3, #1
 80050e0:	2f10      	cmp	r7, #16
 80050e2:	bfde      	ittt	le
 80050e4:	9f05      	ldrle	r7, [sp, #20]
 80050e6:	434f      	mulle	r7, r1
 80050e8:	9705      	strle	r7, [sp, #20]
 80050ea:	e7f6      	b.n	80050da <_strtod_l+0x252>
 80050ec:	2c10      	cmp	r4, #16
 80050ee:	bfdf      	itttt	le
 80050f0:	230a      	movle	r3, #10
 80050f2:	9905      	ldrle	r1, [sp, #20]
 80050f4:	fb03 2301 	mlale	r3, r3, r1, r2
 80050f8:	9305      	strle	r3, [sp, #20]
 80050fa:	e7e0      	b.n	80050be <_strtod_l+0x236>
 80050fc:	2300      	movs	r3, #0
 80050fe:	9304      	str	r3, [sp, #16]
 8005100:	2301      	movs	r3, #1
 8005102:	e77b      	b.n	8004ffc <_strtod_l+0x174>
 8005104:	2700      	movs	r7, #0
 8005106:	1cb2      	adds	r2, r6, #2
 8005108:	9219      	str	r2, [sp, #100]	; 0x64
 800510a:	78b2      	ldrb	r2, [r6, #2]
 800510c:	e784      	b.n	8005018 <_strtod_l+0x190>
 800510e:	bf00      	nop
 8005110:	08007f08 	.word	0x08007f08
 8005114:	08007d40 	.word	0x08007d40
 8005118:	7ff00000 	.word	0x7ff00000
 800511c:	2701      	movs	r7, #1
 800511e:	e7f2      	b.n	8005106 <_strtod_l+0x27e>
 8005120:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005122:	1c51      	adds	r1, r2, #1
 8005124:	9119      	str	r1, [sp, #100]	; 0x64
 8005126:	7852      	ldrb	r2, [r2, #1]
 8005128:	2a30      	cmp	r2, #48	; 0x30
 800512a:	d0f9      	beq.n	8005120 <_strtod_l+0x298>
 800512c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005130:	2908      	cmp	r1, #8
 8005132:	f63f af77 	bhi.w	8005024 <_strtod_l+0x19c>
 8005136:	f04f 0e0a 	mov.w	lr, #10
 800513a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800513e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005140:	9209      	str	r2, [sp, #36]	; 0x24
 8005142:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005144:	1c51      	adds	r1, r2, #1
 8005146:	9119      	str	r1, [sp, #100]	; 0x64
 8005148:	7852      	ldrb	r2, [r2, #1]
 800514a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800514e:	2d09      	cmp	r5, #9
 8005150:	d935      	bls.n	80051be <_strtod_l+0x336>
 8005152:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005154:	1b49      	subs	r1, r1, r5
 8005156:	2908      	cmp	r1, #8
 8005158:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800515c:	dc02      	bgt.n	8005164 <_strtod_l+0x2dc>
 800515e:	4565      	cmp	r5, ip
 8005160:	bfa8      	it	ge
 8005162:	4665      	movge	r5, ip
 8005164:	b107      	cbz	r7, 8005168 <_strtod_l+0x2e0>
 8005166:	426d      	negs	r5, r5
 8005168:	2c00      	cmp	r4, #0
 800516a:	d14c      	bne.n	8005206 <_strtod_l+0x37e>
 800516c:	9907      	ldr	r1, [sp, #28]
 800516e:	4301      	orrs	r1, r0
 8005170:	f47f aecb 	bne.w	8004f0a <_strtod_l+0x82>
 8005174:	2b00      	cmp	r3, #0
 8005176:	f47f aee4 	bne.w	8004f42 <_strtod_l+0xba>
 800517a:	2a69      	cmp	r2, #105	; 0x69
 800517c:	d026      	beq.n	80051cc <_strtod_l+0x344>
 800517e:	dc23      	bgt.n	80051c8 <_strtod_l+0x340>
 8005180:	2a49      	cmp	r2, #73	; 0x49
 8005182:	d023      	beq.n	80051cc <_strtod_l+0x344>
 8005184:	2a4e      	cmp	r2, #78	; 0x4e
 8005186:	f47f aedc 	bne.w	8004f42 <_strtod_l+0xba>
 800518a:	499d      	ldr	r1, [pc, #628]	; (8005400 <_strtod_l+0x578>)
 800518c:	a819      	add	r0, sp, #100	; 0x64
 800518e:	f000 ffab 	bl	80060e8 <__match>
 8005192:	2800      	cmp	r0, #0
 8005194:	f43f aed5 	beq.w	8004f42 <_strtod_l+0xba>
 8005198:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	2b28      	cmp	r3, #40	; 0x28
 800519e:	d12c      	bne.n	80051fa <_strtod_l+0x372>
 80051a0:	4998      	ldr	r1, [pc, #608]	; (8005404 <_strtod_l+0x57c>)
 80051a2:	aa1c      	add	r2, sp, #112	; 0x70
 80051a4:	a819      	add	r0, sp, #100	; 0x64
 80051a6:	f000 ffb3 	bl	8006110 <__hexnan>
 80051aa:	2805      	cmp	r0, #5
 80051ac:	d125      	bne.n	80051fa <_strtod_l+0x372>
 80051ae:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80051b0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80051b4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80051b8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80051bc:	e6a5      	b.n	8004f0a <_strtod_l+0x82>
 80051be:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80051c2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80051c6:	e7bc      	b.n	8005142 <_strtod_l+0x2ba>
 80051c8:	2a6e      	cmp	r2, #110	; 0x6e
 80051ca:	e7dc      	b.n	8005186 <_strtod_l+0x2fe>
 80051cc:	498e      	ldr	r1, [pc, #568]	; (8005408 <_strtod_l+0x580>)
 80051ce:	a819      	add	r0, sp, #100	; 0x64
 80051d0:	f000 ff8a 	bl	80060e8 <__match>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	f43f aeb4 	beq.w	8004f42 <_strtod_l+0xba>
 80051da:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051dc:	498b      	ldr	r1, [pc, #556]	; (800540c <_strtod_l+0x584>)
 80051de:	3b01      	subs	r3, #1
 80051e0:	a819      	add	r0, sp, #100	; 0x64
 80051e2:	9319      	str	r3, [sp, #100]	; 0x64
 80051e4:	f000 ff80 	bl	80060e8 <__match>
 80051e8:	b910      	cbnz	r0, 80051f0 <_strtod_l+0x368>
 80051ea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80051ec:	3301      	adds	r3, #1
 80051ee:	9319      	str	r3, [sp, #100]	; 0x64
 80051f0:	f04f 0800 	mov.w	r8, #0
 80051f4:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8005410 <_strtod_l+0x588>
 80051f8:	e687      	b.n	8004f0a <_strtod_l+0x82>
 80051fa:	4886      	ldr	r0, [pc, #536]	; (8005414 <_strtod_l+0x58c>)
 80051fc:	f001 fd0e 	bl	8006c1c <nan>
 8005200:	4680      	mov	r8, r0
 8005202:	4689      	mov	r9, r1
 8005204:	e681      	b.n	8004f0a <_strtod_l+0x82>
 8005206:	9b04      	ldr	r3, [sp, #16]
 8005208:	f1bb 0f00 	cmp.w	fp, #0
 800520c:	bf08      	it	eq
 800520e:	46a3      	moveq	fp, r4
 8005210:	1aeb      	subs	r3, r5, r3
 8005212:	2c10      	cmp	r4, #16
 8005214:	9806      	ldr	r0, [sp, #24]
 8005216:	4626      	mov	r6, r4
 8005218:	9307      	str	r3, [sp, #28]
 800521a:	bfa8      	it	ge
 800521c:	2610      	movge	r6, #16
 800521e:	f7fb f957 	bl	80004d0 <__aeabi_ui2d>
 8005222:	2c09      	cmp	r4, #9
 8005224:	4680      	mov	r8, r0
 8005226:	4689      	mov	r9, r1
 8005228:	dd13      	ble.n	8005252 <_strtod_l+0x3ca>
 800522a:	4b7b      	ldr	r3, [pc, #492]	; (8005418 <_strtod_l+0x590>)
 800522c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005230:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005234:	f7fb f9c6 	bl	80005c4 <__aeabi_dmul>
 8005238:	4680      	mov	r8, r0
 800523a:	9805      	ldr	r0, [sp, #20]
 800523c:	4689      	mov	r9, r1
 800523e:	f7fb f947 	bl	80004d0 <__aeabi_ui2d>
 8005242:	4602      	mov	r2, r0
 8005244:	460b      	mov	r3, r1
 8005246:	4640      	mov	r0, r8
 8005248:	4649      	mov	r1, r9
 800524a:	f7fb f805 	bl	8000258 <__adddf3>
 800524e:	4680      	mov	r8, r0
 8005250:	4689      	mov	r9, r1
 8005252:	2c0f      	cmp	r4, #15
 8005254:	dc36      	bgt.n	80052c4 <_strtod_l+0x43c>
 8005256:	9b07      	ldr	r3, [sp, #28]
 8005258:	2b00      	cmp	r3, #0
 800525a:	f43f ae56 	beq.w	8004f0a <_strtod_l+0x82>
 800525e:	dd22      	ble.n	80052a6 <_strtod_l+0x41e>
 8005260:	2b16      	cmp	r3, #22
 8005262:	dc09      	bgt.n	8005278 <_strtod_l+0x3f0>
 8005264:	496c      	ldr	r1, [pc, #432]	; (8005418 <_strtod_l+0x590>)
 8005266:	4642      	mov	r2, r8
 8005268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800526c:	464b      	mov	r3, r9
 800526e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005272:	f7fb f9a7 	bl	80005c4 <__aeabi_dmul>
 8005276:	e7c3      	b.n	8005200 <_strtod_l+0x378>
 8005278:	9a07      	ldr	r2, [sp, #28]
 800527a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800527e:	4293      	cmp	r3, r2
 8005280:	db20      	blt.n	80052c4 <_strtod_l+0x43c>
 8005282:	4d65      	ldr	r5, [pc, #404]	; (8005418 <_strtod_l+0x590>)
 8005284:	f1c4 040f 	rsb	r4, r4, #15
 8005288:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800528c:	4642      	mov	r2, r8
 800528e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005292:	464b      	mov	r3, r9
 8005294:	f7fb f996 	bl	80005c4 <__aeabi_dmul>
 8005298:	9b07      	ldr	r3, [sp, #28]
 800529a:	1b1c      	subs	r4, r3, r4
 800529c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80052a0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052a4:	e7e5      	b.n	8005272 <_strtod_l+0x3ea>
 80052a6:	9b07      	ldr	r3, [sp, #28]
 80052a8:	3316      	adds	r3, #22
 80052aa:	db0b      	blt.n	80052c4 <_strtod_l+0x43c>
 80052ac:	9b04      	ldr	r3, [sp, #16]
 80052ae:	4640      	mov	r0, r8
 80052b0:	1b5d      	subs	r5, r3, r5
 80052b2:	4b59      	ldr	r3, [pc, #356]	; (8005418 <_strtod_l+0x590>)
 80052b4:	4649      	mov	r1, r9
 80052b6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80052ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052be:	f7fb faab 	bl	8000818 <__aeabi_ddiv>
 80052c2:	e79d      	b.n	8005200 <_strtod_l+0x378>
 80052c4:	9b07      	ldr	r3, [sp, #28]
 80052c6:	1ba6      	subs	r6, r4, r6
 80052c8:	441e      	add	r6, r3
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	dd74      	ble.n	80053b8 <_strtod_l+0x530>
 80052ce:	f016 030f 	ands.w	r3, r6, #15
 80052d2:	d00a      	beq.n	80052ea <_strtod_l+0x462>
 80052d4:	4950      	ldr	r1, [pc, #320]	; (8005418 <_strtod_l+0x590>)
 80052d6:	4642      	mov	r2, r8
 80052d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80052dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80052e0:	464b      	mov	r3, r9
 80052e2:	f7fb f96f 	bl	80005c4 <__aeabi_dmul>
 80052e6:	4680      	mov	r8, r0
 80052e8:	4689      	mov	r9, r1
 80052ea:	f036 060f 	bics.w	r6, r6, #15
 80052ee:	d052      	beq.n	8005396 <_strtod_l+0x50e>
 80052f0:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 80052f4:	dd27      	ble.n	8005346 <_strtod_l+0x4be>
 80052f6:	f04f 0b00 	mov.w	fp, #0
 80052fa:	f8cd b010 	str.w	fp, [sp, #16]
 80052fe:	f8cd b020 	str.w	fp, [sp, #32]
 8005302:	f8cd b018 	str.w	fp, [sp, #24]
 8005306:	2322      	movs	r3, #34	; 0x22
 8005308:	f04f 0800 	mov.w	r8, #0
 800530c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8005410 <_strtod_l+0x588>
 8005310:	f8ca 3000 	str.w	r3, [sl]
 8005314:	9b08      	ldr	r3, [sp, #32]
 8005316:	2b00      	cmp	r3, #0
 8005318:	f43f adf7 	beq.w	8004f0a <_strtod_l+0x82>
 800531c:	4650      	mov	r0, sl
 800531e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005320:	f000 fff0 	bl	8006304 <_Bfree>
 8005324:	4650      	mov	r0, sl
 8005326:	9906      	ldr	r1, [sp, #24]
 8005328:	f000 ffec 	bl	8006304 <_Bfree>
 800532c:	4650      	mov	r0, sl
 800532e:	9904      	ldr	r1, [sp, #16]
 8005330:	f000 ffe8 	bl	8006304 <_Bfree>
 8005334:	4650      	mov	r0, sl
 8005336:	9908      	ldr	r1, [sp, #32]
 8005338:	f000 ffe4 	bl	8006304 <_Bfree>
 800533c:	4659      	mov	r1, fp
 800533e:	4650      	mov	r0, sl
 8005340:	f000 ffe0 	bl	8006304 <_Bfree>
 8005344:	e5e1      	b.n	8004f0a <_strtod_l+0x82>
 8005346:	4b35      	ldr	r3, [pc, #212]	; (800541c <_strtod_l+0x594>)
 8005348:	4640      	mov	r0, r8
 800534a:	9305      	str	r3, [sp, #20]
 800534c:	2300      	movs	r3, #0
 800534e:	4649      	mov	r1, r9
 8005350:	461f      	mov	r7, r3
 8005352:	1136      	asrs	r6, r6, #4
 8005354:	2e01      	cmp	r6, #1
 8005356:	dc21      	bgt.n	800539c <_strtod_l+0x514>
 8005358:	b10b      	cbz	r3, 800535e <_strtod_l+0x4d6>
 800535a:	4680      	mov	r8, r0
 800535c:	4689      	mov	r9, r1
 800535e:	4b2f      	ldr	r3, [pc, #188]	; (800541c <_strtod_l+0x594>)
 8005360:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8005364:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8005368:	4642      	mov	r2, r8
 800536a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800536e:	464b      	mov	r3, r9
 8005370:	f7fb f928 	bl	80005c4 <__aeabi_dmul>
 8005374:	4b26      	ldr	r3, [pc, #152]	; (8005410 <_strtod_l+0x588>)
 8005376:	460a      	mov	r2, r1
 8005378:	400b      	ands	r3, r1
 800537a:	4929      	ldr	r1, [pc, #164]	; (8005420 <_strtod_l+0x598>)
 800537c:	4680      	mov	r8, r0
 800537e:	428b      	cmp	r3, r1
 8005380:	d8b9      	bhi.n	80052f6 <_strtod_l+0x46e>
 8005382:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005386:	428b      	cmp	r3, r1
 8005388:	bf86      	itte	hi
 800538a:	f04f 38ff 	movhi.w	r8, #4294967295
 800538e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8005424 <_strtod_l+0x59c>
 8005392:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8005396:	2300      	movs	r3, #0
 8005398:	9305      	str	r3, [sp, #20]
 800539a:	e07f      	b.n	800549c <_strtod_l+0x614>
 800539c:	07f2      	lsls	r2, r6, #31
 800539e:	d505      	bpl.n	80053ac <_strtod_l+0x524>
 80053a0:	9b05      	ldr	r3, [sp, #20]
 80053a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a6:	f7fb f90d 	bl	80005c4 <__aeabi_dmul>
 80053aa:	2301      	movs	r3, #1
 80053ac:	9a05      	ldr	r2, [sp, #20]
 80053ae:	3701      	adds	r7, #1
 80053b0:	3208      	adds	r2, #8
 80053b2:	1076      	asrs	r6, r6, #1
 80053b4:	9205      	str	r2, [sp, #20]
 80053b6:	e7cd      	b.n	8005354 <_strtod_l+0x4cc>
 80053b8:	d0ed      	beq.n	8005396 <_strtod_l+0x50e>
 80053ba:	4276      	negs	r6, r6
 80053bc:	f016 020f 	ands.w	r2, r6, #15
 80053c0:	d00a      	beq.n	80053d8 <_strtod_l+0x550>
 80053c2:	4b15      	ldr	r3, [pc, #84]	; (8005418 <_strtod_l+0x590>)
 80053c4:	4640      	mov	r0, r8
 80053c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053ca:	4649      	mov	r1, r9
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fb fa22 	bl	8000818 <__aeabi_ddiv>
 80053d4:	4680      	mov	r8, r0
 80053d6:	4689      	mov	r9, r1
 80053d8:	1136      	asrs	r6, r6, #4
 80053da:	d0dc      	beq.n	8005396 <_strtod_l+0x50e>
 80053dc:	2e1f      	cmp	r6, #31
 80053de:	dd23      	ble.n	8005428 <_strtod_l+0x5a0>
 80053e0:	f04f 0b00 	mov.w	fp, #0
 80053e4:	f8cd b010 	str.w	fp, [sp, #16]
 80053e8:	f8cd b020 	str.w	fp, [sp, #32]
 80053ec:	f8cd b018 	str.w	fp, [sp, #24]
 80053f0:	2322      	movs	r3, #34	; 0x22
 80053f2:	f04f 0800 	mov.w	r8, #0
 80053f6:	f04f 0900 	mov.w	r9, #0
 80053fa:	f8ca 3000 	str.w	r3, [sl]
 80053fe:	e789      	b.n	8005314 <_strtod_l+0x48c>
 8005400:	08007d3d 	.word	0x08007d3d
 8005404:	08007d54 	.word	0x08007d54
 8005408:	08007d34 	.word	0x08007d34
 800540c:	08007d37 	.word	0x08007d37
 8005410:	7ff00000 	.word	0x7ff00000
 8005414:	080080c7 	.word	0x080080c7
 8005418:	08007fb8 	.word	0x08007fb8
 800541c:	08007f90 	.word	0x08007f90
 8005420:	7ca00000 	.word	0x7ca00000
 8005424:	7fefffff 	.word	0x7fefffff
 8005428:	f016 0310 	ands.w	r3, r6, #16
 800542c:	bf18      	it	ne
 800542e:	236a      	movne	r3, #106	; 0x6a
 8005430:	4640      	mov	r0, r8
 8005432:	9305      	str	r3, [sp, #20]
 8005434:	4649      	mov	r1, r9
 8005436:	2300      	movs	r3, #0
 8005438:	4fb0      	ldr	r7, [pc, #704]	; (80056fc <_strtod_l+0x874>)
 800543a:	07f2      	lsls	r2, r6, #31
 800543c:	d504      	bpl.n	8005448 <_strtod_l+0x5c0>
 800543e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005442:	f7fb f8bf 	bl	80005c4 <__aeabi_dmul>
 8005446:	2301      	movs	r3, #1
 8005448:	1076      	asrs	r6, r6, #1
 800544a:	f107 0708 	add.w	r7, r7, #8
 800544e:	d1f4      	bne.n	800543a <_strtod_l+0x5b2>
 8005450:	b10b      	cbz	r3, 8005456 <_strtod_l+0x5ce>
 8005452:	4680      	mov	r8, r0
 8005454:	4689      	mov	r9, r1
 8005456:	9b05      	ldr	r3, [sp, #20]
 8005458:	b1c3      	cbz	r3, 800548c <_strtod_l+0x604>
 800545a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800545e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005462:	2b00      	cmp	r3, #0
 8005464:	4649      	mov	r1, r9
 8005466:	dd11      	ble.n	800548c <_strtod_l+0x604>
 8005468:	2b1f      	cmp	r3, #31
 800546a:	f340 8127 	ble.w	80056bc <_strtod_l+0x834>
 800546e:	2b34      	cmp	r3, #52	; 0x34
 8005470:	bfd8      	it	le
 8005472:	f04f 33ff 	movle.w	r3, #4294967295
 8005476:	f04f 0800 	mov.w	r8, #0
 800547a:	bfcf      	iteee	gt
 800547c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8005480:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005484:	fa03 f202 	lslle.w	r2, r3, r2
 8005488:	ea02 0901 	andle.w	r9, r2, r1
 800548c:	2200      	movs	r2, #0
 800548e:	2300      	movs	r3, #0
 8005490:	4640      	mov	r0, r8
 8005492:	4649      	mov	r1, r9
 8005494:	f7fb fafe 	bl	8000a94 <__aeabi_dcmpeq>
 8005498:	2800      	cmp	r0, #0
 800549a:	d1a1      	bne.n	80053e0 <_strtod_l+0x558>
 800549c:	9b06      	ldr	r3, [sp, #24]
 800549e:	465a      	mov	r2, fp
 80054a0:	9300      	str	r3, [sp, #0]
 80054a2:	4650      	mov	r0, sl
 80054a4:	4623      	mov	r3, r4
 80054a6:	9908      	ldr	r1, [sp, #32]
 80054a8:	f000 ff94 	bl	80063d4 <__s2b>
 80054ac:	9008      	str	r0, [sp, #32]
 80054ae:	2800      	cmp	r0, #0
 80054b0:	f43f af21 	beq.w	80052f6 <_strtod_l+0x46e>
 80054b4:	9b04      	ldr	r3, [sp, #16]
 80054b6:	f04f 0b00 	mov.w	fp, #0
 80054ba:	1b5d      	subs	r5, r3, r5
 80054bc:	9b07      	ldr	r3, [sp, #28]
 80054be:	f8cd b010 	str.w	fp, [sp, #16]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bfb4      	ite	lt
 80054c6:	462b      	movlt	r3, r5
 80054c8:	2300      	movge	r3, #0
 80054ca:	930e      	str	r3, [sp, #56]	; 0x38
 80054cc:	9b07      	ldr	r3, [sp, #28]
 80054ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80054d2:	9314      	str	r3, [sp, #80]	; 0x50
 80054d4:	9b08      	ldr	r3, [sp, #32]
 80054d6:	4650      	mov	r0, sl
 80054d8:	6859      	ldr	r1, [r3, #4]
 80054da:	f000 fed3 	bl	8006284 <_Balloc>
 80054de:	9006      	str	r0, [sp, #24]
 80054e0:	2800      	cmp	r0, #0
 80054e2:	f43f af10 	beq.w	8005306 <_strtod_l+0x47e>
 80054e6:	9b08      	ldr	r3, [sp, #32]
 80054e8:	300c      	adds	r0, #12
 80054ea:	691a      	ldr	r2, [r3, #16]
 80054ec:	f103 010c 	add.w	r1, r3, #12
 80054f0:	3202      	adds	r2, #2
 80054f2:	0092      	lsls	r2, r2, #2
 80054f4:	f7ff fb9a 	bl	8004c2c <memcpy>
 80054f8:	ab1c      	add	r3, sp, #112	; 0x70
 80054fa:	9301      	str	r3, [sp, #4]
 80054fc:	ab1b      	add	r3, sp, #108	; 0x6c
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	4642      	mov	r2, r8
 8005502:	464b      	mov	r3, r9
 8005504:	4650      	mov	r0, sl
 8005506:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800550a:	f001 faa5 	bl	8006a58 <__d2b>
 800550e:	901a      	str	r0, [sp, #104]	; 0x68
 8005510:	2800      	cmp	r0, #0
 8005512:	f43f aef8 	beq.w	8005306 <_strtod_l+0x47e>
 8005516:	2101      	movs	r1, #1
 8005518:	4650      	mov	r0, sl
 800551a:	f000 fff3 	bl	8006504 <__i2b>
 800551e:	4603      	mov	r3, r0
 8005520:	9004      	str	r0, [sp, #16]
 8005522:	2800      	cmp	r0, #0
 8005524:	f43f aeef 	beq.w	8005306 <_strtod_l+0x47e>
 8005528:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800552a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800552c:	2d00      	cmp	r5, #0
 800552e:	bfab      	itete	ge
 8005530:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8005532:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8005534:	18ee      	addge	r6, r5, r3
 8005536:	1b5c      	sublt	r4, r3, r5
 8005538:	9b05      	ldr	r3, [sp, #20]
 800553a:	bfa8      	it	ge
 800553c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800553e:	eba5 0503 	sub.w	r5, r5, r3
 8005542:	4415      	add	r5, r2
 8005544:	4b6e      	ldr	r3, [pc, #440]	; (8005700 <_strtod_l+0x878>)
 8005546:	f105 35ff 	add.w	r5, r5, #4294967295
 800554a:	bfb8      	it	lt
 800554c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800554e:	429d      	cmp	r5, r3
 8005550:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8005554:	f280 80c4 	bge.w	80056e0 <_strtod_l+0x858>
 8005558:	1b5b      	subs	r3, r3, r5
 800555a:	2b1f      	cmp	r3, #31
 800555c:	f04f 0701 	mov.w	r7, #1
 8005560:	eba2 0203 	sub.w	r2, r2, r3
 8005564:	f300 80b1 	bgt.w	80056ca <_strtod_l+0x842>
 8005568:	2500      	movs	r5, #0
 800556a:	fa07 f303 	lsl.w	r3, r7, r3
 800556e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005570:	18b7      	adds	r7, r6, r2
 8005572:	9b05      	ldr	r3, [sp, #20]
 8005574:	42be      	cmp	r6, r7
 8005576:	4414      	add	r4, r2
 8005578:	441c      	add	r4, r3
 800557a:	4633      	mov	r3, r6
 800557c:	bfa8      	it	ge
 800557e:	463b      	movge	r3, r7
 8005580:	42a3      	cmp	r3, r4
 8005582:	bfa8      	it	ge
 8005584:	4623      	movge	r3, r4
 8005586:	2b00      	cmp	r3, #0
 8005588:	bfc2      	ittt	gt
 800558a:	1aff      	subgt	r7, r7, r3
 800558c:	1ae4      	subgt	r4, r4, r3
 800558e:	1af6      	subgt	r6, r6, r3
 8005590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005592:	2b00      	cmp	r3, #0
 8005594:	dd17      	ble.n	80055c6 <_strtod_l+0x73e>
 8005596:	461a      	mov	r2, r3
 8005598:	4650      	mov	r0, sl
 800559a:	9904      	ldr	r1, [sp, #16]
 800559c:	f001 f870 	bl	8006680 <__pow5mult>
 80055a0:	9004      	str	r0, [sp, #16]
 80055a2:	2800      	cmp	r0, #0
 80055a4:	f43f aeaf 	beq.w	8005306 <_strtod_l+0x47e>
 80055a8:	4601      	mov	r1, r0
 80055aa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80055ac:	4650      	mov	r0, sl
 80055ae:	f000 ffbf 	bl	8006530 <__multiply>
 80055b2:	9009      	str	r0, [sp, #36]	; 0x24
 80055b4:	2800      	cmp	r0, #0
 80055b6:	f43f aea6 	beq.w	8005306 <_strtod_l+0x47e>
 80055ba:	4650      	mov	r0, sl
 80055bc:	991a      	ldr	r1, [sp, #104]	; 0x68
 80055be:	f000 fea1 	bl	8006304 <_Bfree>
 80055c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c4:	931a      	str	r3, [sp, #104]	; 0x68
 80055c6:	2f00      	cmp	r7, #0
 80055c8:	f300 808e 	bgt.w	80056e8 <_strtod_l+0x860>
 80055cc:	9b07      	ldr	r3, [sp, #28]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd08      	ble.n	80055e4 <_strtod_l+0x75c>
 80055d2:	4650      	mov	r0, sl
 80055d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80055d6:	9906      	ldr	r1, [sp, #24]
 80055d8:	f001 f852 	bl	8006680 <__pow5mult>
 80055dc:	9006      	str	r0, [sp, #24]
 80055de:	2800      	cmp	r0, #0
 80055e0:	f43f ae91 	beq.w	8005306 <_strtod_l+0x47e>
 80055e4:	2c00      	cmp	r4, #0
 80055e6:	dd08      	ble.n	80055fa <_strtod_l+0x772>
 80055e8:	4622      	mov	r2, r4
 80055ea:	4650      	mov	r0, sl
 80055ec:	9906      	ldr	r1, [sp, #24]
 80055ee:	f001 f8a1 	bl	8006734 <__lshift>
 80055f2:	9006      	str	r0, [sp, #24]
 80055f4:	2800      	cmp	r0, #0
 80055f6:	f43f ae86 	beq.w	8005306 <_strtod_l+0x47e>
 80055fa:	2e00      	cmp	r6, #0
 80055fc:	dd08      	ble.n	8005610 <_strtod_l+0x788>
 80055fe:	4632      	mov	r2, r6
 8005600:	4650      	mov	r0, sl
 8005602:	9904      	ldr	r1, [sp, #16]
 8005604:	f001 f896 	bl	8006734 <__lshift>
 8005608:	9004      	str	r0, [sp, #16]
 800560a:	2800      	cmp	r0, #0
 800560c:	f43f ae7b 	beq.w	8005306 <_strtod_l+0x47e>
 8005610:	4650      	mov	r0, sl
 8005612:	9a06      	ldr	r2, [sp, #24]
 8005614:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005616:	f001 f919 	bl	800684c <__mdiff>
 800561a:	4683      	mov	fp, r0
 800561c:	2800      	cmp	r0, #0
 800561e:	f43f ae72 	beq.w	8005306 <_strtod_l+0x47e>
 8005622:	2400      	movs	r4, #0
 8005624:	68c3      	ldr	r3, [r0, #12]
 8005626:	9904      	ldr	r1, [sp, #16]
 8005628:	60c4      	str	r4, [r0, #12]
 800562a:	930b      	str	r3, [sp, #44]	; 0x2c
 800562c:	f001 f8f2 	bl	8006814 <__mcmp>
 8005630:	42a0      	cmp	r0, r4
 8005632:	da6b      	bge.n	800570c <_strtod_l+0x884>
 8005634:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005636:	ea53 0308 	orrs.w	r3, r3, r8
 800563a:	f040 8091 	bne.w	8005760 <_strtod_l+0x8d8>
 800563e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005642:	2b00      	cmp	r3, #0
 8005644:	f040 808c 	bne.w	8005760 <_strtod_l+0x8d8>
 8005648:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800564c:	0d1b      	lsrs	r3, r3, #20
 800564e:	051b      	lsls	r3, r3, #20
 8005650:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8005654:	f240 8084 	bls.w	8005760 <_strtod_l+0x8d8>
 8005658:	f8db 3014 	ldr.w	r3, [fp, #20]
 800565c:	b91b      	cbnz	r3, 8005666 <_strtod_l+0x7de>
 800565e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8005662:	2b01      	cmp	r3, #1
 8005664:	dd7c      	ble.n	8005760 <_strtod_l+0x8d8>
 8005666:	4659      	mov	r1, fp
 8005668:	2201      	movs	r2, #1
 800566a:	4650      	mov	r0, sl
 800566c:	f001 f862 	bl	8006734 <__lshift>
 8005670:	9904      	ldr	r1, [sp, #16]
 8005672:	4683      	mov	fp, r0
 8005674:	f001 f8ce 	bl	8006814 <__mcmp>
 8005678:	2800      	cmp	r0, #0
 800567a:	dd71      	ble.n	8005760 <_strtod_l+0x8d8>
 800567c:	9905      	ldr	r1, [sp, #20]
 800567e:	464b      	mov	r3, r9
 8005680:	4a20      	ldr	r2, [pc, #128]	; (8005704 <_strtod_l+0x87c>)
 8005682:	2900      	cmp	r1, #0
 8005684:	f000 808c 	beq.w	80057a0 <_strtod_l+0x918>
 8005688:	ea02 0109 	and.w	r1, r2, r9
 800568c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8005690:	f300 8086 	bgt.w	80057a0 <_strtod_l+0x918>
 8005694:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8005698:	f77f aeaa 	ble.w	80053f0 <_strtod_l+0x568>
 800569c:	4640      	mov	r0, r8
 800569e:	4649      	mov	r1, r9
 80056a0:	4b19      	ldr	r3, [pc, #100]	; (8005708 <_strtod_l+0x880>)
 80056a2:	2200      	movs	r2, #0
 80056a4:	f7fa ff8e 	bl	80005c4 <__aeabi_dmul>
 80056a8:	460b      	mov	r3, r1
 80056aa:	4303      	orrs	r3, r0
 80056ac:	bf08      	it	eq
 80056ae:	2322      	moveq	r3, #34	; 0x22
 80056b0:	4680      	mov	r8, r0
 80056b2:	4689      	mov	r9, r1
 80056b4:	bf08      	it	eq
 80056b6:	f8ca 3000 	streq.w	r3, [sl]
 80056ba:	e62f      	b.n	800531c <_strtod_l+0x494>
 80056bc:	f04f 32ff 	mov.w	r2, #4294967295
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	ea03 0808 	and.w	r8, r3, r8
 80056c8:	e6e0      	b.n	800548c <_strtod_l+0x604>
 80056ca:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80056ce:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 80056d2:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 80056d6:	35e2      	adds	r5, #226	; 0xe2
 80056d8:	fa07 f505 	lsl.w	r5, r7, r5
 80056dc:	970f      	str	r7, [sp, #60]	; 0x3c
 80056de:	e747      	b.n	8005570 <_strtod_l+0x6e8>
 80056e0:	2301      	movs	r3, #1
 80056e2:	2500      	movs	r5, #0
 80056e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80056e6:	e743      	b.n	8005570 <_strtod_l+0x6e8>
 80056e8:	463a      	mov	r2, r7
 80056ea:	4650      	mov	r0, sl
 80056ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80056ee:	f001 f821 	bl	8006734 <__lshift>
 80056f2:	901a      	str	r0, [sp, #104]	; 0x68
 80056f4:	2800      	cmp	r0, #0
 80056f6:	f47f af69 	bne.w	80055cc <_strtod_l+0x744>
 80056fa:	e604      	b.n	8005306 <_strtod_l+0x47e>
 80056fc:	08007d68 	.word	0x08007d68
 8005700:	fffffc02 	.word	0xfffffc02
 8005704:	7ff00000 	.word	0x7ff00000
 8005708:	39500000 	.word	0x39500000
 800570c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8005710:	d165      	bne.n	80057de <_strtod_l+0x956>
 8005712:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005714:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005718:	b35a      	cbz	r2, 8005772 <_strtod_l+0x8ea>
 800571a:	4a99      	ldr	r2, [pc, #612]	; (8005980 <_strtod_l+0xaf8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d12b      	bne.n	8005778 <_strtod_l+0x8f0>
 8005720:	9b05      	ldr	r3, [sp, #20]
 8005722:	4641      	mov	r1, r8
 8005724:	b303      	cbz	r3, 8005768 <_strtod_l+0x8e0>
 8005726:	464a      	mov	r2, r9
 8005728:	4b96      	ldr	r3, [pc, #600]	; (8005984 <_strtod_l+0xafc>)
 800572a:	4013      	ands	r3, r2
 800572c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8005730:	f04f 32ff 	mov.w	r2, #4294967295
 8005734:	d81b      	bhi.n	800576e <_strtod_l+0x8e6>
 8005736:	0d1b      	lsrs	r3, r3, #20
 8005738:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800573c:	fa02 f303 	lsl.w	r3, r2, r3
 8005740:	4299      	cmp	r1, r3
 8005742:	d119      	bne.n	8005778 <_strtod_l+0x8f0>
 8005744:	4b90      	ldr	r3, [pc, #576]	; (8005988 <_strtod_l+0xb00>)
 8005746:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005748:	429a      	cmp	r2, r3
 800574a:	d102      	bne.n	8005752 <_strtod_l+0x8ca>
 800574c:	3101      	adds	r1, #1
 800574e:	f43f adda 	beq.w	8005306 <_strtod_l+0x47e>
 8005752:	f04f 0800 	mov.w	r8, #0
 8005756:	4b8b      	ldr	r3, [pc, #556]	; (8005984 <_strtod_l+0xafc>)
 8005758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800575a:	401a      	ands	r2, r3
 800575c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d19a      	bne.n	800569c <_strtod_l+0x814>
 8005766:	e5d9      	b.n	800531c <_strtod_l+0x494>
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	e7e8      	b.n	8005740 <_strtod_l+0x8b8>
 800576e:	4613      	mov	r3, r2
 8005770:	e7e6      	b.n	8005740 <_strtod_l+0x8b8>
 8005772:	ea53 0308 	orrs.w	r3, r3, r8
 8005776:	d081      	beq.n	800567c <_strtod_l+0x7f4>
 8005778:	b1e5      	cbz	r5, 80057b4 <_strtod_l+0x92c>
 800577a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577c:	421d      	tst	r5, r3
 800577e:	d0ef      	beq.n	8005760 <_strtod_l+0x8d8>
 8005780:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005782:	4640      	mov	r0, r8
 8005784:	4649      	mov	r1, r9
 8005786:	9a05      	ldr	r2, [sp, #20]
 8005788:	b1c3      	cbz	r3, 80057bc <_strtod_l+0x934>
 800578a:	f7ff fb59 	bl	8004e40 <sulp>
 800578e:	4602      	mov	r2, r0
 8005790:	460b      	mov	r3, r1
 8005792:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005796:	f7fa fd5f 	bl	8000258 <__adddf3>
 800579a:	4680      	mov	r8, r0
 800579c:	4689      	mov	r9, r1
 800579e:	e7df      	b.n	8005760 <_strtod_l+0x8d8>
 80057a0:	4013      	ands	r3, r2
 80057a2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80057a6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80057aa:	f04f 38ff 	mov.w	r8, #4294967295
 80057ae:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80057b2:	e7d5      	b.n	8005760 <_strtod_l+0x8d8>
 80057b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057b6:	ea13 0f08 	tst.w	r3, r8
 80057ba:	e7e0      	b.n	800577e <_strtod_l+0x8f6>
 80057bc:	f7ff fb40 	bl	8004e40 <sulp>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057c8:	f7fa fd44 	bl	8000254 <__aeabi_dsub>
 80057cc:	2200      	movs	r2, #0
 80057ce:	2300      	movs	r3, #0
 80057d0:	4680      	mov	r8, r0
 80057d2:	4689      	mov	r9, r1
 80057d4:	f7fb f95e 	bl	8000a94 <__aeabi_dcmpeq>
 80057d8:	2800      	cmp	r0, #0
 80057da:	d0c1      	beq.n	8005760 <_strtod_l+0x8d8>
 80057dc:	e608      	b.n	80053f0 <_strtod_l+0x568>
 80057de:	4658      	mov	r0, fp
 80057e0:	9904      	ldr	r1, [sp, #16]
 80057e2:	f001 f995 	bl	8006b10 <__ratio>
 80057e6:	2200      	movs	r2, #0
 80057e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057ec:	4606      	mov	r6, r0
 80057ee:	460f      	mov	r7, r1
 80057f0:	f7fb f964 	bl	8000abc <__aeabi_dcmple>
 80057f4:	2800      	cmp	r0, #0
 80057f6:	d070      	beq.n	80058da <_strtod_l+0xa52>
 80057f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d042      	beq.n	8005884 <_strtod_l+0x9fc>
 80057fe:	2600      	movs	r6, #0
 8005800:	4f62      	ldr	r7, [pc, #392]	; (800598c <_strtod_l+0xb04>)
 8005802:	4d62      	ldr	r5, [pc, #392]	; (800598c <_strtod_l+0xb04>)
 8005804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005806:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800580a:	0d1b      	lsrs	r3, r3, #20
 800580c:	051b      	lsls	r3, r3, #20
 800580e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005810:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005812:	4b5f      	ldr	r3, [pc, #380]	; (8005990 <_strtod_l+0xb08>)
 8005814:	429a      	cmp	r2, r3
 8005816:	f040 80c3 	bne.w	80059a0 <_strtod_l+0xb18>
 800581a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800581c:	4640      	mov	r0, r8
 800581e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8005822:	4649      	mov	r1, r9
 8005824:	f001 f89e 	bl	8006964 <__ulp>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4630      	mov	r0, r6
 800582e:	4639      	mov	r1, r7
 8005830:	f7fa fec8 	bl	80005c4 <__aeabi_dmul>
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	f7fa fd0e 	bl	8000258 <__adddf3>
 800583c:	460b      	mov	r3, r1
 800583e:	4951      	ldr	r1, [pc, #324]	; (8005984 <_strtod_l+0xafc>)
 8005840:	4a54      	ldr	r2, [pc, #336]	; (8005994 <_strtod_l+0xb0c>)
 8005842:	4019      	ands	r1, r3
 8005844:	4291      	cmp	r1, r2
 8005846:	4680      	mov	r8, r0
 8005848:	d95d      	bls.n	8005906 <_strtod_l+0xa7e>
 800584a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800584c:	4b4e      	ldr	r3, [pc, #312]	; (8005988 <_strtod_l+0xb00>)
 800584e:	429a      	cmp	r2, r3
 8005850:	d103      	bne.n	800585a <_strtod_l+0x9d2>
 8005852:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005854:	3301      	adds	r3, #1
 8005856:	f43f ad56 	beq.w	8005306 <_strtod_l+0x47e>
 800585a:	f04f 38ff 	mov.w	r8, #4294967295
 800585e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8005988 <_strtod_l+0xb00>
 8005862:	4650      	mov	r0, sl
 8005864:	991a      	ldr	r1, [sp, #104]	; 0x68
 8005866:	f000 fd4d 	bl	8006304 <_Bfree>
 800586a:	4650      	mov	r0, sl
 800586c:	9906      	ldr	r1, [sp, #24]
 800586e:	f000 fd49 	bl	8006304 <_Bfree>
 8005872:	4650      	mov	r0, sl
 8005874:	9904      	ldr	r1, [sp, #16]
 8005876:	f000 fd45 	bl	8006304 <_Bfree>
 800587a:	4659      	mov	r1, fp
 800587c:	4650      	mov	r0, sl
 800587e:	f000 fd41 	bl	8006304 <_Bfree>
 8005882:	e627      	b.n	80054d4 <_strtod_l+0x64c>
 8005884:	f1b8 0f00 	cmp.w	r8, #0
 8005888:	d119      	bne.n	80058be <_strtod_l+0xa36>
 800588a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800588c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005890:	b9e3      	cbnz	r3, 80058cc <_strtod_l+0xa44>
 8005892:	2200      	movs	r2, #0
 8005894:	4630      	mov	r0, r6
 8005896:	4639      	mov	r1, r7
 8005898:	4b3c      	ldr	r3, [pc, #240]	; (800598c <_strtod_l+0xb04>)
 800589a:	f7fb f905 	bl	8000aa8 <__aeabi_dcmplt>
 800589e:	b9c8      	cbnz	r0, 80058d4 <_strtod_l+0xa4c>
 80058a0:	2200      	movs	r2, #0
 80058a2:	4630      	mov	r0, r6
 80058a4:	4639      	mov	r1, r7
 80058a6:	4b3c      	ldr	r3, [pc, #240]	; (8005998 <_strtod_l+0xb10>)
 80058a8:	f7fa fe8c 	bl	80005c4 <__aeabi_dmul>
 80058ac:	4604      	mov	r4, r0
 80058ae:	460d      	mov	r5, r1
 80058b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80058b4:	9416      	str	r4, [sp, #88]	; 0x58
 80058b6:	9317      	str	r3, [sp, #92]	; 0x5c
 80058b8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 80058bc:	e7a2      	b.n	8005804 <_strtod_l+0x97c>
 80058be:	f1b8 0f01 	cmp.w	r8, #1
 80058c2:	d103      	bne.n	80058cc <_strtod_l+0xa44>
 80058c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	f43f ad92 	beq.w	80053f0 <_strtod_l+0x568>
 80058cc:	2600      	movs	r6, #0
 80058ce:	2400      	movs	r4, #0
 80058d0:	4f32      	ldr	r7, [pc, #200]	; (800599c <_strtod_l+0xb14>)
 80058d2:	e796      	b.n	8005802 <_strtod_l+0x97a>
 80058d4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80058d6:	4d30      	ldr	r5, [pc, #192]	; (8005998 <_strtod_l+0xb10>)
 80058d8:	e7ea      	b.n	80058b0 <_strtod_l+0xa28>
 80058da:	4b2f      	ldr	r3, [pc, #188]	; (8005998 <_strtod_l+0xb10>)
 80058dc:	2200      	movs	r2, #0
 80058de:	4630      	mov	r0, r6
 80058e0:	4639      	mov	r1, r7
 80058e2:	f7fa fe6f 	bl	80005c4 <__aeabi_dmul>
 80058e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80058e8:	4604      	mov	r4, r0
 80058ea:	460d      	mov	r5, r1
 80058ec:	b933      	cbnz	r3, 80058fc <_strtod_l+0xa74>
 80058ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80058f2:	9010      	str	r0, [sp, #64]	; 0x40
 80058f4:	9311      	str	r3, [sp, #68]	; 0x44
 80058f6:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80058fa:	e783      	b.n	8005804 <_strtod_l+0x97c>
 80058fc:	4602      	mov	r2, r0
 80058fe:	460b      	mov	r3, r1
 8005900:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8005904:	e7f7      	b.n	80058f6 <_strtod_l+0xa6e>
 8005906:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800590a:	9b05      	ldr	r3, [sp, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1a8      	bne.n	8005862 <_strtod_l+0x9da>
 8005910:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005914:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005916:	0d1b      	lsrs	r3, r3, #20
 8005918:	051b      	lsls	r3, r3, #20
 800591a:	429a      	cmp	r2, r3
 800591c:	d1a1      	bne.n	8005862 <_strtod_l+0x9da>
 800591e:	4620      	mov	r0, r4
 8005920:	4629      	mov	r1, r5
 8005922:	f7fb f931 	bl	8000b88 <__aeabi_d2lz>
 8005926:	f7fa fe1f 	bl	8000568 <__aeabi_l2d>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4620      	mov	r0, r4
 8005930:	4629      	mov	r1, r5
 8005932:	f7fa fc8f 	bl	8000254 <__aeabi_dsub>
 8005936:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005938:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800593c:	ea43 0308 	orr.w	r3, r3, r8
 8005940:	4313      	orrs	r3, r2
 8005942:	4604      	mov	r4, r0
 8005944:	460d      	mov	r5, r1
 8005946:	d066      	beq.n	8005a16 <_strtod_l+0xb8e>
 8005948:	a309      	add	r3, pc, #36	; (adr r3, 8005970 <_strtod_l+0xae8>)
 800594a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800594e:	f7fb f8ab 	bl	8000aa8 <__aeabi_dcmplt>
 8005952:	2800      	cmp	r0, #0
 8005954:	f47f ace2 	bne.w	800531c <_strtod_l+0x494>
 8005958:	a307      	add	r3, pc, #28	; (adr r3, 8005978 <_strtod_l+0xaf0>)
 800595a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800595e:	4620      	mov	r0, r4
 8005960:	4629      	mov	r1, r5
 8005962:	f7fb f8bf 	bl	8000ae4 <__aeabi_dcmpgt>
 8005966:	2800      	cmp	r0, #0
 8005968:	f43f af7b 	beq.w	8005862 <_strtod_l+0x9da>
 800596c:	e4d6      	b.n	800531c <_strtod_l+0x494>
 800596e:	bf00      	nop
 8005970:	94a03595 	.word	0x94a03595
 8005974:	3fdfffff 	.word	0x3fdfffff
 8005978:	35afe535 	.word	0x35afe535
 800597c:	3fe00000 	.word	0x3fe00000
 8005980:	000fffff 	.word	0x000fffff
 8005984:	7ff00000 	.word	0x7ff00000
 8005988:	7fefffff 	.word	0x7fefffff
 800598c:	3ff00000 	.word	0x3ff00000
 8005990:	7fe00000 	.word	0x7fe00000
 8005994:	7c9fffff 	.word	0x7c9fffff
 8005998:	3fe00000 	.word	0x3fe00000
 800599c:	bff00000 	.word	0xbff00000
 80059a0:	9b05      	ldr	r3, [sp, #20]
 80059a2:	b313      	cbz	r3, 80059ea <_strtod_l+0xb62>
 80059a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80059a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80059aa:	d81e      	bhi.n	80059ea <_strtod_l+0xb62>
 80059ac:	a326      	add	r3, pc, #152	; (adr r3, 8005a48 <_strtod_l+0xbc0>)
 80059ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059b2:	4620      	mov	r0, r4
 80059b4:	4629      	mov	r1, r5
 80059b6:	f7fb f881 	bl	8000abc <__aeabi_dcmple>
 80059ba:	b190      	cbz	r0, 80059e2 <_strtod_l+0xb5a>
 80059bc:	4629      	mov	r1, r5
 80059be:	4620      	mov	r0, r4
 80059c0:	f7fb f8c2 	bl	8000b48 <__aeabi_d2uiz>
 80059c4:	2801      	cmp	r0, #1
 80059c6:	bf38      	it	cc
 80059c8:	2001      	movcc	r0, #1
 80059ca:	f7fa fd81 	bl	80004d0 <__aeabi_ui2d>
 80059ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059d0:	4604      	mov	r4, r0
 80059d2:	460d      	mov	r5, r1
 80059d4:	b9d3      	cbnz	r3, 8005a0c <_strtod_l+0xb84>
 80059d6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80059da:	9012      	str	r0, [sp, #72]	; 0x48
 80059dc:	9313      	str	r3, [sp, #76]	; 0x4c
 80059de:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 80059e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80059e4:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 80059e8:	1a9f      	subs	r7, r3, r2
 80059ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059ee:	f000 ffb9 	bl	8006964 <__ulp>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	4630      	mov	r0, r6
 80059f8:	4639      	mov	r1, r7
 80059fa:	f7fa fde3 	bl	80005c4 <__aeabi_dmul>
 80059fe:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005a02:	f7fa fc29 	bl	8000258 <__adddf3>
 8005a06:	4680      	mov	r8, r0
 8005a08:	4689      	mov	r9, r1
 8005a0a:	e77e      	b.n	800590a <_strtod_l+0xa82>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8005a14:	e7e3      	b.n	80059de <_strtod_l+0xb56>
 8005a16:	a30e      	add	r3, pc, #56	; (adr r3, 8005a50 <_strtod_l+0xbc8>)
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	f7fb f844 	bl	8000aa8 <__aeabi_dcmplt>
 8005a20:	e7a1      	b.n	8005966 <_strtod_l+0xade>
 8005a22:	2300      	movs	r3, #0
 8005a24:	930a      	str	r3, [sp, #40]	; 0x28
 8005a26:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005a28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	f7ff ba71 	b.w	8004f12 <_strtod_l+0x8a>
 8005a30:	2a65      	cmp	r2, #101	; 0x65
 8005a32:	f43f ab63 	beq.w	80050fc <_strtod_l+0x274>
 8005a36:	2a45      	cmp	r2, #69	; 0x45
 8005a38:	f43f ab60 	beq.w	80050fc <_strtod_l+0x274>
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	f7ff bb95 	b.w	800516c <_strtod_l+0x2e4>
 8005a42:	bf00      	nop
 8005a44:	f3af 8000 	nop.w
 8005a48:	ffc00000 	.word	0xffc00000
 8005a4c:	41dfffff 	.word	0x41dfffff
 8005a50:	94a03595 	.word	0x94a03595
 8005a54:	3fcfffff 	.word	0x3fcfffff

08005a58 <strtod>:
 8005a58:	460a      	mov	r2, r1
 8005a5a:	4601      	mov	r1, r0
 8005a5c:	4802      	ldr	r0, [pc, #8]	; (8005a68 <strtod+0x10>)
 8005a5e:	4b03      	ldr	r3, [pc, #12]	; (8005a6c <strtod+0x14>)
 8005a60:	6800      	ldr	r0, [r0, #0]
 8005a62:	f7ff ba11 	b.w	8004e88 <_strtod_l>
 8005a66:	bf00      	nop
 8005a68:	20000054 	.word	0x20000054
 8005a6c:	200000bc 	.word	0x200000bc

08005a70 <_strtol_l.constprop.0>:
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a76:	4680      	mov	r8, r0
 8005a78:	d001      	beq.n	8005a7e <_strtol_l.constprop.0+0xe>
 8005a7a:	2b24      	cmp	r3, #36	; 0x24
 8005a7c:	d906      	bls.n	8005a8c <_strtol_l.constprop.0+0x1c>
 8005a7e:	f7ff f89b 	bl	8004bb8 <__errno>
 8005a82:	2316      	movs	r3, #22
 8005a84:	6003      	str	r3, [r0, #0]
 8005a86:	2000      	movs	r0, #0
 8005a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a8c:	460d      	mov	r5, r1
 8005a8e:	4f35      	ldr	r7, [pc, #212]	; (8005b64 <_strtol_l.constprop.0+0xf4>)
 8005a90:	4628      	mov	r0, r5
 8005a92:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a96:	5de6      	ldrb	r6, [r4, r7]
 8005a98:	f016 0608 	ands.w	r6, r6, #8
 8005a9c:	d1f8      	bne.n	8005a90 <_strtol_l.constprop.0+0x20>
 8005a9e:	2c2d      	cmp	r4, #45	; 0x2d
 8005aa0:	d12f      	bne.n	8005b02 <_strtol_l.constprop.0+0x92>
 8005aa2:	2601      	movs	r6, #1
 8005aa4:	782c      	ldrb	r4, [r5, #0]
 8005aa6:	1c85      	adds	r5, r0, #2
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d057      	beq.n	8005b5c <_strtol_l.constprop.0+0xec>
 8005aac:	2b10      	cmp	r3, #16
 8005aae:	d109      	bne.n	8005ac4 <_strtol_l.constprop.0+0x54>
 8005ab0:	2c30      	cmp	r4, #48	; 0x30
 8005ab2:	d107      	bne.n	8005ac4 <_strtol_l.constprop.0+0x54>
 8005ab4:	7828      	ldrb	r0, [r5, #0]
 8005ab6:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005aba:	2858      	cmp	r0, #88	; 0x58
 8005abc:	d149      	bne.n	8005b52 <_strtol_l.constprop.0+0xe2>
 8005abe:	2310      	movs	r3, #16
 8005ac0:	786c      	ldrb	r4, [r5, #1]
 8005ac2:	3502      	adds	r5, #2
 8005ac4:	2700      	movs	r7, #0
 8005ac6:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005aca:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005ace:	fbbe f9f3 	udiv	r9, lr, r3
 8005ad2:	4638      	mov	r0, r7
 8005ad4:	fb03 ea19 	mls	sl, r3, r9, lr
 8005ad8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005adc:	f1bc 0f09 	cmp.w	ip, #9
 8005ae0:	d814      	bhi.n	8005b0c <_strtol_l.constprop.0+0x9c>
 8005ae2:	4664      	mov	r4, ip
 8005ae4:	42a3      	cmp	r3, r4
 8005ae6:	dd22      	ble.n	8005b2e <_strtol_l.constprop.0+0xbe>
 8005ae8:	2f00      	cmp	r7, #0
 8005aea:	db1d      	blt.n	8005b28 <_strtol_l.constprop.0+0xb8>
 8005aec:	4581      	cmp	r9, r0
 8005aee:	d31b      	bcc.n	8005b28 <_strtol_l.constprop.0+0xb8>
 8005af0:	d101      	bne.n	8005af6 <_strtol_l.constprop.0+0x86>
 8005af2:	45a2      	cmp	sl, r4
 8005af4:	db18      	blt.n	8005b28 <_strtol_l.constprop.0+0xb8>
 8005af6:	2701      	movs	r7, #1
 8005af8:	fb00 4003 	mla	r0, r0, r3, r4
 8005afc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b00:	e7ea      	b.n	8005ad8 <_strtol_l.constprop.0+0x68>
 8005b02:	2c2b      	cmp	r4, #43	; 0x2b
 8005b04:	bf04      	itt	eq
 8005b06:	782c      	ldrbeq	r4, [r5, #0]
 8005b08:	1c85      	addeq	r5, r0, #2
 8005b0a:	e7cd      	b.n	8005aa8 <_strtol_l.constprop.0+0x38>
 8005b0c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005b10:	f1bc 0f19 	cmp.w	ip, #25
 8005b14:	d801      	bhi.n	8005b1a <_strtol_l.constprop.0+0xaa>
 8005b16:	3c37      	subs	r4, #55	; 0x37
 8005b18:	e7e4      	b.n	8005ae4 <_strtol_l.constprop.0+0x74>
 8005b1a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005b1e:	f1bc 0f19 	cmp.w	ip, #25
 8005b22:	d804      	bhi.n	8005b2e <_strtol_l.constprop.0+0xbe>
 8005b24:	3c57      	subs	r4, #87	; 0x57
 8005b26:	e7dd      	b.n	8005ae4 <_strtol_l.constprop.0+0x74>
 8005b28:	f04f 37ff 	mov.w	r7, #4294967295
 8005b2c:	e7e6      	b.n	8005afc <_strtol_l.constprop.0+0x8c>
 8005b2e:	2f00      	cmp	r7, #0
 8005b30:	da07      	bge.n	8005b42 <_strtol_l.constprop.0+0xd2>
 8005b32:	2322      	movs	r3, #34	; 0x22
 8005b34:	4670      	mov	r0, lr
 8005b36:	f8c8 3000 	str.w	r3, [r8]
 8005b3a:	2a00      	cmp	r2, #0
 8005b3c:	d0a4      	beq.n	8005a88 <_strtol_l.constprop.0+0x18>
 8005b3e:	1e69      	subs	r1, r5, #1
 8005b40:	e005      	b.n	8005b4e <_strtol_l.constprop.0+0xde>
 8005b42:	b106      	cbz	r6, 8005b46 <_strtol_l.constprop.0+0xd6>
 8005b44:	4240      	negs	r0, r0
 8005b46:	2a00      	cmp	r2, #0
 8005b48:	d09e      	beq.n	8005a88 <_strtol_l.constprop.0+0x18>
 8005b4a:	2f00      	cmp	r7, #0
 8005b4c:	d1f7      	bne.n	8005b3e <_strtol_l.constprop.0+0xce>
 8005b4e:	6011      	str	r1, [r2, #0]
 8005b50:	e79a      	b.n	8005a88 <_strtol_l.constprop.0+0x18>
 8005b52:	2430      	movs	r4, #48	; 0x30
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d1b5      	bne.n	8005ac4 <_strtol_l.constprop.0+0x54>
 8005b58:	2308      	movs	r3, #8
 8005b5a:	e7b3      	b.n	8005ac4 <_strtol_l.constprop.0+0x54>
 8005b5c:	2c30      	cmp	r4, #48	; 0x30
 8005b5e:	d0a9      	beq.n	8005ab4 <_strtol_l.constprop.0+0x44>
 8005b60:	230a      	movs	r3, #10
 8005b62:	e7af      	b.n	8005ac4 <_strtol_l.constprop.0+0x54>
 8005b64:	08007d91 	.word	0x08007d91

08005b68 <strtol>:
 8005b68:	4613      	mov	r3, r2
 8005b6a:	460a      	mov	r2, r1
 8005b6c:	4601      	mov	r1, r0
 8005b6e:	4802      	ldr	r0, [pc, #8]	; (8005b78 <strtol+0x10>)
 8005b70:	6800      	ldr	r0, [r0, #0]
 8005b72:	f7ff bf7d 	b.w	8005a70 <_strtol_l.constprop.0>
 8005b76:	bf00      	nop
 8005b78:	20000054 	.word	0x20000054

08005b7c <rshift>:
 8005b7c:	6903      	ldr	r3, [r0, #16]
 8005b7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b82:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005b86:	f100 0414 	add.w	r4, r0, #20
 8005b8a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005b8e:	dd46      	ble.n	8005c1e <rshift+0xa2>
 8005b90:	f011 011f 	ands.w	r1, r1, #31
 8005b94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005b98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005b9c:	d10c      	bne.n	8005bb8 <rshift+0x3c>
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	f100 0710 	add.w	r7, r0, #16
 8005ba4:	42b1      	cmp	r1, r6
 8005ba6:	d335      	bcc.n	8005c14 <rshift+0x98>
 8005ba8:	1a9b      	subs	r3, r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	1eea      	subs	r2, r5, #3
 8005bae:	4296      	cmp	r6, r2
 8005bb0:	bf38      	it	cc
 8005bb2:	2300      	movcc	r3, #0
 8005bb4:	4423      	add	r3, r4
 8005bb6:	e015      	b.n	8005be4 <rshift+0x68>
 8005bb8:	46a1      	mov	r9, r4
 8005bba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005bbe:	f1c1 0820 	rsb	r8, r1, #32
 8005bc2:	40cf      	lsrs	r7, r1
 8005bc4:	f105 0e04 	add.w	lr, r5, #4
 8005bc8:	4576      	cmp	r6, lr
 8005bca:	46f4      	mov	ip, lr
 8005bcc:	d816      	bhi.n	8005bfc <rshift+0x80>
 8005bce:	1a9a      	subs	r2, r3, r2
 8005bd0:	0092      	lsls	r2, r2, #2
 8005bd2:	3a04      	subs	r2, #4
 8005bd4:	3501      	adds	r5, #1
 8005bd6:	42ae      	cmp	r6, r5
 8005bd8:	bf38      	it	cc
 8005bda:	2200      	movcc	r2, #0
 8005bdc:	18a3      	adds	r3, r4, r2
 8005bde:	50a7      	str	r7, [r4, r2]
 8005be0:	b107      	cbz	r7, 8005be4 <rshift+0x68>
 8005be2:	3304      	adds	r3, #4
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	eba3 0204 	sub.w	r2, r3, r4
 8005bea:	bf08      	it	eq
 8005bec:	2300      	moveq	r3, #0
 8005bee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005bf2:	6102      	str	r2, [r0, #16]
 8005bf4:	bf08      	it	eq
 8005bf6:	6143      	streq	r3, [r0, #20]
 8005bf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005bfc:	f8dc c000 	ldr.w	ip, [ip]
 8005c00:	fa0c fc08 	lsl.w	ip, ip, r8
 8005c04:	ea4c 0707 	orr.w	r7, ip, r7
 8005c08:	f849 7b04 	str.w	r7, [r9], #4
 8005c0c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005c10:	40cf      	lsrs	r7, r1
 8005c12:	e7d9      	b.n	8005bc8 <rshift+0x4c>
 8005c14:	f851 cb04 	ldr.w	ip, [r1], #4
 8005c18:	f847 cf04 	str.w	ip, [r7, #4]!
 8005c1c:	e7c2      	b.n	8005ba4 <rshift+0x28>
 8005c1e:	4623      	mov	r3, r4
 8005c20:	e7e0      	b.n	8005be4 <rshift+0x68>

08005c22 <__hexdig_fun>:
 8005c22:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005c26:	2b09      	cmp	r3, #9
 8005c28:	d802      	bhi.n	8005c30 <__hexdig_fun+0xe>
 8005c2a:	3820      	subs	r0, #32
 8005c2c:	b2c0      	uxtb	r0, r0
 8005c2e:	4770      	bx	lr
 8005c30:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005c34:	2b05      	cmp	r3, #5
 8005c36:	d801      	bhi.n	8005c3c <__hexdig_fun+0x1a>
 8005c38:	3847      	subs	r0, #71	; 0x47
 8005c3a:	e7f7      	b.n	8005c2c <__hexdig_fun+0xa>
 8005c3c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005c40:	2b05      	cmp	r3, #5
 8005c42:	d801      	bhi.n	8005c48 <__hexdig_fun+0x26>
 8005c44:	3827      	subs	r0, #39	; 0x27
 8005c46:	e7f1      	b.n	8005c2c <__hexdig_fun+0xa>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	4770      	bx	lr

08005c4c <__gethex>:
 8005c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c50:	b08b      	sub	sp, #44	; 0x2c
 8005c52:	9305      	str	r3, [sp, #20]
 8005c54:	4bb2      	ldr	r3, [pc, #712]	; (8005f20 <__gethex+0x2d4>)
 8005c56:	9002      	str	r0, [sp, #8]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	468b      	mov	fp, r1
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	4690      	mov	r8, r2
 8005c60:	9303      	str	r3, [sp, #12]
 8005c62:	f7fa faeb 	bl	800023c <strlen>
 8005c66:	4682      	mov	sl, r0
 8005c68:	9b03      	ldr	r3, [sp, #12]
 8005c6a:	f8db 2000 	ldr.w	r2, [fp]
 8005c6e:	4403      	add	r3, r0
 8005c70:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005c74:	9306      	str	r3, [sp, #24]
 8005c76:	1c93      	adds	r3, r2, #2
 8005c78:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005c7c:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005c80:	32fe      	adds	r2, #254	; 0xfe
 8005c82:	18d1      	adds	r1, r2, r3
 8005c84:	461f      	mov	r7, r3
 8005c86:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005c8a:	9101      	str	r1, [sp, #4]
 8005c8c:	2830      	cmp	r0, #48	; 0x30
 8005c8e:	d0f8      	beq.n	8005c82 <__gethex+0x36>
 8005c90:	f7ff ffc7 	bl	8005c22 <__hexdig_fun>
 8005c94:	4604      	mov	r4, r0
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d13a      	bne.n	8005d10 <__gethex+0xc4>
 8005c9a:	4652      	mov	r2, sl
 8005c9c:	4638      	mov	r0, r7
 8005c9e:	9903      	ldr	r1, [sp, #12]
 8005ca0:	f000 ffc2 	bl	8006c28 <strncmp>
 8005ca4:	4605      	mov	r5, r0
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	d166      	bne.n	8005d78 <__gethex+0x12c>
 8005caa:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005cae:	eb07 060a 	add.w	r6, r7, sl
 8005cb2:	f7ff ffb6 	bl	8005c22 <__hexdig_fun>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d060      	beq.n	8005d7c <__gethex+0x130>
 8005cba:	4633      	mov	r3, r6
 8005cbc:	7818      	ldrb	r0, [r3, #0]
 8005cbe:	461f      	mov	r7, r3
 8005cc0:	2830      	cmp	r0, #48	; 0x30
 8005cc2:	f103 0301 	add.w	r3, r3, #1
 8005cc6:	d0f9      	beq.n	8005cbc <__gethex+0x70>
 8005cc8:	f7ff ffab 	bl	8005c22 <__hexdig_fun>
 8005ccc:	2301      	movs	r3, #1
 8005cce:	fab0 f480 	clz	r4, r0
 8005cd2:	4635      	mov	r5, r6
 8005cd4:	0964      	lsrs	r4, r4, #5
 8005cd6:	9301      	str	r3, [sp, #4]
 8005cd8:	463a      	mov	r2, r7
 8005cda:	4616      	mov	r6, r2
 8005cdc:	7830      	ldrb	r0, [r6, #0]
 8005cde:	3201      	adds	r2, #1
 8005ce0:	f7ff ff9f 	bl	8005c22 <__hexdig_fun>
 8005ce4:	2800      	cmp	r0, #0
 8005ce6:	d1f8      	bne.n	8005cda <__gethex+0x8e>
 8005ce8:	4652      	mov	r2, sl
 8005cea:	4630      	mov	r0, r6
 8005cec:	9903      	ldr	r1, [sp, #12]
 8005cee:	f000 ff9b 	bl	8006c28 <strncmp>
 8005cf2:	b980      	cbnz	r0, 8005d16 <__gethex+0xca>
 8005cf4:	b94d      	cbnz	r5, 8005d0a <__gethex+0xbe>
 8005cf6:	eb06 050a 	add.w	r5, r6, sl
 8005cfa:	462a      	mov	r2, r5
 8005cfc:	4616      	mov	r6, r2
 8005cfe:	7830      	ldrb	r0, [r6, #0]
 8005d00:	3201      	adds	r2, #1
 8005d02:	f7ff ff8e 	bl	8005c22 <__hexdig_fun>
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d1f8      	bne.n	8005cfc <__gethex+0xb0>
 8005d0a:	1bad      	subs	r5, r5, r6
 8005d0c:	00ad      	lsls	r5, r5, #2
 8005d0e:	e004      	b.n	8005d1a <__gethex+0xce>
 8005d10:	2400      	movs	r4, #0
 8005d12:	4625      	mov	r5, r4
 8005d14:	e7e0      	b.n	8005cd8 <__gethex+0x8c>
 8005d16:	2d00      	cmp	r5, #0
 8005d18:	d1f7      	bne.n	8005d0a <__gethex+0xbe>
 8005d1a:	7833      	ldrb	r3, [r6, #0]
 8005d1c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d20:	2b50      	cmp	r3, #80	; 0x50
 8005d22:	d139      	bne.n	8005d98 <__gethex+0x14c>
 8005d24:	7873      	ldrb	r3, [r6, #1]
 8005d26:	2b2b      	cmp	r3, #43	; 0x2b
 8005d28:	d02a      	beq.n	8005d80 <__gethex+0x134>
 8005d2a:	2b2d      	cmp	r3, #45	; 0x2d
 8005d2c:	d02c      	beq.n	8005d88 <__gethex+0x13c>
 8005d2e:	f04f 0900 	mov.w	r9, #0
 8005d32:	1c71      	adds	r1, r6, #1
 8005d34:	7808      	ldrb	r0, [r1, #0]
 8005d36:	f7ff ff74 	bl	8005c22 <__hexdig_fun>
 8005d3a:	1e43      	subs	r3, r0, #1
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b18      	cmp	r3, #24
 8005d40:	d82a      	bhi.n	8005d98 <__gethex+0x14c>
 8005d42:	f1a0 0210 	sub.w	r2, r0, #16
 8005d46:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005d4a:	f7ff ff6a 	bl	8005c22 <__hexdig_fun>
 8005d4e:	1e43      	subs	r3, r0, #1
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b18      	cmp	r3, #24
 8005d54:	d91b      	bls.n	8005d8e <__gethex+0x142>
 8005d56:	f1b9 0f00 	cmp.w	r9, #0
 8005d5a:	d000      	beq.n	8005d5e <__gethex+0x112>
 8005d5c:	4252      	negs	r2, r2
 8005d5e:	4415      	add	r5, r2
 8005d60:	f8cb 1000 	str.w	r1, [fp]
 8005d64:	b1d4      	cbz	r4, 8005d9c <__gethex+0x150>
 8005d66:	9b01      	ldr	r3, [sp, #4]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	bf14      	ite	ne
 8005d6c:	2700      	movne	r7, #0
 8005d6e:	2706      	moveq	r7, #6
 8005d70:	4638      	mov	r0, r7
 8005d72:	b00b      	add	sp, #44	; 0x2c
 8005d74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d78:	463e      	mov	r6, r7
 8005d7a:	4625      	mov	r5, r4
 8005d7c:	2401      	movs	r4, #1
 8005d7e:	e7cc      	b.n	8005d1a <__gethex+0xce>
 8005d80:	f04f 0900 	mov.w	r9, #0
 8005d84:	1cb1      	adds	r1, r6, #2
 8005d86:	e7d5      	b.n	8005d34 <__gethex+0xe8>
 8005d88:	f04f 0901 	mov.w	r9, #1
 8005d8c:	e7fa      	b.n	8005d84 <__gethex+0x138>
 8005d8e:	230a      	movs	r3, #10
 8005d90:	fb03 0202 	mla	r2, r3, r2, r0
 8005d94:	3a10      	subs	r2, #16
 8005d96:	e7d6      	b.n	8005d46 <__gethex+0xfa>
 8005d98:	4631      	mov	r1, r6
 8005d9a:	e7e1      	b.n	8005d60 <__gethex+0x114>
 8005d9c:	4621      	mov	r1, r4
 8005d9e:	1bf3      	subs	r3, r6, r7
 8005da0:	3b01      	subs	r3, #1
 8005da2:	2b07      	cmp	r3, #7
 8005da4:	dc0a      	bgt.n	8005dbc <__gethex+0x170>
 8005da6:	9802      	ldr	r0, [sp, #8]
 8005da8:	f000 fa6c 	bl	8006284 <_Balloc>
 8005dac:	4604      	mov	r4, r0
 8005dae:	b940      	cbnz	r0, 8005dc2 <__gethex+0x176>
 8005db0:	4602      	mov	r2, r0
 8005db2:	21de      	movs	r1, #222	; 0xde
 8005db4:	4b5b      	ldr	r3, [pc, #364]	; (8005f24 <__gethex+0x2d8>)
 8005db6:	485c      	ldr	r0, [pc, #368]	; (8005f28 <__gethex+0x2dc>)
 8005db8:	f000 ff58 	bl	8006c6c <__assert_func>
 8005dbc:	3101      	adds	r1, #1
 8005dbe:	105b      	asrs	r3, r3, #1
 8005dc0:	e7ef      	b.n	8005da2 <__gethex+0x156>
 8005dc2:	f04f 0b00 	mov.w	fp, #0
 8005dc6:	f100 0914 	add.w	r9, r0, #20
 8005dca:	f1ca 0301 	rsb	r3, sl, #1
 8005dce:	f8cd 9010 	str.w	r9, [sp, #16]
 8005dd2:	f8cd b004 	str.w	fp, [sp, #4]
 8005dd6:	9308      	str	r3, [sp, #32]
 8005dd8:	42b7      	cmp	r7, r6
 8005dda:	d33f      	bcc.n	8005e5c <__gethex+0x210>
 8005ddc:	9f04      	ldr	r7, [sp, #16]
 8005dde:	9b01      	ldr	r3, [sp, #4]
 8005de0:	f847 3b04 	str.w	r3, [r7], #4
 8005de4:	eba7 0709 	sub.w	r7, r7, r9
 8005de8:	10bf      	asrs	r7, r7, #2
 8005dea:	6127      	str	r7, [r4, #16]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f000 fb3b 	bl	8006468 <__hi0bits>
 8005df2:	017f      	lsls	r7, r7, #5
 8005df4:	f8d8 6000 	ldr.w	r6, [r8]
 8005df8:	1a3f      	subs	r7, r7, r0
 8005dfa:	42b7      	cmp	r7, r6
 8005dfc:	dd62      	ble.n	8005ec4 <__gethex+0x278>
 8005dfe:	1bbf      	subs	r7, r7, r6
 8005e00:	4639      	mov	r1, r7
 8005e02:	4620      	mov	r0, r4
 8005e04:	f000 fed5 	bl	8006bb2 <__any_on>
 8005e08:	4682      	mov	sl, r0
 8005e0a:	b1a8      	cbz	r0, 8005e38 <__gethex+0x1ec>
 8005e0c:	f04f 0a01 	mov.w	sl, #1
 8005e10:	1e7b      	subs	r3, r7, #1
 8005e12:	1159      	asrs	r1, r3, #5
 8005e14:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005e18:	f003 021f 	and.w	r2, r3, #31
 8005e1c:	fa0a f202 	lsl.w	r2, sl, r2
 8005e20:	420a      	tst	r2, r1
 8005e22:	d009      	beq.n	8005e38 <__gethex+0x1ec>
 8005e24:	4553      	cmp	r3, sl
 8005e26:	dd05      	ble.n	8005e34 <__gethex+0x1e8>
 8005e28:	4620      	mov	r0, r4
 8005e2a:	1eb9      	subs	r1, r7, #2
 8005e2c:	f000 fec1 	bl	8006bb2 <__any_on>
 8005e30:	2800      	cmp	r0, #0
 8005e32:	d144      	bne.n	8005ebe <__gethex+0x272>
 8005e34:	f04f 0a02 	mov.w	sl, #2
 8005e38:	4639      	mov	r1, r7
 8005e3a:	4620      	mov	r0, r4
 8005e3c:	f7ff fe9e 	bl	8005b7c <rshift>
 8005e40:	443d      	add	r5, r7
 8005e42:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005e46:	42ab      	cmp	r3, r5
 8005e48:	da4a      	bge.n	8005ee0 <__gethex+0x294>
 8005e4a:	4621      	mov	r1, r4
 8005e4c:	9802      	ldr	r0, [sp, #8]
 8005e4e:	f000 fa59 	bl	8006304 <_Bfree>
 8005e52:	2300      	movs	r3, #0
 8005e54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005e56:	27a3      	movs	r7, #163	; 0xa3
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	e789      	b.n	8005d70 <__gethex+0x124>
 8005e5c:	1e73      	subs	r3, r6, #1
 8005e5e:	9a06      	ldr	r2, [sp, #24]
 8005e60:	9307      	str	r3, [sp, #28]
 8005e62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d019      	beq.n	8005e9e <__gethex+0x252>
 8005e6a:	f1bb 0f20 	cmp.w	fp, #32
 8005e6e:	d107      	bne.n	8005e80 <__gethex+0x234>
 8005e70:	9b04      	ldr	r3, [sp, #16]
 8005e72:	9a01      	ldr	r2, [sp, #4]
 8005e74:	f843 2b04 	str.w	r2, [r3], #4
 8005e78:	9304      	str	r3, [sp, #16]
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	469b      	mov	fp, r3
 8005e7e:	9301      	str	r3, [sp, #4]
 8005e80:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005e84:	f7ff fecd 	bl	8005c22 <__hexdig_fun>
 8005e88:	9b01      	ldr	r3, [sp, #4]
 8005e8a:	f000 000f 	and.w	r0, r0, #15
 8005e8e:	fa00 f00b 	lsl.w	r0, r0, fp
 8005e92:	4303      	orrs	r3, r0
 8005e94:	9301      	str	r3, [sp, #4]
 8005e96:	f10b 0b04 	add.w	fp, fp, #4
 8005e9a:	9b07      	ldr	r3, [sp, #28]
 8005e9c:	e00d      	b.n	8005eba <__gethex+0x26e>
 8005e9e:	9a08      	ldr	r2, [sp, #32]
 8005ea0:	1e73      	subs	r3, r6, #1
 8005ea2:	4413      	add	r3, r2
 8005ea4:	42bb      	cmp	r3, r7
 8005ea6:	d3e0      	bcc.n	8005e6a <__gethex+0x21e>
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	4652      	mov	r2, sl
 8005eac:	9903      	ldr	r1, [sp, #12]
 8005eae:	9309      	str	r3, [sp, #36]	; 0x24
 8005eb0:	f000 feba 	bl	8006c28 <strncmp>
 8005eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eb6:	2800      	cmp	r0, #0
 8005eb8:	d1d7      	bne.n	8005e6a <__gethex+0x21e>
 8005eba:	461e      	mov	r6, r3
 8005ebc:	e78c      	b.n	8005dd8 <__gethex+0x18c>
 8005ebe:	f04f 0a03 	mov.w	sl, #3
 8005ec2:	e7b9      	b.n	8005e38 <__gethex+0x1ec>
 8005ec4:	da09      	bge.n	8005eda <__gethex+0x28e>
 8005ec6:	1bf7      	subs	r7, r6, r7
 8005ec8:	4621      	mov	r1, r4
 8005eca:	463a      	mov	r2, r7
 8005ecc:	9802      	ldr	r0, [sp, #8]
 8005ece:	f000 fc31 	bl	8006734 <__lshift>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	1bed      	subs	r5, r5, r7
 8005ed6:	f100 0914 	add.w	r9, r0, #20
 8005eda:	f04f 0a00 	mov.w	sl, #0
 8005ede:	e7b0      	b.n	8005e42 <__gethex+0x1f6>
 8005ee0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005ee4:	42a8      	cmp	r0, r5
 8005ee6:	dd72      	ble.n	8005fce <__gethex+0x382>
 8005ee8:	1b45      	subs	r5, r0, r5
 8005eea:	42ae      	cmp	r6, r5
 8005eec:	dc35      	bgt.n	8005f5a <__gethex+0x30e>
 8005eee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d029      	beq.n	8005f4a <__gethex+0x2fe>
 8005ef6:	2b03      	cmp	r3, #3
 8005ef8:	d02b      	beq.n	8005f52 <__gethex+0x306>
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	d11c      	bne.n	8005f38 <__gethex+0x2ec>
 8005efe:	42ae      	cmp	r6, r5
 8005f00:	d11a      	bne.n	8005f38 <__gethex+0x2ec>
 8005f02:	2e01      	cmp	r6, #1
 8005f04:	d112      	bne.n	8005f2c <__gethex+0x2e0>
 8005f06:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f0a:	9a05      	ldr	r2, [sp, #20]
 8005f0c:	2762      	movs	r7, #98	; 0x62
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	2301      	movs	r3, #1
 8005f12:	6123      	str	r3, [r4, #16]
 8005f14:	f8c9 3000 	str.w	r3, [r9]
 8005f18:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f1a:	601c      	str	r4, [r3, #0]
 8005f1c:	e728      	b.n	8005d70 <__gethex+0x124>
 8005f1e:	bf00      	nop
 8005f20:	08007f08 	.word	0x08007f08
 8005f24:	08007e91 	.word	0x08007e91
 8005f28:	08007ea2 	.word	0x08007ea2
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	1e71      	subs	r1, r6, #1
 8005f30:	f000 fe3f 	bl	8006bb2 <__any_on>
 8005f34:	2800      	cmp	r0, #0
 8005f36:	d1e6      	bne.n	8005f06 <__gethex+0x2ba>
 8005f38:	4621      	mov	r1, r4
 8005f3a:	9802      	ldr	r0, [sp, #8]
 8005f3c:	f000 f9e2 	bl	8006304 <_Bfree>
 8005f40:	2300      	movs	r3, #0
 8005f42:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005f44:	2750      	movs	r7, #80	; 0x50
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	e712      	b.n	8005d70 <__gethex+0x124>
 8005f4a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d1f3      	bne.n	8005f38 <__gethex+0x2ec>
 8005f50:	e7d9      	b.n	8005f06 <__gethex+0x2ba>
 8005f52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1d6      	bne.n	8005f06 <__gethex+0x2ba>
 8005f58:	e7ee      	b.n	8005f38 <__gethex+0x2ec>
 8005f5a:	1e6f      	subs	r7, r5, #1
 8005f5c:	f1ba 0f00 	cmp.w	sl, #0
 8005f60:	d132      	bne.n	8005fc8 <__gethex+0x37c>
 8005f62:	b127      	cbz	r7, 8005f6e <__gethex+0x322>
 8005f64:	4639      	mov	r1, r7
 8005f66:	4620      	mov	r0, r4
 8005f68:	f000 fe23 	bl	8006bb2 <__any_on>
 8005f6c:	4682      	mov	sl, r0
 8005f6e:	2101      	movs	r1, #1
 8005f70:	117b      	asrs	r3, r7, #5
 8005f72:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005f76:	f007 071f 	and.w	r7, r7, #31
 8005f7a:	fa01 f707 	lsl.w	r7, r1, r7
 8005f7e:	421f      	tst	r7, r3
 8005f80:	f04f 0702 	mov.w	r7, #2
 8005f84:	4629      	mov	r1, r5
 8005f86:	4620      	mov	r0, r4
 8005f88:	bf18      	it	ne
 8005f8a:	f04a 0a02 	orrne.w	sl, sl, #2
 8005f8e:	1b76      	subs	r6, r6, r5
 8005f90:	f7ff fdf4 	bl	8005b7c <rshift>
 8005f94:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005f98:	f1ba 0f00 	cmp.w	sl, #0
 8005f9c:	d048      	beq.n	8006030 <__gethex+0x3e4>
 8005f9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005fa2:	2b02      	cmp	r3, #2
 8005fa4:	d015      	beq.n	8005fd2 <__gethex+0x386>
 8005fa6:	2b03      	cmp	r3, #3
 8005fa8:	d017      	beq.n	8005fda <__gethex+0x38e>
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d109      	bne.n	8005fc2 <__gethex+0x376>
 8005fae:	f01a 0f02 	tst.w	sl, #2
 8005fb2:	d006      	beq.n	8005fc2 <__gethex+0x376>
 8005fb4:	f8d9 0000 	ldr.w	r0, [r9]
 8005fb8:	ea4a 0a00 	orr.w	sl, sl, r0
 8005fbc:	f01a 0f01 	tst.w	sl, #1
 8005fc0:	d10e      	bne.n	8005fe0 <__gethex+0x394>
 8005fc2:	f047 0710 	orr.w	r7, r7, #16
 8005fc6:	e033      	b.n	8006030 <__gethex+0x3e4>
 8005fc8:	f04f 0a01 	mov.w	sl, #1
 8005fcc:	e7cf      	b.n	8005f6e <__gethex+0x322>
 8005fce:	2701      	movs	r7, #1
 8005fd0:	e7e2      	b.n	8005f98 <__gethex+0x34c>
 8005fd2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fd4:	f1c3 0301 	rsb	r3, r3, #1
 8005fd8:	9315      	str	r3, [sp, #84]	; 0x54
 8005fda:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0f0      	beq.n	8005fc2 <__gethex+0x376>
 8005fe0:	f04f 0c00 	mov.w	ip, #0
 8005fe4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005fe8:	f104 0314 	add.w	r3, r4, #20
 8005fec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005ff0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ffa:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005ffe:	d01c      	beq.n	800603a <__gethex+0x3ee>
 8006000:	3201      	adds	r2, #1
 8006002:	6002      	str	r2, [r0, #0]
 8006004:	2f02      	cmp	r7, #2
 8006006:	f104 0314 	add.w	r3, r4, #20
 800600a:	d13d      	bne.n	8006088 <__gethex+0x43c>
 800600c:	f8d8 2000 	ldr.w	r2, [r8]
 8006010:	3a01      	subs	r2, #1
 8006012:	42b2      	cmp	r2, r6
 8006014:	d10a      	bne.n	800602c <__gethex+0x3e0>
 8006016:	2201      	movs	r2, #1
 8006018:	1171      	asrs	r1, r6, #5
 800601a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800601e:	f006 061f 	and.w	r6, r6, #31
 8006022:	fa02 f606 	lsl.w	r6, r2, r6
 8006026:	421e      	tst	r6, r3
 8006028:	bf18      	it	ne
 800602a:	4617      	movne	r7, r2
 800602c:	f047 0720 	orr.w	r7, r7, #32
 8006030:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006032:	601c      	str	r4, [r3, #0]
 8006034:	9b05      	ldr	r3, [sp, #20]
 8006036:	601d      	str	r5, [r3, #0]
 8006038:	e69a      	b.n	8005d70 <__gethex+0x124>
 800603a:	4299      	cmp	r1, r3
 800603c:	f843 cc04 	str.w	ip, [r3, #-4]
 8006040:	d8d8      	bhi.n	8005ff4 <__gethex+0x3a8>
 8006042:	68a3      	ldr	r3, [r4, #8]
 8006044:	459b      	cmp	fp, r3
 8006046:	db17      	blt.n	8006078 <__gethex+0x42c>
 8006048:	6861      	ldr	r1, [r4, #4]
 800604a:	9802      	ldr	r0, [sp, #8]
 800604c:	3101      	adds	r1, #1
 800604e:	f000 f919 	bl	8006284 <_Balloc>
 8006052:	4681      	mov	r9, r0
 8006054:	b918      	cbnz	r0, 800605e <__gethex+0x412>
 8006056:	4602      	mov	r2, r0
 8006058:	2184      	movs	r1, #132	; 0x84
 800605a:	4b19      	ldr	r3, [pc, #100]	; (80060c0 <__gethex+0x474>)
 800605c:	e6ab      	b.n	8005db6 <__gethex+0x16a>
 800605e:	6922      	ldr	r2, [r4, #16]
 8006060:	f104 010c 	add.w	r1, r4, #12
 8006064:	3202      	adds	r2, #2
 8006066:	0092      	lsls	r2, r2, #2
 8006068:	300c      	adds	r0, #12
 800606a:	f7fe fddf 	bl	8004c2c <memcpy>
 800606e:	4621      	mov	r1, r4
 8006070:	9802      	ldr	r0, [sp, #8]
 8006072:	f000 f947 	bl	8006304 <_Bfree>
 8006076:	464c      	mov	r4, r9
 8006078:	6923      	ldr	r3, [r4, #16]
 800607a:	1c5a      	adds	r2, r3, #1
 800607c:	6122      	str	r2, [r4, #16]
 800607e:	2201      	movs	r2, #1
 8006080:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006084:	615a      	str	r2, [r3, #20]
 8006086:	e7bd      	b.n	8006004 <__gethex+0x3b8>
 8006088:	6922      	ldr	r2, [r4, #16]
 800608a:	455a      	cmp	r2, fp
 800608c:	dd0b      	ble.n	80060a6 <__gethex+0x45a>
 800608e:	2101      	movs	r1, #1
 8006090:	4620      	mov	r0, r4
 8006092:	f7ff fd73 	bl	8005b7c <rshift>
 8006096:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800609a:	3501      	adds	r5, #1
 800609c:	42ab      	cmp	r3, r5
 800609e:	f6ff aed4 	blt.w	8005e4a <__gethex+0x1fe>
 80060a2:	2701      	movs	r7, #1
 80060a4:	e7c2      	b.n	800602c <__gethex+0x3e0>
 80060a6:	f016 061f 	ands.w	r6, r6, #31
 80060aa:	d0fa      	beq.n	80060a2 <__gethex+0x456>
 80060ac:	4453      	add	r3, sl
 80060ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80060b2:	f000 f9d9 	bl	8006468 <__hi0bits>
 80060b6:	f1c6 0620 	rsb	r6, r6, #32
 80060ba:	42b0      	cmp	r0, r6
 80060bc:	dbe7      	blt.n	800608e <__gethex+0x442>
 80060be:	e7f0      	b.n	80060a2 <__gethex+0x456>
 80060c0:	08007e91 	.word	0x08007e91

080060c4 <L_shift>:
 80060c4:	f1c2 0208 	rsb	r2, r2, #8
 80060c8:	0092      	lsls	r2, r2, #2
 80060ca:	b570      	push	{r4, r5, r6, lr}
 80060cc:	f1c2 0620 	rsb	r6, r2, #32
 80060d0:	6843      	ldr	r3, [r0, #4]
 80060d2:	6804      	ldr	r4, [r0, #0]
 80060d4:	fa03 f506 	lsl.w	r5, r3, r6
 80060d8:	432c      	orrs	r4, r5
 80060da:	40d3      	lsrs	r3, r2
 80060dc:	6004      	str	r4, [r0, #0]
 80060de:	f840 3f04 	str.w	r3, [r0, #4]!
 80060e2:	4288      	cmp	r0, r1
 80060e4:	d3f4      	bcc.n	80060d0 <L_shift+0xc>
 80060e6:	bd70      	pop	{r4, r5, r6, pc}

080060e8 <__match>:
 80060e8:	b530      	push	{r4, r5, lr}
 80060ea:	6803      	ldr	r3, [r0, #0]
 80060ec:	3301      	adds	r3, #1
 80060ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060f2:	b914      	cbnz	r4, 80060fa <__match+0x12>
 80060f4:	6003      	str	r3, [r0, #0]
 80060f6:	2001      	movs	r0, #1
 80060f8:	bd30      	pop	{r4, r5, pc}
 80060fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8006102:	2d19      	cmp	r5, #25
 8006104:	bf98      	it	ls
 8006106:	3220      	addls	r2, #32
 8006108:	42a2      	cmp	r2, r4
 800610a:	d0f0      	beq.n	80060ee <__match+0x6>
 800610c:	2000      	movs	r0, #0
 800610e:	e7f3      	b.n	80060f8 <__match+0x10>

08006110 <__hexnan>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	2500      	movs	r5, #0
 8006116:	680b      	ldr	r3, [r1, #0]
 8006118:	4682      	mov	sl, r0
 800611a:	115e      	asrs	r6, r3, #5
 800611c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006120:	f013 031f 	ands.w	r3, r3, #31
 8006124:	bf18      	it	ne
 8006126:	3604      	addne	r6, #4
 8006128:	1f37      	subs	r7, r6, #4
 800612a:	46b9      	mov	r9, r7
 800612c:	463c      	mov	r4, r7
 800612e:	46ab      	mov	fp, r5
 8006130:	b087      	sub	sp, #28
 8006132:	4690      	mov	r8, r2
 8006134:	6802      	ldr	r2, [r0, #0]
 8006136:	9301      	str	r3, [sp, #4]
 8006138:	f846 5c04 	str.w	r5, [r6, #-4]
 800613c:	9502      	str	r5, [sp, #8]
 800613e:	7851      	ldrb	r1, [r2, #1]
 8006140:	1c53      	adds	r3, r2, #1
 8006142:	9303      	str	r3, [sp, #12]
 8006144:	b341      	cbz	r1, 8006198 <__hexnan+0x88>
 8006146:	4608      	mov	r0, r1
 8006148:	9205      	str	r2, [sp, #20]
 800614a:	9104      	str	r1, [sp, #16]
 800614c:	f7ff fd69 	bl	8005c22 <__hexdig_fun>
 8006150:	2800      	cmp	r0, #0
 8006152:	d14f      	bne.n	80061f4 <__hexnan+0xe4>
 8006154:	9904      	ldr	r1, [sp, #16]
 8006156:	9a05      	ldr	r2, [sp, #20]
 8006158:	2920      	cmp	r1, #32
 800615a:	d818      	bhi.n	800618e <__hexnan+0x7e>
 800615c:	9b02      	ldr	r3, [sp, #8]
 800615e:	459b      	cmp	fp, r3
 8006160:	dd13      	ble.n	800618a <__hexnan+0x7a>
 8006162:	454c      	cmp	r4, r9
 8006164:	d206      	bcs.n	8006174 <__hexnan+0x64>
 8006166:	2d07      	cmp	r5, #7
 8006168:	dc04      	bgt.n	8006174 <__hexnan+0x64>
 800616a:	462a      	mov	r2, r5
 800616c:	4649      	mov	r1, r9
 800616e:	4620      	mov	r0, r4
 8006170:	f7ff ffa8 	bl	80060c4 <L_shift>
 8006174:	4544      	cmp	r4, r8
 8006176:	d950      	bls.n	800621a <__hexnan+0x10a>
 8006178:	2300      	movs	r3, #0
 800617a:	f1a4 0904 	sub.w	r9, r4, #4
 800617e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006182:	461d      	mov	r5, r3
 8006184:	464c      	mov	r4, r9
 8006186:	f8cd b008 	str.w	fp, [sp, #8]
 800618a:	9a03      	ldr	r2, [sp, #12]
 800618c:	e7d7      	b.n	800613e <__hexnan+0x2e>
 800618e:	2929      	cmp	r1, #41	; 0x29
 8006190:	d156      	bne.n	8006240 <__hexnan+0x130>
 8006192:	3202      	adds	r2, #2
 8006194:	f8ca 2000 	str.w	r2, [sl]
 8006198:	f1bb 0f00 	cmp.w	fp, #0
 800619c:	d050      	beq.n	8006240 <__hexnan+0x130>
 800619e:	454c      	cmp	r4, r9
 80061a0:	d206      	bcs.n	80061b0 <__hexnan+0xa0>
 80061a2:	2d07      	cmp	r5, #7
 80061a4:	dc04      	bgt.n	80061b0 <__hexnan+0xa0>
 80061a6:	462a      	mov	r2, r5
 80061a8:	4649      	mov	r1, r9
 80061aa:	4620      	mov	r0, r4
 80061ac:	f7ff ff8a 	bl	80060c4 <L_shift>
 80061b0:	4544      	cmp	r4, r8
 80061b2:	d934      	bls.n	800621e <__hexnan+0x10e>
 80061b4:	4623      	mov	r3, r4
 80061b6:	f1a8 0204 	sub.w	r2, r8, #4
 80061ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80061be:	429f      	cmp	r7, r3
 80061c0:	f842 1f04 	str.w	r1, [r2, #4]!
 80061c4:	d2f9      	bcs.n	80061ba <__hexnan+0xaa>
 80061c6:	1b3b      	subs	r3, r7, r4
 80061c8:	f023 0303 	bic.w	r3, r3, #3
 80061cc:	3304      	adds	r3, #4
 80061ce:	3401      	adds	r4, #1
 80061d0:	3e03      	subs	r6, #3
 80061d2:	42b4      	cmp	r4, r6
 80061d4:	bf88      	it	hi
 80061d6:	2304      	movhi	r3, #4
 80061d8:	2200      	movs	r2, #0
 80061da:	4443      	add	r3, r8
 80061dc:	f843 2b04 	str.w	r2, [r3], #4
 80061e0:	429f      	cmp	r7, r3
 80061e2:	d2fb      	bcs.n	80061dc <__hexnan+0xcc>
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	b91b      	cbnz	r3, 80061f0 <__hexnan+0xe0>
 80061e8:	4547      	cmp	r7, r8
 80061ea:	d127      	bne.n	800623c <__hexnan+0x12c>
 80061ec:	2301      	movs	r3, #1
 80061ee:	603b      	str	r3, [r7, #0]
 80061f0:	2005      	movs	r0, #5
 80061f2:	e026      	b.n	8006242 <__hexnan+0x132>
 80061f4:	3501      	adds	r5, #1
 80061f6:	2d08      	cmp	r5, #8
 80061f8:	f10b 0b01 	add.w	fp, fp, #1
 80061fc:	dd06      	ble.n	800620c <__hexnan+0xfc>
 80061fe:	4544      	cmp	r4, r8
 8006200:	d9c3      	bls.n	800618a <__hexnan+0x7a>
 8006202:	2300      	movs	r3, #0
 8006204:	2501      	movs	r5, #1
 8006206:	f844 3c04 	str.w	r3, [r4, #-4]
 800620a:	3c04      	subs	r4, #4
 800620c:	6822      	ldr	r2, [r4, #0]
 800620e:	f000 000f 	and.w	r0, r0, #15
 8006212:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8006216:	6022      	str	r2, [r4, #0]
 8006218:	e7b7      	b.n	800618a <__hexnan+0x7a>
 800621a:	2508      	movs	r5, #8
 800621c:	e7b5      	b.n	800618a <__hexnan+0x7a>
 800621e:	9b01      	ldr	r3, [sp, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0df      	beq.n	80061e4 <__hexnan+0xd4>
 8006224:	f04f 32ff 	mov.w	r2, #4294967295
 8006228:	f1c3 0320 	rsb	r3, r3, #32
 800622c:	fa22 f303 	lsr.w	r3, r2, r3
 8006230:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006234:	401a      	ands	r2, r3
 8006236:	f846 2c04 	str.w	r2, [r6, #-4]
 800623a:	e7d3      	b.n	80061e4 <__hexnan+0xd4>
 800623c:	3f04      	subs	r7, #4
 800623e:	e7d1      	b.n	80061e4 <__hexnan+0xd4>
 8006240:	2004      	movs	r0, #4
 8006242:	b007      	add	sp, #28
 8006244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006248 <__ascii_mbtowc>:
 8006248:	b082      	sub	sp, #8
 800624a:	b901      	cbnz	r1, 800624e <__ascii_mbtowc+0x6>
 800624c:	a901      	add	r1, sp, #4
 800624e:	b142      	cbz	r2, 8006262 <__ascii_mbtowc+0x1a>
 8006250:	b14b      	cbz	r3, 8006266 <__ascii_mbtowc+0x1e>
 8006252:	7813      	ldrb	r3, [r2, #0]
 8006254:	600b      	str	r3, [r1, #0]
 8006256:	7812      	ldrb	r2, [r2, #0]
 8006258:	1e10      	subs	r0, r2, #0
 800625a:	bf18      	it	ne
 800625c:	2001      	movne	r0, #1
 800625e:	b002      	add	sp, #8
 8006260:	4770      	bx	lr
 8006262:	4610      	mov	r0, r2
 8006264:	e7fb      	b.n	800625e <__ascii_mbtowc+0x16>
 8006266:	f06f 0001 	mvn.w	r0, #1
 800626a:	e7f8      	b.n	800625e <__ascii_mbtowc+0x16>

0800626c <__malloc_lock>:
 800626c:	4801      	ldr	r0, [pc, #4]	; (8006274 <__malloc_lock+0x8>)
 800626e:	f000 bd2e 	b.w	8006cce <__retarget_lock_acquire_recursive>
 8006272:	bf00      	nop
 8006274:	20000e88 	.word	0x20000e88

08006278 <__malloc_unlock>:
 8006278:	4801      	ldr	r0, [pc, #4]	; (8006280 <__malloc_unlock+0x8>)
 800627a:	f000 bd29 	b.w	8006cd0 <__retarget_lock_release_recursive>
 800627e:	bf00      	nop
 8006280:	20000e88 	.word	0x20000e88

08006284 <_Balloc>:
 8006284:	b570      	push	{r4, r5, r6, lr}
 8006286:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006288:	4604      	mov	r4, r0
 800628a:	460d      	mov	r5, r1
 800628c:	b976      	cbnz	r6, 80062ac <_Balloc+0x28>
 800628e:	2010      	movs	r0, #16
 8006290:	f7fe fcbc 	bl	8004c0c <malloc>
 8006294:	4602      	mov	r2, r0
 8006296:	6260      	str	r0, [r4, #36]	; 0x24
 8006298:	b920      	cbnz	r0, 80062a4 <_Balloc+0x20>
 800629a:	2166      	movs	r1, #102	; 0x66
 800629c:	4b17      	ldr	r3, [pc, #92]	; (80062fc <_Balloc+0x78>)
 800629e:	4818      	ldr	r0, [pc, #96]	; (8006300 <_Balloc+0x7c>)
 80062a0:	f000 fce4 	bl	8006c6c <__assert_func>
 80062a4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80062a8:	6006      	str	r6, [r0, #0]
 80062aa:	60c6      	str	r6, [r0, #12]
 80062ac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80062ae:	68f3      	ldr	r3, [r6, #12]
 80062b0:	b183      	cbz	r3, 80062d4 <_Balloc+0x50>
 80062b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062b4:	68db      	ldr	r3, [r3, #12]
 80062b6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062ba:	b9b8      	cbnz	r0, 80062ec <_Balloc+0x68>
 80062bc:	2101      	movs	r1, #1
 80062be:	fa01 f605 	lsl.w	r6, r1, r5
 80062c2:	1d72      	adds	r2, r6, #5
 80062c4:	4620      	mov	r0, r4
 80062c6:	0092      	lsls	r2, r2, #2
 80062c8:	f000 fc94 	bl	8006bf4 <_calloc_r>
 80062cc:	b160      	cbz	r0, 80062e8 <_Balloc+0x64>
 80062ce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062d2:	e00e      	b.n	80062f2 <_Balloc+0x6e>
 80062d4:	2221      	movs	r2, #33	; 0x21
 80062d6:	2104      	movs	r1, #4
 80062d8:	4620      	mov	r0, r4
 80062da:	f000 fc8b 	bl	8006bf4 <_calloc_r>
 80062de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062e0:	60f0      	str	r0, [r6, #12]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e4      	bne.n	80062b2 <_Balloc+0x2e>
 80062e8:	2000      	movs	r0, #0
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
 80062ec:	6802      	ldr	r2, [r0, #0]
 80062ee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062f2:	2300      	movs	r3, #0
 80062f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062f8:	e7f7      	b.n	80062ea <_Balloc+0x66>
 80062fa:	bf00      	nop
 80062fc:	08007f1c 	.word	0x08007f1c
 8006300:	08007f33 	.word	0x08007f33

08006304 <_Bfree>:
 8006304:	b570      	push	{r4, r5, r6, lr}
 8006306:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006308:	4605      	mov	r5, r0
 800630a:	460c      	mov	r4, r1
 800630c:	b976      	cbnz	r6, 800632c <_Bfree+0x28>
 800630e:	2010      	movs	r0, #16
 8006310:	f7fe fc7c 	bl	8004c0c <malloc>
 8006314:	4602      	mov	r2, r0
 8006316:	6268      	str	r0, [r5, #36]	; 0x24
 8006318:	b920      	cbnz	r0, 8006324 <_Bfree+0x20>
 800631a:	218a      	movs	r1, #138	; 0x8a
 800631c:	4b08      	ldr	r3, [pc, #32]	; (8006340 <_Bfree+0x3c>)
 800631e:	4809      	ldr	r0, [pc, #36]	; (8006344 <_Bfree+0x40>)
 8006320:	f000 fca4 	bl	8006c6c <__assert_func>
 8006324:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006328:	6006      	str	r6, [r0, #0]
 800632a:	60c6      	str	r6, [r0, #12]
 800632c:	b13c      	cbz	r4, 800633e <_Bfree+0x3a>
 800632e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006330:	6862      	ldr	r2, [r4, #4]
 8006332:	68db      	ldr	r3, [r3, #12]
 8006334:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006338:	6021      	str	r1, [r4, #0]
 800633a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800633e:	bd70      	pop	{r4, r5, r6, pc}
 8006340:	08007f1c 	.word	0x08007f1c
 8006344:	08007f33 	.word	0x08007f33

08006348 <__multadd>:
 8006348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800634c:	4607      	mov	r7, r0
 800634e:	460c      	mov	r4, r1
 8006350:	461e      	mov	r6, r3
 8006352:	2000      	movs	r0, #0
 8006354:	690d      	ldr	r5, [r1, #16]
 8006356:	f101 0c14 	add.w	ip, r1, #20
 800635a:	f8dc 3000 	ldr.w	r3, [ip]
 800635e:	3001      	adds	r0, #1
 8006360:	b299      	uxth	r1, r3
 8006362:	fb02 6101 	mla	r1, r2, r1, r6
 8006366:	0c1e      	lsrs	r6, r3, #16
 8006368:	0c0b      	lsrs	r3, r1, #16
 800636a:	fb02 3306 	mla	r3, r2, r6, r3
 800636e:	b289      	uxth	r1, r1
 8006370:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006374:	4285      	cmp	r5, r0
 8006376:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800637a:	f84c 1b04 	str.w	r1, [ip], #4
 800637e:	dcec      	bgt.n	800635a <__multadd+0x12>
 8006380:	b30e      	cbz	r6, 80063c6 <__multadd+0x7e>
 8006382:	68a3      	ldr	r3, [r4, #8]
 8006384:	42ab      	cmp	r3, r5
 8006386:	dc19      	bgt.n	80063bc <__multadd+0x74>
 8006388:	6861      	ldr	r1, [r4, #4]
 800638a:	4638      	mov	r0, r7
 800638c:	3101      	adds	r1, #1
 800638e:	f7ff ff79 	bl	8006284 <_Balloc>
 8006392:	4680      	mov	r8, r0
 8006394:	b928      	cbnz	r0, 80063a2 <__multadd+0x5a>
 8006396:	4602      	mov	r2, r0
 8006398:	21b5      	movs	r1, #181	; 0xb5
 800639a:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <__multadd+0x84>)
 800639c:	480c      	ldr	r0, [pc, #48]	; (80063d0 <__multadd+0x88>)
 800639e:	f000 fc65 	bl	8006c6c <__assert_func>
 80063a2:	6922      	ldr	r2, [r4, #16]
 80063a4:	f104 010c 	add.w	r1, r4, #12
 80063a8:	3202      	adds	r2, #2
 80063aa:	0092      	lsls	r2, r2, #2
 80063ac:	300c      	adds	r0, #12
 80063ae:	f7fe fc3d 	bl	8004c2c <memcpy>
 80063b2:	4621      	mov	r1, r4
 80063b4:	4638      	mov	r0, r7
 80063b6:	f7ff ffa5 	bl	8006304 <_Bfree>
 80063ba:	4644      	mov	r4, r8
 80063bc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063c0:	3501      	adds	r5, #1
 80063c2:	615e      	str	r6, [r3, #20]
 80063c4:	6125      	str	r5, [r4, #16]
 80063c6:	4620      	mov	r0, r4
 80063c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063cc:	08007e91 	.word	0x08007e91
 80063d0:	08007f33 	.word	0x08007f33

080063d4 <__s2b>:
 80063d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063d8:	4615      	mov	r5, r2
 80063da:	2209      	movs	r2, #9
 80063dc:	461f      	mov	r7, r3
 80063de:	3308      	adds	r3, #8
 80063e0:	460c      	mov	r4, r1
 80063e2:	fb93 f3f2 	sdiv	r3, r3, r2
 80063e6:	4606      	mov	r6, r0
 80063e8:	2201      	movs	r2, #1
 80063ea:	2100      	movs	r1, #0
 80063ec:	429a      	cmp	r2, r3
 80063ee:	db09      	blt.n	8006404 <__s2b+0x30>
 80063f0:	4630      	mov	r0, r6
 80063f2:	f7ff ff47 	bl	8006284 <_Balloc>
 80063f6:	b940      	cbnz	r0, 800640a <__s2b+0x36>
 80063f8:	4602      	mov	r2, r0
 80063fa:	21ce      	movs	r1, #206	; 0xce
 80063fc:	4b18      	ldr	r3, [pc, #96]	; (8006460 <__s2b+0x8c>)
 80063fe:	4819      	ldr	r0, [pc, #100]	; (8006464 <__s2b+0x90>)
 8006400:	f000 fc34 	bl	8006c6c <__assert_func>
 8006404:	0052      	lsls	r2, r2, #1
 8006406:	3101      	adds	r1, #1
 8006408:	e7f0      	b.n	80063ec <__s2b+0x18>
 800640a:	9b08      	ldr	r3, [sp, #32]
 800640c:	2d09      	cmp	r5, #9
 800640e:	6143      	str	r3, [r0, #20]
 8006410:	f04f 0301 	mov.w	r3, #1
 8006414:	6103      	str	r3, [r0, #16]
 8006416:	dd16      	ble.n	8006446 <__s2b+0x72>
 8006418:	f104 0909 	add.w	r9, r4, #9
 800641c:	46c8      	mov	r8, r9
 800641e:	442c      	add	r4, r5
 8006420:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006424:	4601      	mov	r1, r0
 8006426:	220a      	movs	r2, #10
 8006428:	4630      	mov	r0, r6
 800642a:	3b30      	subs	r3, #48	; 0x30
 800642c:	f7ff ff8c 	bl	8006348 <__multadd>
 8006430:	45a0      	cmp	r8, r4
 8006432:	d1f5      	bne.n	8006420 <__s2b+0x4c>
 8006434:	f1a5 0408 	sub.w	r4, r5, #8
 8006438:	444c      	add	r4, r9
 800643a:	1b2d      	subs	r5, r5, r4
 800643c:	1963      	adds	r3, r4, r5
 800643e:	42bb      	cmp	r3, r7
 8006440:	db04      	blt.n	800644c <__s2b+0x78>
 8006442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006446:	2509      	movs	r5, #9
 8006448:	340a      	adds	r4, #10
 800644a:	e7f6      	b.n	800643a <__s2b+0x66>
 800644c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006450:	4601      	mov	r1, r0
 8006452:	220a      	movs	r2, #10
 8006454:	4630      	mov	r0, r6
 8006456:	3b30      	subs	r3, #48	; 0x30
 8006458:	f7ff ff76 	bl	8006348 <__multadd>
 800645c:	e7ee      	b.n	800643c <__s2b+0x68>
 800645e:	bf00      	nop
 8006460:	08007e91 	.word	0x08007e91
 8006464:	08007f33 	.word	0x08007f33

08006468 <__hi0bits>:
 8006468:	0c02      	lsrs	r2, r0, #16
 800646a:	0412      	lsls	r2, r2, #16
 800646c:	4603      	mov	r3, r0
 800646e:	b9ca      	cbnz	r2, 80064a4 <__hi0bits+0x3c>
 8006470:	0403      	lsls	r3, r0, #16
 8006472:	2010      	movs	r0, #16
 8006474:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006478:	bf04      	itt	eq
 800647a:	021b      	lsleq	r3, r3, #8
 800647c:	3008      	addeq	r0, #8
 800647e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006482:	bf04      	itt	eq
 8006484:	011b      	lsleq	r3, r3, #4
 8006486:	3004      	addeq	r0, #4
 8006488:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800648c:	bf04      	itt	eq
 800648e:	009b      	lsleq	r3, r3, #2
 8006490:	3002      	addeq	r0, #2
 8006492:	2b00      	cmp	r3, #0
 8006494:	db05      	blt.n	80064a2 <__hi0bits+0x3a>
 8006496:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800649a:	f100 0001 	add.w	r0, r0, #1
 800649e:	bf08      	it	eq
 80064a0:	2020      	moveq	r0, #32
 80064a2:	4770      	bx	lr
 80064a4:	2000      	movs	r0, #0
 80064a6:	e7e5      	b.n	8006474 <__hi0bits+0xc>

080064a8 <__lo0bits>:
 80064a8:	6803      	ldr	r3, [r0, #0]
 80064aa:	4602      	mov	r2, r0
 80064ac:	f013 0007 	ands.w	r0, r3, #7
 80064b0:	d00b      	beq.n	80064ca <__lo0bits+0x22>
 80064b2:	07d9      	lsls	r1, r3, #31
 80064b4:	d421      	bmi.n	80064fa <__lo0bits+0x52>
 80064b6:	0798      	lsls	r0, r3, #30
 80064b8:	bf49      	itett	mi
 80064ba:	085b      	lsrmi	r3, r3, #1
 80064bc:	089b      	lsrpl	r3, r3, #2
 80064be:	2001      	movmi	r0, #1
 80064c0:	6013      	strmi	r3, [r2, #0]
 80064c2:	bf5c      	itt	pl
 80064c4:	2002      	movpl	r0, #2
 80064c6:	6013      	strpl	r3, [r2, #0]
 80064c8:	4770      	bx	lr
 80064ca:	b299      	uxth	r1, r3
 80064cc:	b909      	cbnz	r1, 80064d2 <__lo0bits+0x2a>
 80064ce:	2010      	movs	r0, #16
 80064d0:	0c1b      	lsrs	r3, r3, #16
 80064d2:	b2d9      	uxtb	r1, r3
 80064d4:	b909      	cbnz	r1, 80064da <__lo0bits+0x32>
 80064d6:	3008      	adds	r0, #8
 80064d8:	0a1b      	lsrs	r3, r3, #8
 80064da:	0719      	lsls	r1, r3, #28
 80064dc:	bf04      	itt	eq
 80064de:	091b      	lsreq	r3, r3, #4
 80064e0:	3004      	addeq	r0, #4
 80064e2:	0799      	lsls	r1, r3, #30
 80064e4:	bf04      	itt	eq
 80064e6:	089b      	lsreq	r3, r3, #2
 80064e8:	3002      	addeq	r0, #2
 80064ea:	07d9      	lsls	r1, r3, #31
 80064ec:	d403      	bmi.n	80064f6 <__lo0bits+0x4e>
 80064ee:	085b      	lsrs	r3, r3, #1
 80064f0:	f100 0001 	add.w	r0, r0, #1
 80064f4:	d003      	beq.n	80064fe <__lo0bits+0x56>
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	4770      	bx	lr
 80064fa:	2000      	movs	r0, #0
 80064fc:	4770      	bx	lr
 80064fe:	2020      	movs	r0, #32
 8006500:	4770      	bx	lr
	...

08006504 <__i2b>:
 8006504:	b510      	push	{r4, lr}
 8006506:	460c      	mov	r4, r1
 8006508:	2101      	movs	r1, #1
 800650a:	f7ff febb 	bl	8006284 <_Balloc>
 800650e:	4602      	mov	r2, r0
 8006510:	b928      	cbnz	r0, 800651e <__i2b+0x1a>
 8006512:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006516:	4b04      	ldr	r3, [pc, #16]	; (8006528 <__i2b+0x24>)
 8006518:	4804      	ldr	r0, [pc, #16]	; (800652c <__i2b+0x28>)
 800651a:	f000 fba7 	bl	8006c6c <__assert_func>
 800651e:	2301      	movs	r3, #1
 8006520:	6144      	str	r4, [r0, #20]
 8006522:	6103      	str	r3, [r0, #16]
 8006524:	bd10      	pop	{r4, pc}
 8006526:	bf00      	nop
 8006528:	08007e91 	.word	0x08007e91
 800652c:	08007f33 	.word	0x08007f33

08006530 <__multiply>:
 8006530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006534:	4691      	mov	r9, r2
 8006536:	690a      	ldr	r2, [r1, #16]
 8006538:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800653c:	460c      	mov	r4, r1
 800653e:	429a      	cmp	r2, r3
 8006540:	bfbe      	ittt	lt
 8006542:	460b      	movlt	r3, r1
 8006544:	464c      	movlt	r4, r9
 8006546:	4699      	movlt	r9, r3
 8006548:	6927      	ldr	r7, [r4, #16]
 800654a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800654e:	68a3      	ldr	r3, [r4, #8]
 8006550:	6861      	ldr	r1, [r4, #4]
 8006552:	eb07 060a 	add.w	r6, r7, sl
 8006556:	42b3      	cmp	r3, r6
 8006558:	b085      	sub	sp, #20
 800655a:	bfb8      	it	lt
 800655c:	3101      	addlt	r1, #1
 800655e:	f7ff fe91 	bl	8006284 <_Balloc>
 8006562:	b930      	cbnz	r0, 8006572 <__multiply+0x42>
 8006564:	4602      	mov	r2, r0
 8006566:	f240 115d 	movw	r1, #349	; 0x15d
 800656a:	4b43      	ldr	r3, [pc, #268]	; (8006678 <__multiply+0x148>)
 800656c:	4843      	ldr	r0, [pc, #268]	; (800667c <__multiply+0x14c>)
 800656e:	f000 fb7d 	bl	8006c6c <__assert_func>
 8006572:	f100 0514 	add.w	r5, r0, #20
 8006576:	462b      	mov	r3, r5
 8006578:	2200      	movs	r2, #0
 800657a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800657e:	4543      	cmp	r3, r8
 8006580:	d321      	bcc.n	80065c6 <__multiply+0x96>
 8006582:	f104 0314 	add.w	r3, r4, #20
 8006586:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800658a:	f109 0314 	add.w	r3, r9, #20
 800658e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006592:	9202      	str	r2, [sp, #8]
 8006594:	1b3a      	subs	r2, r7, r4
 8006596:	3a15      	subs	r2, #21
 8006598:	f022 0203 	bic.w	r2, r2, #3
 800659c:	3204      	adds	r2, #4
 800659e:	f104 0115 	add.w	r1, r4, #21
 80065a2:	428f      	cmp	r7, r1
 80065a4:	bf38      	it	cc
 80065a6:	2204      	movcc	r2, #4
 80065a8:	9201      	str	r2, [sp, #4]
 80065aa:	9a02      	ldr	r2, [sp, #8]
 80065ac:	9303      	str	r3, [sp, #12]
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d80c      	bhi.n	80065cc <__multiply+0x9c>
 80065b2:	2e00      	cmp	r6, #0
 80065b4:	dd03      	ble.n	80065be <__multiply+0x8e>
 80065b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d059      	beq.n	8006672 <__multiply+0x142>
 80065be:	6106      	str	r6, [r0, #16]
 80065c0:	b005      	add	sp, #20
 80065c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c6:	f843 2b04 	str.w	r2, [r3], #4
 80065ca:	e7d8      	b.n	800657e <__multiply+0x4e>
 80065cc:	f8b3 a000 	ldrh.w	sl, [r3]
 80065d0:	f1ba 0f00 	cmp.w	sl, #0
 80065d4:	d023      	beq.n	800661e <__multiply+0xee>
 80065d6:	46a9      	mov	r9, r5
 80065d8:	f04f 0c00 	mov.w	ip, #0
 80065dc:	f104 0e14 	add.w	lr, r4, #20
 80065e0:	f85e 2b04 	ldr.w	r2, [lr], #4
 80065e4:	f8d9 1000 	ldr.w	r1, [r9]
 80065e8:	fa1f fb82 	uxth.w	fp, r2
 80065ec:	b289      	uxth	r1, r1
 80065ee:	fb0a 110b 	mla	r1, sl, fp, r1
 80065f2:	4461      	add	r1, ip
 80065f4:	f8d9 c000 	ldr.w	ip, [r9]
 80065f8:	0c12      	lsrs	r2, r2, #16
 80065fa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80065fe:	fb0a c202 	mla	r2, sl, r2, ip
 8006602:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006606:	b289      	uxth	r1, r1
 8006608:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800660c:	4577      	cmp	r7, lr
 800660e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006612:	f849 1b04 	str.w	r1, [r9], #4
 8006616:	d8e3      	bhi.n	80065e0 <__multiply+0xb0>
 8006618:	9a01      	ldr	r2, [sp, #4]
 800661a:	f845 c002 	str.w	ip, [r5, r2]
 800661e:	9a03      	ldr	r2, [sp, #12]
 8006620:	3304      	adds	r3, #4
 8006622:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006626:	f1b9 0f00 	cmp.w	r9, #0
 800662a:	d020      	beq.n	800666e <__multiply+0x13e>
 800662c:	46ae      	mov	lr, r5
 800662e:	f04f 0a00 	mov.w	sl, #0
 8006632:	6829      	ldr	r1, [r5, #0]
 8006634:	f104 0c14 	add.w	ip, r4, #20
 8006638:	f8bc b000 	ldrh.w	fp, [ip]
 800663c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006640:	b289      	uxth	r1, r1
 8006642:	fb09 220b 	mla	r2, r9, fp, r2
 8006646:	4492      	add	sl, r2
 8006648:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800664c:	f84e 1b04 	str.w	r1, [lr], #4
 8006650:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006654:	f8be 1000 	ldrh.w	r1, [lr]
 8006658:	0c12      	lsrs	r2, r2, #16
 800665a:	fb09 1102 	mla	r1, r9, r2, r1
 800665e:	4567      	cmp	r7, ip
 8006660:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006664:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006668:	d8e6      	bhi.n	8006638 <__multiply+0x108>
 800666a:	9a01      	ldr	r2, [sp, #4]
 800666c:	50a9      	str	r1, [r5, r2]
 800666e:	3504      	adds	r5, #4
 8006670:	e79b      	b.n	80065aa <__multiply+0x7a>
 8006672:	3e01      	subs	r6, #1
 8006674:	e79d      	b.n	80065b2 <__multiply+0x82>
 8006676:	bf00      	nop
 8006678:	08007e91 	.word	0x08007e91
 800667c:	08007f33 	.word	0x08007f33

08006680 <__pow5mult>:
 8006680:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006684:	4615      	mov	r5, r2
 8006686:	f012 0203 	ands.w	r2, r2, #3
 800668a:	4606      	mov	r6, r0
 800668c:	460f      	mov	r7, r1
 800668e:	d007      	beq.n	80066a0 <__pow5mult+0x20>
 8006690:	4c25      	ldr	r4, [pc, #148]	; (8006728 <__pow5mult+0xa8>)
 8006692:	3a01      	subs	r2, #1
 8006694:	2300      	movs	r3, #0
 8006696:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800669a:	f7ff fe55 	bl	8006348 <__multadd>
 800669e:	4607      	mov	r7, r0
 80066a0:	10ad      	asrs	r5, r5, #2
 80066a2:	d03d      	beq.n	8006720 <__pow5mult+0xa0>
 80066a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066a6:	b97c      	cbnz	r4, 80066c8 <__pow5mult+0x48>
 80066a8:	2010      	movs	r0, #16
 80066aa:	f7fe faaf 	bl	8004c0c <malloc>
 80066ae:	4602      	mov	r2, r0
 80066b0:	6270      	str	r0, [r6, #36]	; 0x24
 80066b2:	b928      	cbnz	r0, 80066c0 <__pow5mult+0x40>
 80066b4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066b8:	4b1c      	ldr	r3, [pc, #112]	; (800672c <__pow5mult+0xac>)
 80066ba:	481d      	ldr	r0, [pc, #116]	; (8006730 <__pow5mult+0xb0>)
 80066bc:	f000 fad6 	bl	8006c6c <__assert_func>
 80066c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066c4:	6004      	str	r4, [r0, #0]
 80066c6:	60c4      	str	r4, [r0, #12]
 80066c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80066cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80066d0:	b94c      	cbnz	r4, 80066e6 <__pow5mult+0x66>
 80066d2:	f240 2171 	movw	r1, #625	; 0x271
 80066d6:	4630      	mov	r0, r6
 80066d8:	f7ff ff14 	bl	8006504 <__i2b>
 80066dc:	2300      	movs	r3, #0
 80066de:	4604      	mov	r4, r0
 80066e0:	f8c8 0008 	str.w	r0, [r8, #8]
 80066e4:	6003      	str	r3, [r0, #0]
 80066e6:	f04f 0900 	mov.w	r9, #0
 80066ea:	07eb      	lsls	r3, r5, #31
 80066ec:	d50a      	bpl.n	8006704 <__pow5mult+0x84>
 80066ee:	4639      	mov	r1, r7
 80066f0:	4622      	mov	r2, r4
 80066f2:	4630      	mov	r0, r6
 80066f4:	f7ff ff1c 	bl	8006530 <__multiply>
 80066f8:	4680      	mov	r8, r0
 80066fa:	4639      	mov	r1, r7
 80066fc:	4630      	mov	r0, r6
 80066fe:	f7ff fe01 	bl	8006304 <_Bfree>
 8006702:	4647      	mov	r7, r8
 8006704:	106d      	asrs	r5, r5, #1
 8006706:	d00b      	beq.n	8006720 <__pow5mult+0xa0>
 8006708:	6820      	ldr	r0, [r4, #0]
 800670a:	b938      	cbnz	r0, 800671c <__pow5mult+0x9c>
 800670c:	4622      	mov	r2, r4
 800670e:	4621      	mov	r1, r4
 8006710:	4630      	mov	r0, r6
 8006712:	f7ff ff0d 	bl	8006530 <__multiply>
 8006716:	6020      	str	r0, [r4, #0]
 8006718:	f8c0 9000 	str.w	r9, [r0]
 800671c:	4604      	mov	r4, r0
 800671e:	e7e4      	b.n	80066ea <__pow5mult+0x6a>
 8006720:	4638      	mov	r0, r7
 8006722:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006726:	bf00      	nop
 8006728:	08008080 	.word	0x08008080
 800672c:	08007f1c 	.word	0x08007f1c
 8006730:	08007f33 	.word	0x08007f33

08006734 <__lshift>:
 8006734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006738:	460c      	mov	r4, r1
 800673a:	4607      	mov	r7, r0
 800673c:	4691      	mov	r9, r2
 800673e:	6923      	ldr	r3, [r4, #16]
 8006740:	6849      	ldr	r1, [r1, #4]
 8006742:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006746:	68a3      	ldr	r3, [r4, #8]
 8006748:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800674c:	f108 0601 	add.w	r6, r8, #1
 8006750:	42b3      	cmp	r3, r6
 8006752:	db0b      	blt.n	800676c <__lshift+0x38>
 8006754:	4638      	mov	r0, r7
 8006756:	f7ff fd95 	bl	8006284 <_Balloc>
 800675a:	4605      	mov	r5, r0
 800675c:	b948      	cbnz	r0, 8006772 <__lshift+0x3e>
 800675e:	4602      	mov	r2, r0
 8006760:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006764:	4b29      	ldr	r3, [pc, #164]	; (800680c <__lshift+0xd8>)
 8006766:	482a      	ldr	r0, [pc, #168]	; (8006810 <__lshift+0xdc>)
 8006768:	f000 fa80 	bl	8006c6c <__assert_func>
 800676c:	3101      	adds	r1, #1
 800676e:	005b      	lsls	r3, r3, #1
 8006770:	e7ee      	b.n	8006750 <__lshift+0x1c>
 8006772:	2300      	movs	r3, #0
 8006774:	f100 0114 	add.w	r1, r0, #20
 8006778:	f100 0210 	add.w	r2, r0, #16
 800677c:	4618      	mov	r0, r3
 800677e:	4553      	cmp	r3, sl
 8006780:	db37      	blt.n	80067f2 <__lshift+0xbe>
 8006782:	6920      	ldr	r0, [r4, #16]
 8006784:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006788:	f104 0314 	add.w	r3, r4, #20
 800678c:	f019 091f 	ands.w	r9, r9, #31
 8006790:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006794:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006798:	d02f      	beq.n	80067fa <__lshift+0xc6>
 800679a:	468a      	mov	sl, r1
 800679c:	f04f 0c00 	mov.w	ip, #0
 80067a0:	f1c9 0e20 	rsb	lr, r9, #32
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	fa02 f209 	lsl.w	r2, r2, r9
 80067aa:	ea42 020c 	orr.w	r2, r2, ip
 80067ae:	f84a 2b04 	str.w	r2, [sl], #4
 80067b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80067b6:	4298      	cmp	r0, r3
 80067b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80067bc:	d8f2      	bhi.n	80067a4 <__lshift+0x70>
 80067be:	1b03      	subs	r3, r0, r4
 80067c0:	3b15      	subs	r3, #21
 80067c2:	f023 0303 	bic.w	r3, r3, #3
 80067c6:	3304      	adds	r3, #4
 80067c8:	f104 0215 	add.w	r2, r4, #21
 80067cc:	4290      	cmp	r0, r2
 80067ce:	bf38      	it	cc
 80067d0:	2304      	movcc	r3, #4
 80067d2:	f841 c003 	str.w	ip, [r1, r3]
 80067d6:	f1bc 0f00 	cmp.w	ip, #0
 80067da:	d001      	beq.n	80067e0 <__lshift+0xac>
 80067dc:	f108 0602 	add.w	r6, r8, #2
 80067e0:	3e01      	subs	r6, #1
 80067e2:	4638      	mov	r0, r7
 80067e4:	4621      	mov	r1, r4
 80067e6:	612e      	str	r6, [r5, #16]
 80067e8:	f7ff fd8c 	bl	8006304 <_Bfree>
 80067ec:	4628      	mov	r0, r5
 80067ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f2:	f842 0f04 	str.w	r0, [r2, #4]!
 80067f6:	3301      	adds	r3, #1
 80067f8:	e7c1      	b.n	800677e <__lshift+0x4a>
 80067fa:	3904      	subs	r1, #4
 80067fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006800:	4298      	cmp	r0, r3
 8006802:	f841 2f04 	str.w	r2, [r1, #4]!
 8006806:	d8f9      	bhi.n	80067fc <__lshift+0xc8>
 8006808:	e7ea      	b.n	80067e0 <__lshift+0xac>
 800680a:	bf00      	nop
 800680c:	08007e91 	.word	0x08007e91
 8006810:	08007f33 	.word	0x08007f33

08006814 <__mcmp>:
 8006814:	4603      	mov	r3, r0
 8006816:	690a      	ldr	r2, [r1, #16]
 8006818:	6900      	ldr	r0, [r0, #16]
 800681a:	b530      	push	{r4, r5, lr}
 800681c:	1a80      	subs	r0, r0, r2
 800681e:	d10d      	bne.n	800683c <__mcmp+0x28>
 8006820:	3314      	adds	r3, #20
 8006822:	3114      	adds	r1, #20
 8006824:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006828:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800682c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006830:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006834:	4295      	cmp	r5, r2
 8006836:	d002      	beq.n	800683e <__mcmp+0x2a>
 8006838:	d304      	bcc.n	8006844 <__mcmp+0x30>
 800683a:	2001      	movs	r0, #1
 800683c:	bd30      	pop	{r4, r5, pc}
 800683e:	42a3      	cmp	r3, r4
 8006840:	d3f4      	bcc.n	800682c <__mcmp+0x18>
 8006842:	e7fb      	b.n	800683c <__mcmp+0x28>
 8006844:	f04f 30ff 	mov.w	r0, #4294967295
 8006848:	e7f8      	b.n	800683c <__mcmp+0x28>
	...

0800684c <__mdiff>:
 800684c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006850:	460d      	mov	r5, r1
 8006852:	4607      	mov	r7, r0
 8006854:	4611      	mov	r1, r2
 8006856:	4628      	mov	r0, r5
 8006858:	4614      	mov	r4, r2
 800685a:	f7ff ffdb 	bl	8006814 <__mcmp>
 800685e:	1e06      	subs	r6, r0, #0
 8006860:	d111      	bne.n	8006886 <__mdiff+0x3a>
 8006862:	4631      	mov	r1, r6
 8006864:	4638      	mov	r0, r7
 8006866:	f7ff fd0d 	bl	8006284 <_Balloc>
 800686a:	4602      	mov	r2, r0
 800686c:	b928      	cbnz	r0, 800687a <__mdiff+0x2e>
 800686e:	f240 2132 	movw	r1, #562	; 0x232
 8006872:	4b3a      	ldr	r3, [pc, #232]	; (800695c <__mdiff+0x110>)
 8006874:	483a      	ldr	r0, [pc, #232]	; (8006960 <__mdiff+0x114>)
 8006876:	f000 f9f9 	bl	8006c6c <__assert_func>
 800687a:	2301      	movs	r3, #1
 800687c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006880:	4610      	mov	r0, r2
 8006882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006886:	bfa4      	itt	ge
 8006888:	4623      	movge	r3, r4
 800688a:	462c      	movge	r4, r5
 800688c:	4638      	mov	r0, r7
 800688e:	6861      	ldr	r1, [r4, #4]
 8006890:	bfa6      	itte	ge
 8006892:	461d      	movge	r5, r3
 8006894:	2600      	movge	r6, #0
 8006896:	2601      	movlt	r6, #1
 8006898:	f7ff fcf4 	bl	8006284 <_Balloc>
 800689c:	4602      	mov	r2, r0
 800689e:	b918      	cbnz	r0, 80068a8 <__mdiff+0x5c>
 80068a0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068a4:	4b2d      	ldr	r3, [pc, #180]	; (800695c <__mdiff+0x110>)
 80068a6:	e7e5      	b.n	8006874 <__mdiff+0x28>
 80068a8:	f102 0814 	add.w	r8, r2, #20
 80068ac:	46c2      	mov	sl, r8
 80068ae:	f04f 0c00 	mov.w	ip, #0
 80068b2:	6927      	ldr	r7, [r4, #16]
 80068b4:	60c6      	str	r6, [r0, #12]
 80068b6:	692e      	ldr	r6, [r5, #16]
 80068b8:	f104 0014 	add.w	r0, r4, #20
 80068bc:	f105 0914 	add.w	r9, r5, #20
 80068c0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80068c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068c8:	3410      	adds	r4, #16
 80068ca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80068ce:	f859 3b04 	ldr.w	r3, [r9], #4
 80068d2:	fa1f f18b 	uxth.w	r1, fp
 80068d6:	448c      	add	ip, r1
 80068d8:	b299      	uxth	r1, r3
 80068da:	0c1b      	lsrs	r3, r3, #16
 80068dc:	ebac 0101 	sub.w	r1, ip, r1
 80068e0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80068e4:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80068e8:	b289      	uxth	r1, r1
 80068ea:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80068ee:	454e      	cmp	r6, r9
 80068f0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80068f4:	f84a 3b04 	str.w	r3, [sl], #4
 80068f8:	d8e7      	bhi.n	80068ca <__mdiff+0x7e>
 80068fa:	1b73      	subs	r3, r6, r5
 80068fc:	3b15      	subs	r3, #21
 80068fe:	f023 0303 	bic.w	r3, r3, #3
 8006902:	3515      	adds	r5, #21
 8006904:	3304      	adds	r3, #4
 8006906:	42ae      	cmp	r6, r5
 8006908:	bf38      	it	cc
 800690a:	2304      	movcc	r3, #4
 800690c:	4418      	add	r0, r3
 800690e:	4443      	add	r3, r8
 8006910:	461e      	mov	r6, r3
 8006912:	4605      	mov	r5, r0
 8006914:	4575      	cmp	r5, lr
 8006916:	d30e      	bcc.n	8006936 <__mdiff+0xea>
 8006918:	f10e 0103 	add.w	r1, lr, #3
 800691c:	1a09      	subs	r1, r1, r0
 800691e:	f021 0103 	bic.w	r1, r1, #3
 8006922:	3803      	subs	r0, #3
 8006924:	4586      	cmp	lr, r0
 8006926:	bf38      	it	cc
 8006928:	2100      	movcc	r1, #0
 800692a:	4419      	add	r1, r3
 800692c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8006930:	b18b      	cbz	r3, 8006956 <__mdiff+0x10a>
 8006932:	6117      	str	r7, [r2, #16]
 8006934:	e7a4      	b.n	8006880 <__mdiff+0x34>
 8006936:	f855 8b04 	ldr.w	r8, [r5], #4
 800693a:	fa1f f188 	uxth.w	r1, r8
 800693e:	4461      	add	r1, ip
 8006940:	140c      	asrs	r4, r1, #16
 8006942:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006946:	b289      	uxth	r1, r1
 8006948:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800694c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006950:	f846 1b04 	str.w	r1, [r6], #4
 8006954:	e7de      	b.n	8006914 <__mdiff+0xc8>
 8006956:	3f01      	subs	r7, #1
 8006958:	e7e8      	b.n	800692c <__mdiff+0xe0>
 800695a:	bf00      	nop
 800695c:	08007e91 	.word	0x08007e91
 8006960:	08007f33 	.word	0x08007f33

08006964 <__ulp>:
 8006964:	4b11      	ldr	r3, [pc, #68]	; (80069ac <__ulp+0x48>)
 8006966:	400b      	ands	r3, r1
 8006968:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800696c:	2b00      	cmp	r3, #0
 800696e:	dd02      	ble.n	8006976 <__ulp+0x12>
 8006970:	2000      	movs	r0, #0
 8006972:	4619      	mov	r1, r3
 8006974:	4770      	bx	lr
 8006976:	425b      	negs	r3, r3
 8006978:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800697c:	f04f 0000 	mov.w	r0, #0
 8006980:	f04f 0100 	mov.w	r1, #0
 8006984:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006988:	da04      	bge.n	8006994 <__ulp+0x30>
 800698a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800698e:	fa43 f102 	asr.w	r1, r3, r2
 8006992:	4770      	bx	lr
 8006994:	f1a2 0314 	sub.w	r3, r2, #20
 8006998:	2b1e      	cmp	r3, #30
 800699a:	bfd6      	itet	le
 800699c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80069a0:	2301      	movgt	r3, #1
 80069a2:	fa22 f303 	lsrle.w	r3, r2, r3
 80069a6:	4618      	mov	r0, r3
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	7ff00000 	.word	0x7ff00000

080069b0 <__b2d>:
 80069b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069b4:	6907      	ldr	r7, [r0, #16]
 80069b6:	f100 0914 	add.w	r9, r0, #20
 80069ba:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 80069be:	f857 6c04 	ldr.w	r6, [r7, #-4]
 80069c2:	f1a7 0804 	sub.w	r8, r7, #4
 80069c6:	4630      	mov	r0, r6
 80069c8:	f7ff fd4e 	bl	8006468 <__hi0bits>
 80069cc:	f1c0 0320 	rsb	r3, r0, #32
 80069d0:	280a      	cmp	r0, #10
 80069d2:	600b      	str	r3, [r1, #0]
 80069d4:	491f      	ldr	r1, [pc, #124]	; (8006a54 <__b2d+0xa4>)
 80069d6:	dc17      	bgt.n	8006a08 <__b2d+0x58>
 80069d8:	45c1      	cmp	r9, r8
 80069da:	bf28      	it	cs
 80069dc:	2200      	movcs	r2, #0
 80069de:	f1c0 0c0b 	rsb	ip, r0, #11
 80069e2:	fa26 f30c 	lsr.w	r3, r6, ip
 80069e6:	bf38      	it	cc
 80069e8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80069ec:	ea43 0501 	orr.w	r5, r3, r1
 80069f0:	f100 0315 	add.w	r3, r0, #21
 80069f4:	fa06 f303 	lsl.w	r3, r6, r3
 80069f8:	fa22 f20c 	lsr.w	r2, r2, ip
 80069fc:	ea43 0402 	orr.w	r4, r3, r2
 8006a00:	4620      	mov	r0, r4
 8006a02:	4629      	mov	r1, r5
 8006a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a08:	45c1      	cmp	r9, r8
 8006a0a:	bf2e      	itee	cs
 8006a0c:	2200      	movcs	r2, #0
 8006a0e:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006a12:	f1a7 0808 	subcc.w	r8, r7, #8
 8006a16:	f1b0 030b 	subs.w	r3, r0, #11
 8006a1a:	d016      	beq.n	8006a4a <__b2d+0x9a>
 8006a1c:	f1c3 0720 	rsb	r7, r3, #32
 8006a20:	fa22 f107 	lsr.w	r1, r2, r7
 8006a24:	45c8      	cmp	r8, r9
 8006a26:	fa06 f603 	lsl.w	r6, r6, r3
 8006a2a:	ea46 0601 	orr.w	r6, r6, r1
 8006a2e:	bf94      	ite	ls
 8006a30:	2100      	movls	r1, #0
 8006a32:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006a36:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006a3a:	fa02 f003 	lsl.w	r0, r2, r3
 8006a3e:	40f9      	lsrs	r1, r7
 8006a40:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006a44:	ea40 0401 	orr.w	r4, r0, r1
 8006a48:	e7da      	b.n	8006a00 <__b2d+0x50>
 8006a4a:	4614      	mov	r4, r2
 8006a4c:	ea46 0501 	orr.w	r5, r6, r1
 8006a50:	e7d6      	b.n	8006a00 <__b2d+0x50>
 8006a52:	bf00      	nop
 8006a54:	3ff00000 	.word	0x3ff00000

08006a58 <__d2b>:
 8006a58:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006a5c:	2101      	movs	r1, #1
 8006a5e:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006a62:	4690      	mov	r8, r2
 8006a64:	461d      	mov	r5, r3
 8006a66:	f7ff fc0d 	bl	8006284 <_Balloc>
 8006a6a:	4604      	mov	r4, r0
 8006a6c:	b930      	cbnz	r0, 8006a7c <__d2b+0x24>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	f240 310a 	movw	r1, #778	; 0x30a
 8006a74:	4b24      	ldr	r3, [pc, #144]	; (8006b08 <__d2b+0xb0>)
 8006a76:	4825      	ldr	r0, [pc, #148]	; (8006b0c <__d2b+0xb4>)
 8006a78:	f000 f8f8 	bl	8006c6c <__assert_func>
 8006a7c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006a80:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006a84:	bb2d      	cbnz	r5, 8006ad2 <__d2b+0x7a>
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	f1b8 0300 	subs.w	r3, r8, #0
 8006a8c:	d026      	beq.n	8006adc <__d2b+0x84>
 8006a8e:	4668      	mov	r0, sp
 8006a90:	9300      	str	r3, [sp, #0]
 8006a92:	f7ff fd09 	bl	80064a8 <__lo0bits>
 8006a96:	9900      	ldr	r1, [sp, #0]
 8006a98:	b1f0      	cbz	r0, 8006ad8 <__d2b+0x80>
 8006a9a:	9a01      	ldr	r2, [sp, #4]
 8006a9c:	f1c0 0320 	rsb	r3, r0, #32
 8006aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8006aa4:	430b      	orrs	r3, r1
 8006aa6:	40c2      	lsrs	r2, r0
 8006aa8:	6163      	str	r3, [r4, #20]
 8006aaa:	9201      	str	r2, [sp, #4]
 8006aac:	9b01      	ldr	r3, [sp, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	bf14      	ite	ne
 8006ab2:	2102      	movne	r1, #2
 8006ab4:	2101      	moveq	r1, #1
 8006ab6:	61a3      	str	r3, [r4, #24]
 8006ab8:	6121      	str	r1, [r4, #16]
 8006aba:	b1c5      	cbz	r5, 8006aee <__d2b+0x96>
 8006abc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ac0:	4405      	add	r5, r0
 8006ac2:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ac6:	603d      	str	r5, [r7, #0]
 8006ac8:	6030      	str	r0, [r6, #0]
 8006aca:	4620      	mov	r0, r4
 8006acc:	b002      	add	sp, #8
 8006ace:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ad6:	e7d6      	b.n	8006a86 <__d2b+0x2e>
 8006ad8:	6161      	str	r1, [r4, #20]
 8006ada:	e7e7      	b.n	8006aac <__d2b+0x54>
 8006adc:	a801      	add	r0, sp, #4
 8006ade:	f7ff fce3 	bl	80064a8 <__lo0bits>
 8006ae2:	2101      	movs	r1, #1
 8006ae4:	9b01      	ldr	r3, [sp, #4]
 8006ae6:	6121      	str	r1, [r4, #16]
 8006ae8:	6163      	str	r3, [r4, #20]
 8006aea:	3020      	adds	r0, #32
 8006aec:	e7e5      	b.n	8006aba <__d2b+0x62>
 8006aee:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006af2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006af6:	6038      	str	r0, [r7, #0]
 8006af8:	6918      	ldr	r0, [r3, #16]
 8006afa:	f7ff fcb5 	bl	8006468 <__hi0bits>
 8006afe:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006b02:	6031      	str	r1, [r6, #0]
 8006b04:	e7e1      	b.n	8006aca <__d2b+0x72>
 8006b06:	bf00      	nop
 8006b08:	08007e91 	.word	0x08007e91
 8006b0c:	08007f33 	.word	0x08007f33

08006b10 <__ratio>:
 8006b10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b14:	4688      	mov	r8, r1
 8006b16:	4669      	mov	r1, sp
 8006b18:	4681      	mov	r9, r0
 8006b1a:	f7ff ff49 	bl	80069b0 <__b2d>
 8006b1e:	460f      	mov	r7, r1
 8006b20:	4604      	mov	r4, r0
 8006b22:	460d      	mov	r5, r1
 8006b24:	4640      	mov	r0, r8
 8006b26:	a901      	add	r1, sp, #4
 8006b28:	f7ff ff42 	bl	80069b0 <__b2d>
 8006b2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006b30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006b34:	468b      	mov	fp, r1
 8006b36:	eba3 0c02 	sub.w	ip, r3, r2
 8006b3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	bfd5      	itete	le
 8006b48:	460a      	movle	r2, r1
 8006b4a:	462a      	movgt	r2, r5
 8006b4c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006b50:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006b54:	bfd8      	it	le
 8006b56:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006b5a:	465b      	mov	r3, fp
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	4639      	mov	r1, r7
 8006b60:	4620      	mov	r0, r4
 8006b62:	f7f9 fe59 	bl	8000818 <__aeabi_ddiv>
 8006b66:	b003      	add	sp, #12
 8006b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006b6c <__copybits>:
 8006b6c:	3901      	subs	r1, #1
 8006b6e:	b570      	push	{r4, r5, r6, lr}
 8006b70:	1149      	asrs	r1, r1, #5
 8006b72:	6914      	ldr	r4, [r2, #16]
 8006b74:	3101      	adds	r1, #1
 8006b76:	f102 0314 	add.w	r3, r2, #20
 8006b7a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006b7e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006b82:	1f05      	subs	r5, r0, #4
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	d30c      	bcc.n	8006ba2 <__copybits+0x36>
 8006b88:	1aa3      	subs	r3, r4, r2
 8006b8a:	3b11      	subs	r3, #17
 8006b8c:	f023 0303 	bic.w	r3, r3, #3
 8006b90:	3211      	adds	r2, #17
 8006b92:	42a2      	cmp	r2, r4
 8006b94:	bf88      	it	hi
 8006b96:	2300      	movhi	r3, #0
 8006b98:	4418      	add	r0, r3
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	4288      	cmp	r0, r1
 8006b9e:	d305      	bcc.n	8006bac <__copybits+0x40>
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
 8006ba2:	f853 6b04 	ldr.w	r6, [r3], #4
 8006ba6:	f845 6f04 	str.w	r6, [r5, #4]!
 8006baa:	e7eb      	b.n	8006b84 <__copybits+0x18>
 8006bac:	f840 3b04 	str.w	r3, [r0], #4
 8006bb0:	e7f4      	b.n	8006b9c <__copybits+0x30>

08006bb2 <__any_on>:
 8006bb2:	f100 0214 	add.w	r2, r0, #20
 8006bb6:	6900      	ldr	r0, [r0, #16]
 8006bb8:	114b      	asrs	r3, r1, #5
 8006bba:	4298      	cmp	r0, r3
 8006bbc:	b510      	push	{r4, lr}
 8006bbe:	db11      	blt.n	8006be4 <__any_on+0x32>
 8006bc0:	dd0a      	ble.n	8006bd8 <__any_on+0x26>
 8006bc2:	f011 011f 	ands.w	r1, r1, #31
 8006bc6:	d007      	beq.n	8006bd8 <__any_on+0x26>
 8006bc8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006bcc:	fa24 f001 	lsr.w	r0, r4, r1
 8006bd0:	fa00 f101 	lsl.w	r1, r0, r1
 8006bd4:	428c      	cmp	r4, r1
 8006bd6:	d10b      	bne.n	8006bf0 <__any_on+0x3e>
 8006bd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d803      	bhi.n	8006be8 <__any_on+0x36>
 8006be0:	2000      	movs	r0, #0
 8006be2:	bd10      	pop	{r4, pc}
 8006be4:	4603      	mov	r3, r0
 8006be6:	e7f7      	b.n	8006bd8 <__any_on+0x26>
 8006be8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d0f5      	beq.n	8006bdc <__any_on+0x2a>
 8006bf0:	2001      	movs	r0, #1
 8006bf2:	e7f6      	b.n	8006be2 <__any_on+0x30>

08006bf4 <_calloc_r>:
 8006bf4:	b570      	push	{r4, r5, r6, lr}
 8006bf6:	fba1 5402 	umull	r5, r4, r1, r2
 8006bfa:	b934      	cbnz	r4, 8006c0a <_calloc_r+0x16>
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	f7fe f893 	bl	8004d28 <_malloc_r>
 8006c02:	4606      	mov	r6, r0
 8006c04:	b928      	cbnz	r0, 8006c12 <_calloc_r+0x1e>
 8006c06:	4630      	mov	r0, r6
 8006c08:	bd70      	pop	{r4, r5, r6, pc}
 8006c0a:	220c      	movs	r2, #12
 8006c0c:	2600      	movs	r6, #0
 8006c0e:	6002      	str	r2, [r0, #0]
 8006c10:	e7f9      	b.n	8006c06 <_calloc_r+0x12>
 8006c12:	462a      	mov	r2, r5
 8006c14:	4621      	mov	r1, r4
 8006c16:	f7fe f817 	bl	8004c48 <memset>
 8006c1a:	e7f4      	b.n	8006c06 <_calloc_r+0x12>

08006c1c <nan>:
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	4901      	ldr	r1, [pc, #4]	; (8006c24 <nan+0x8>)
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	7ff80000 	.word	0x7ff80000

08006c28 <strncmp>:
 8006c28:	4603      	mov	r3, r0
 8006c2a:	b510      	push	{r4, lr}
 8006c2c:	b172      	cbz	r2, 8006c4c <strncmp+0x24>
 8006c2e:	3901      	subs	r1, #1
 8006c30:	1884      	adds	r4, r0, r2
 8006c32:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006c36:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006c3a:	4290      	cmp	r0, r2
 8006c3c:	d101      	bne.n	8006c42 <strncmp+0x1a>
 8006c3e:	42a3      	cmp	r3, r4
 8006c40:	d101      	bne.n	8006c46 <strncmp+0x1e>
 8006c42:	1a80      	subs	r0, r0, r2
 8006c44:	bd10      	pop	{r4, pc}
 8006c46:	2800      	cmp	r0, #0
 8006c48:	d1f3      	bne.n	8006c32 <strncmp+0xa>
 8006c4a:	e7fa      	b.n	8006c42 <strncmp+0x1a>
 8006c4c:	4610      	mov	r0, r2
 8006c4e:	e7f9      	b.n	8006c44 <strncmp+0x1c>

08006c50 <__ascii_wctomb>:
 8006c50:	4603      	mov	r3, r0
 8006c52:	4608      	mov	r0, r1
 8006c54:	b141      	cbz	r1, 8006c68 <__ascii_wctomb+0x18>
 8006c56:	2aff      	cmp	r2, #255	; 0xff
 8006c58:	d904      	bls.n	8006c64 <__ascii_wctomb+0x14>
 8006c5a:	228a      	movs	r2, #138	; 0x8a
 8006c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	4770      	bx	lr
 8006c64:	2001      	movs	r0, #1
 8006c66:	700a      	strb	r2, [r1, #0]
 8006c68:	4770      	bx	lr
	...

08006c6c <__assert_func>:
 8006c6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c6e:	4614      	mov	r4, r2
 8006c70:	461a      	mov	r2, r3
 8006c72:	4b09      	ldr	r3, [pc, #36]	; (8006c98 <__assert_func+0x2c>)
 8006c74:	4605      	mov	r5, r0
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68d8      	ldr	r0, [r3, #12]
 8006c7a:	b14c      	cbz	r4, 8006c90 <__assert_func+0x24>
 8006c7c:	4b07      	ldr	r3, [pc, #28]	; (8006c9c <__assert_func+0x30>)
 8006c7e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c82:	9100      	str	r1, [sp, #0]
 8006c84:	462b      	mov	r3, r5
 8006c86:	4906      	ldr	r1, [pc, #24]	; (8006ca0 <__assert_func+0x34>)
 8006c88:	f000 f80e 	bl	8006ca8 <fiprintf>
 8006c8c:	f000 fbce 	bl	800742c <abort>
 8006c90:	4b04      	ldr	r3, [pc, #16]	; (8006ca4 <__assert_func+0x38>)
 8006c92:	461c      	mov	r4, r3
 8006c94:	e7f3      	b.n	8006c7e <__assert_func+0x12>
 8006c96:	bf00      	nop
 8006c98:	20000054 	.word	0x20000054
 8006c9c:	0800808c 	.word	0x0800808c
 8006ca0:	08008099 	.word	0x08008099
 8006ca4:	080080c7 	.word	0x080080c7

08006ca8 <fiprintf>:
 8006ca8:	b40e      	push	{r1, r2, r3}
 8006caa:	b503      	push	{r0, r1, lr}
 8006cac:	4601      	mov	r1, r0
 8006cae:	ab03      	add	r3, sp, #12
 8006cb0:	4805      	ldr	r0, [pc, #20]	; (8006cc8 <fiprintf+0x20>)
 8006cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb6:	6800      	ldr	r0, [r0, #0]
 8006cb8:	9301      	str	r3, [sp, #4]
 8006cba:	f000 f831 	bl	8006d20 <_vfiprintf_r>
 8006cbe:	b002      	add	sp, #8
 8006cc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cc4:	b003      	add	sp, #12
 8006cc6:	4770      	bx	lr
 8006cc8:	20000054 	.word	0x20000054

08006ccc <__retarget_lock_init_recursive>:
 8006ccc:	4770      	bx	lr

08006cce <__retarget_lock_acquire_recursive>:
 8006cce:	4770      	bx	lr

08006cd0 <__retarget_lock_release_recursive>:
 8006cd0:	4770      	bx	lr

08006cd2 <__sfputc_r>:
 8006cd2:	6893      	ldr	r3, [r2, #8]
 8006cd4:	b410      	push	{r4}
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	6093      	str	r3, [r2, #8]
 8006cdc:	da07      	bge.n	8006cee <__sfputc_r+0x1c>
 8006cde:	6994      	ldr	r4, [r2, #24]
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	db01      	blt.n	8006ce8 <__sfputc_r+0x16>
 8006ce4:	290a      	cmp	r1, #10
 8006ce6:	d102      	bne.n	8006cee <__sfputc_r+0x1c>
 8006ce8:	bc10      	pop	{r4}
 8006cea:	f000 badf 	b.w	80072ac <__swbuf_r>
 8006cee:	6813      	ldr	r3, [r2, #0]
 8006cf0:	1c58      	adds	r0, r3, #1
 8006cf2:	6010      	str	r0, [r2, #0]
 8006cf4:	7019      	strb	r1, [r3, #0]
 8006cf6:	4608      	mov	r0, r1
 8006cf8:	bc10      	pop	{r4}
 8006cfa:	4770      	bx	lr

08006cfc <__sfputs_r>:
 8006cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	4614      	mov	r4, r2
 8006d04:	18d5      	adds	r5, r2, r3
 8006d06:	42ac      	cmp	r4, r5
 8006d08:	d101      	bne.n	8006d0e <__sfputs_r+0x12>
 8006d0a:	2000      	movs	r0, #0
 8006d0c:	e007      	b.n	8006d1e <__sfputs_r+0x22>
 8006d0e:	463a      	mov	r2, r7
 8006d10:	4630      	mov	r0, r6
 8006d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d16:	f7ff ffdc 	bl	8006cd2 <__sfputc_r>
 8006d1a:	1c43      	adds	r3, r0, #1
 8006d1c:	d1f3      	bne.n	8006d06 <__sfputs_r+0xa>
 8006d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006d20 <_vfiprintf_r>:
 8006d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d24:	460d      	mov	r5, r1
 8006d26:	4614      	mov	r4, r2
 8006d28:	4698      	mov	r8, r3
 8006d2a:	4606      	mov	r6, r0
 8006d2c:	b09d      	sub	sp, #116	; 0x74
 8006d2e:	b118      	cbz	r0, 8006d38 <_vfiprintf_r+0x18>
 8006d30:	6983      	ldr	r3, [r0, #24]
 8006d32:	b90b      	cbnz	r3, 8006d38 <_vfiprintf_r+0x18>
 8006d34:	f000 fc98 	bl	8007668 <__sinit>
 8006d38:	4b89      	ldr	r3, [pc, #548]	; (8006f60 <_vfiprintf_r+0x240>)
 8006d3a:	429d      	cmp	r5, r3
 8006d3c:	d11b      	bne.n	8006d76 <_vfiprintf_r+0x56>
 8006d3e:	6875      	ldr	r5, [r6, #4]
 8006d40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d42:	07d9      	lsls	r1, r3, #31
 8006d44:	d405      	bmi.n	8006d52 <_vfiprintf_r+0x32>
 8006d46:	89ab      	ldrh	r3, [r5, #12]
 8006d48:	059a      	lsls	r2, r3, #22
 8006d4a:	d402      	bmi.n	8006d52 <_vfiprintf_r+0x32>
 8006d4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d4e:	f7ff ffbe 	bl	8006cce <__retarget_lock_acquire_recursive>
 8006d52:	89ab      	ldrh	r3, [r5, #12]
 8006d54:	071b      	lsls	r3, r3, #28
 8006d56:	d501      	bpl.n	8006d5c <_vfiprintf_r+0x3c>
 8006d58:	692b      	ldr	r3, [r5, #16]
 8006d5a:	b9eb      	cbnz	r3, 8006d98 <_vfiprintf_r+0x78>
 8006d5c:	4629      	mov	r1, r5
 8006d5e:	4630      	mov	r0, r6
 8006d60:	f000 faf6 	bl	8007350 <__swsetup_r>
 8006d64:	b1c0      	cbz	r0, 8006d98 <_vfiprintf_r+0x78>
 8006d66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d68:	07dc      	lsls	r4, r3, #31
 8006d6a:	d50e      	bpl.n	8006d8a <_vfiprintf_r+0x6a>
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	b01d      	add	sp, #116	; 0x74
 8006d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d76:	4b7b      	ldr	r3, [pc, #492]	; (8006f64 <_vfiprintf_r+0x244>)
 8006d78:	429d      	cmp	r5, r3
 8006d7a:	d101      	bne.n	8006d80 <_vfiprintf_r+0x60>
 8006d7c:	68b5      	ldr	r5, [r6, #8]
 8006d7e:	e7df      	b.n	8006d40 <_vfiprintf_r+0x20>
 8006d80:	4b79      	ldr	r3, [pc, #484]	; (8006f68 <_vfiprintf_r+0x248>)
 8006d82:	429d      	cmp	r5, r3
 8006d84:	bf08      	it	eq
 8006d86:	68f5      	ldreq	r5, [r6, #12]
 8006d88:	e7da      	b.n	8006d40 <_vfiprintf_r+0x20>
 8006d8a:	89ab      	ldrh	r3, [r5, #12]
 8006d8c:	0598      	lsls	r0, r3, #22
 8006d8e:	d4ed      	bmi.n	8006d6c <_vfiprintf_r+0x4c>
 8006d90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d92:	f7ff ff9d 	bl	8006cd0 <__retarget_lock_release_recursive>
 8006d96:	e7e9      	b.n	8006d6c <_vfiprintf_r+0x4c>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9c:	2320      	movs	r3, #32
 8006d9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006da2:	2330      	movs	r3, #48	; 0x30
 8006da4:	f04f 0901 	mov.w	r9, #1
 8006da8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dac:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006f6c <_vfiprintf_r+0x24c>
 8006db0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006db4:	4623      	mov	r3, r4
 8006db6:	469a      	mov	sl, r3
 8006db8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dbc:	b10a      	cbz	r2, 8006dc2 <_vfiprintf_r+0xa2>
 8006dbe:	2a25      	cmp	r2, #37	; 0x25
 8006dc0:	d1f9      	bne.n	8006db6 <_vfiprintf_r+0x96>
 8006dc2:	ebba 0b04 	subs.w	fp, sl, r4
 8006dc6:	d00b      	beq.n	8006de0 <_vfiprintf_r+0xc0>
 8006dc8:	465b      	mov	r3, fp
 8006dca:	4622      	mov	r2, r4
 8006dcc:	4629      	mov	r1, r5
 8006dce:	4630      	mov	r0, r6
 8006dd0:	f7ff ff94 	bl	8006cfc <__sfputs_r>
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	f000 80aa 	beq.w	8006f2e <_vfiprintf_r+0x20e>
 8006dda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ddc:	445a      	add	r2, fp
 8006dde:	9209      	str	r2, [sp, #36]	; 0x24
 8006de0:	f89a 3000 	ldrb.w	r3, [sl]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 80a2 	beq.w	8006f2e <_vfiprintf_r+0x20e>
 8006dea:	2300      	movs	r3, #0
 8006dec:	f04f 32ff 	mov.w	r2, #4294967295
 8006df0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006df4:	f10a 0a01 	add.w	sl, sl, #1
 8006df8:	9304      	str	r3, [sp, #16]
 8006dfa:	9307      	str	r3, [sp, #28]
 8006dfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e00:	931a      	str	r3, [sp, #104]	; 0x68
 8006e02:	4654      	mov	r4, sl
 8006e04:	2205      	movs	r2, #5
 8006e06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e0a:	4858      	ldr	r0, [pc, #352]	; (8006f6c <_vfiprintf_r+0x24c>)
 8006e0c:	f000 fd2e 	bl	800786c <memchr>
 8006e10:	9a04      	ldr	r2, [sp, #16]
 8006e12:	b9d8      	cbnz	r0, 8006e4c <_vfiprintf_r+0x12c>
 8006e14:	06d1      	lsls	r1, r2, #27
 8006e16:	bf44      	itt	mi
 8006e18:	2320      	movmi	r3, #32
 8006e1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e1e:	0713      	lsls	r3, r2, #28
 8006e20:	bf44      	itt	mi
 8006e22:	232b      	movmi	r3, #43	; 0x2b
 8006e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e28:	f89a 3000 	ldrb.w	r3, [sl]
 8006e2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e2e:	d015      	beq.n	8006e5c <_vfiprintf_r+0x13c>
 8006e30:	4654      	mov	r4, sl
 8006e32:	2000      	movs	r0, #0
 8006e34:	f04f 0c0a 	mov.w	ip, #10
 8006e38:	9a07      	ldr	r2, [sp, #28]
 8006e3a:	4621      	mov	r1, r4
 8006e3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e40:	3b30      	subs	r3, #48	; 0x30
 8006e42:	2b09      	cmp	r3, #9
 8006e44:	d94e      	bls.n	8006ee4 <_vfiprintf_r+0x1c4>
 8006e46:	b1b0      	cbz	r0, 8006e76 <_vfiprintf_r+0x156>
 8006e48:	9207      	str	r2, [sp, #28]
 8006e4a:	e014      	b.n	8006e76 <_vfiprintf_r+0x156>
 8006e4c:	eba0 0308 	sub.w	r3, r0, r8
 8006e50:	fa09 f303 	lsl.w	r3, r9, r3
 8006e54:	4313      	orrs	r3, r2
 8006e56:	46a2      	mov	sl, r4
 8006e58:	9304      	str	r3, [sp, #16]
 8006e5a:	e7d2      	b.n	8006e02 <_vfiprintf_r+0xe2>
 8006e5c:	9b03      	ldr	r3, [sp, #12]
 8006e5e:	1d19      	adds	r1, r3, #4
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	9103      	str	r1, [sp, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	bfbb      	ittet	lt
 8006e68:	425b      	neglt	r3, r3
 8006e6a:	f042 0202 	orrlt.w	r2, r2, #2
 8006e6e:	9307      	strge	r3, [sp, #28]
 8006e70:	9307      	strlt	r3, [sp, #28]
 8006e72:	bfb8      	it	lt
 8006e74:	9204      	strlt	r2, [sp, #16]
 8006e76:	7823      	ldrb	r3, [r4, #0]
 8006e78:	2b2e      	cmp	r3, #46	; 0x2e
 8006e7a:	d10c      	bne.n	8006e96 <_vfiprintf_r+0x176>
 8006e7c:	7863      	ldrb	r3, [r4, #1]
 8006e7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e80:	d135      	bne.n	8006eee <_vfiprintf_r+0x1ce>
 8006e82:	9b03      	ldr	r3, [sp, #12]
 8006e84:	3402      	adds	r4, #2
 8006e86:	1d1a      	adds	r2, r3, #4
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	9203      	str	r2, [sp, #12]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	bfb8      	it	lt
 8006e90:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e94:	9305      	str	r3, [sp, #20]
 8006e96:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006f70 <_vfiprintf_r+0x250>
 8006e9a:	2203      	movs	r2, #3
 8006e9c:	4650      	mov	r0, sl
 8006e9e:	7821      	ldrb	r1, [r4, #0]
 8006ea0:	f000 fce4 	bl	800786c <memchr>
 8006ea4:	b140      	cbz	r0, 8006eb8 <_vfiprintf_r+0x198>
 8006ea6:	2340      	movs	r3, #64	; 0x40
 8006ea8:	eba0 000a 	sub.w	r0, r0, sl
 8006eac:	fa03 f000 	lsl.w	r0, r3, r0
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	3401      	adds	r4, #1
 8006eb4:	4303      	orrs	r3, r0
 8006eb6:	9304      	str	r3, [sp, #16]
 8006eb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ebc:	2206      	movs	r2, #6
 8006ebe:	482d      	ldr	r0, [pc, #180]	; (8006f74 <_vfiprintf_r+0x254>)
 8006ec0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ec4:	f000 fcd2 	bl	800786c <memchr>
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	d03f      	beq.n	8006f4c <_vfiprintf_r+0x22c>
 8006ecc:	4b2a      	ldr	r3, [pc, #168]	; (8006f78 <_vfiprintf_r+0x258>)
 8006ece:	bb1b      	cbnz	r3, 8006f18 <_vfiprintf_r+0x1f8>
 8006ed0:	9b03      	ldr	r3, [sp, #12]
 8006ed2:	3307      	adds	r3, #7
 8006ed4:	f023 0307 	bic.w	r3, r3, #7
 8006ed8:	3308      	adds	r3, #8
 8006eda:	9303      	str	r3, [sp, #12]
 8006edc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ede:	443b      	add	r3, r7
 8006ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ee2:	e767      	b.n	8006db4 <_vfiprintf_r+0x94>
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	2001      	movs	r0, #1
 8006ee8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eec:	e7a5      	b.n	8006e3a <_vfiprintf_r+0x11a>
 8006eee:	2300      	movs	r3, #0
 8006ef0:	f04f 0c0a 	mov.w	ip, #10
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	3401      	adds	r4, #1
 8006ef8:	9305      	str	r3, [sp, #20]
 8006efa:	4620      	mov	r0, r4
 8006efc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f00:	3a30      	subs	r2, #48	; 0x30
 8006f02:	2a09      	cmp	r2, #9
 8006f04:	d903      	bls.n	8006f0e <_vfiprintf_r+0x1ee>
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d0c5      	beq.n	8006e96 <_vfiprintf_r+0x176>
 8006f0a:	9105      	str	r1, [sp, #20]
 8006f0c:	e7c3      	b.n	8006e96 <_vfiprintf_r+0x176>
 8006f0e:	4604      	mov	r4, r0
 8006f10:	2301      	movs	r3, #1
 8006f12:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f16:	e7f0      	b.n	8006efa <_vfiprintf_r+0x1da>
 8006f18:	ab03      	add	r3, sp, #12
 8006f1a:	9300      	str	r3, [sp, #0]
 8006f1c:	462a      	mov	r2, r5
 8006f1e:	4630      	mov	r0, r6
 8006f20:	4b16      	ldr	r3, [pc, #88]	; (8006f7c <_vfiprintf_r+0x25c>)
 8006f22:	a904      	add	r1, sp, #16
 8006f24:	f3af 8000 	nop.w
 8006f28:	4607      	mov	r7, r0
 8006f2a:	1c78      	adds	r0, r7, #1
 8006f2c:	d1d6      	bne.n	8006edc <_vfiprintf_r+0x1bc>
 8006f2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006f30:	07d9      	lsls	r1, r3, #31
 8006f32:	d405      	bmi.n	8006f40 <_vfiprintf_r+0x220>
 8006f34:	89ab      	ldrh	r3, [r5, #12]
 8006f36:	059a      	lsls	r2, r3, #22
 8006f38:	d402      	bmi.n	8006f40 <_vfiprintf_r+0x220>
 8006f3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006f3c:	f7ff fec8 	bl	8006cd0 <__retarget_lock_release_recursive>
 8006f40:	89ab      	ldrh	r3, [r5, #12]
 8006f42:	065b      	lsls	r3, r3, #25
 8006f44:	f53f af12 	bmi.w	8006d6c <_vfiprintf_r+0x4c>
 8006f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f4a:	e711      	b.n	8006d70 <_vfiprintf_r+0x50>
 8006f4c:	ab03      	add	r3, sp, #12
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	462a      	mov	r2, r5
 8006f52:	4630      	mov	r0, r6
 8006f54:	4b09      	ldr	r3, [pc, #36]	; (8006f7c <_vfiprintf_r+0x25c>)
 8006f56:	a904      	add	r1, sp, #16
 8006f58:	f000 f882 	bl	8007060 <_printf_i>
 8006f5c:	e7e4      	b.n	8006f28 <_vfiprintf_r+0x208>
 8006f5e:	bf00      	nop
 8006f60:	0800811c 	.word	0x0800811c
 8006f64:	0800813c 	.word	0x0800813c
 8006f68:	080080fc 	.word	0x080080fc
 8006f6c:	080080c8 	.word	0x080080c8
 8006f70:	080080ce 	.word	0x080080ce
 8006f74:	080080d2 	.word	0x080080d2
 8006f78:	00000000 	.word	0x00000000
 8006f7c:	08006cfd 	.word	0x08006cfd

08006f80 <_printf_common>:
 8006f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f84:	4616      	mov	r6, r2
 8006f86:	4699      	mov	r9, r3
 8006f88:	688a      	ldr	r2, [r1, #8]
 8006f8a:	690b      	ldr	r3, [r1, #16]
 8006f8c:	4607      	mov	r7, r0
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	bfb8      	it	lt
 8006f92:	4613      	movlt	r3, r2
 8006f94:	6033      	str	r3, [r6, #0]
 8006f96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f9a:	460c      	mov	r4, r1
 8006f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fa0:	b10a      	cbz	r2, 8006fa6 <_printf_common+0x26>
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	6033      	str	r3, [r6, #0]
 8006fa6:	6823      	ldr	r3, [r4, #0]
 8006fa8:	0699      	lsls	r1, r3, #26
 8006faa:	bf42      	ittt	mi
 8006fac:	6833      	ldrmi	r3, [r6, #0]
 8006fae:	3302      	addmi	r3, #2
 8006fb0:	6033      	strmi	r3, [r6, #0]
 8006fb2:	6825      	ldr	r5, [r4, #0]
 8006fb4:	f015 0506 	ands.w	r5, r5, #6
 8006fb8:	d106      	bne.n	8006fc8 <_printf_common+0x48>
 8006fba:	f104 0a19 	add.w	sl, r4, #25
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	6832      	ldr	r2, [r6, #0]
 8006fc2:	1a9b      	subs	r3, r3, r2
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dc28      	bgt.n	800701a <_printf_common+0x9a>
 8006fc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fcc:	1e13      	subs	r3, r2, #0
 8006fce:	6822      	ldr	r2, [r4, #0]
 8006fd0:	bf18      	it	ne
 8006fd2:	2301      	movne	r3, #1
 8006fd4:	0692      	lsls	r2, r2, #26
 8006fd6:	d42d      	bmi.n	8007034 <_printf_common+0xb4>
 8006fd8:	4649      	mov	r1, r9
 8006fda:	4638      	mov	r0, r7
 8006fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fe0:	47c0      	blx	r8
 8006fe2:	3001      	adds	r0, #1
 8006fe4:	d020      	beq.n	8007028 <_printf_common+0xa8>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	68e5      	ldr	r5, [r4, #12]
 8006fea:	f003 0306 	and.w	r3, r3, #6
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	bf18      	it	ne
 8006ff2:	2500      	movne	r5, #0
 8006ff4:	6832      	ldr	r2, [r6, #0]
 8006ff6:	f04f 0600 	mov.w	r6, #0
 8006ffa:	68a3      	ldr	r3, [r4, #8]
 8006ffc:	bf08      	it	eq
 8006ffe:	1aad      	subeq	r5, r5, r2
 8007000:	6922      	ldr	r2, [r4, #16]
 8007002:	bf08      	it	eq
 8007004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007008:	4293      	cmp	r3, r2
 800700a:	bfc4      	itt	gt
 800700c:	1a9b      	subgt	r3, r3, r2
 800700e:	18ed      	addgt	r5, r5, r3
 8007010:	341a      	adds	r4, #26
 8007012:	42b5      	cmp	r5, r6
 8007014:	d11a      	bne.n	800704c <_printf_common+0xcc>
 8007016:	2000      	movs	r0, #0
 8007018:	e008      	b.n	800702c <_printf_common+0xac>
 800701a:	2301      	movs	r3, #1
 800701c:	4652      	mov	r2, sl
 800701e:	4649      	mov	r1, r9
 8007020:	4638      	mov	r0, r7
 8007022:	47c0      	blx	r8
 8007024:	3001      	adds	r0, #1
 8007026:	d103      	bne.n	8007030 <_printf_common+0xb0>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295
 800702c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007030:	3501      	adds	r5, #1
 8007032:	e7c4      	b.n	8006fbe <_printf_common+0x3e>
 8007034:	2030      	movs	r0, #48	; 0x30
 8007036:	18e1      	adds	r1, r4, r3
 8007038:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007042:	4422      	add	r2, r4
 8007044:	3302      	adds	r3, #2
 8007046:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800704a:	e7c5      	b.n	8006fd8 <_printf_common+0x58>
 800704c:	2301      	movs	r3, #1
 800704e:	4622      	mov	r2, r4
 8007050:	4649      	mov	r1, r9
 8007052:	4638      	mov	r0, r7
 8007054:	47c0      	blx	r8
 8007056:	3001      	adds	r0, #1
 8007058:	d0e6      	beq.n	8007028 <_printf_common+0xa8>
 800705a:	3601      	adds	r6, #1
 800705c:	e7d9      	b.n	8007012 <_printf_common+0x92>
	...

08007060 <_printf_i>:
 8007060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007064:	7e0f      	ldrb	r7, [r1, #24]
 8007066:	4691      	mov	r9, r2
 8007068:	2f78      	cmp	r7, #120	; 0x78
 800706a:	4680      	mov	r8, r0
 800706c:	460c      	mov	r4, r1
 800706e:	469a      	mov	sl, r3
 8007070:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007076:	d807      	bhi.n	8007088 <_printf_i+0x28>
 8007078:	2f62      	cmp	r7, #98	; 0x62
 800707a:	d80a      	bhi.n	8007092 <_printf_i+0x32>
 800707c:	2f00      	cmp	r7, #0
 800707e:	f000 80d9 	beq.w	8007234 <_printf_i+0x1d4>
 8007082:	2f58      	cmp	r7, #88	; 0x58
 8007084:	f000 80a4 	beq.w	80071d0 <_printf_i+0x170>
 8007088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800708c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007090:	e03a      	b.n	8007108 <_printf_i+0xa8>
 8007092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007096:	2b15      	cmp	r3, #21
 8007098:	d8f6      	bhi.n	8007088 <_printf_i+0x28>
 800709a:	a101      	add	r1, pc, #4	; (adr r1, 80070a0 <_printf_i+0x40>)
 800709c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	0800710d 	.word	0x0800710d
 80070a8:	08007089 	.word	0x08007089
 80070ac:	08007089 	.word	0x08007089
 80070b0:	08007089 	.word	0x08007089
 80070b4:	08007089 	.word	0x08007089
 80070b8:	0800710d 	.word	0x0800710d
 80070bc:	08007089 	.word	0x08007089
 80070c0:	08007089 	.word	0x08007089
 80070c4:	08007089 	.word	0x08007089
 80070c8:	08007089 	.word	0x08007089
 80070cc:	0800721b 	.word	0x0800721b
 80070d0:	0800713d 	.word	0x0800713d
 80070d4:	080071fd 	.word	0x080071fd
 80070d8:	08007089 	.word	0x08007089
 80070dc:	08007089 	.word	0x08007089
 80070e0:	0800723d 	.word	0x0800723d
 80070e4:	08007089 	.word	0x08007089
 80070e8:	0800713d 	.word	0x0800713d
 80070ec:	08007089 	.word	0x08007089
 80070f0:	08007089 	.word	0x08007089
 80070f4:	08007205 	.word	0x08007205
 80070f8:	682b      	ldr	r3, [r5, #0]
 80070fa:	1d1a      	adds	r2, r3, #4
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	602a      	str	r2, [r5, #0]
 8007100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007108:	2301      	movs	r3, #1
 800710a:	e0a4      	b.n	8007256 <_printf_i+0x1f6>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	6829      	ldr	r1, [r5, #0]
 8007110:	0606      	lsls	r6, r0, #24
 8007112:	f101 0304 	add.w	r3, r1, #4
 8007116:	d50a      	bpl.n	800712e <_printf_i+0xce>
 8007118:	680e      	ldr	r6, [r1, #0]
 800711a:	602b      	str	r3, [r5, #0]
 800711c:	2e00      	cmp	r6, #0
 800711e:	da03      	bge.n	8007128 <_printf_i+0xc8>
 8007120:	232d      	movs	r3, #45	; 0x2d
 8007122:	4276      	negs	r6, r6
 8007124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007128:	230a      	movs	r3, #10
 800712a:	485e      	ldr	r0, [pc, #376]	; (80072a4 <_printf_i+0x244>)
 800712c:	e019      	b.n	8007162 <_printf_i+0x102>
 800712e:	680e      	ldr	r6, [r1, #0]
 8007130:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007134:	602b      	str	r3, [r5, #0]
 8007136:	bf18      	it	ne
 8007138:	b236      	sxthne	r6, r6
 800713a:	e7ef      	b.n	800711c <_printf_i+0xbc>
 800713c:	682b      	ldr	r3, [r5, #0]
 800713e:	6820      	ldr	r0, [r4, #0]
 8007140:	1d19      	adds	r1, r3, #4
 8007142:	6029      	str	r1, [r5, #0]
 8007144:	0601      	lsls	r1, r0, #24
 8007146:	d501      	bpl.n	800714c <_printf_i+0xec>
 8007148:	681e      	ldr	r6, [r3, #0]
 800714a:	e002      	b.n	8007152 <_printf_i+0xf2>
 800714c:	0646      	lsls	r6, r0, #25
 800714e:	d5fb      	bpl.n	8007148 <_printf_i+0xe8>
 8007150:	881e      	ldrh	r6, [r3, #0]
 8007152:	2f6f      	cmp	r7, #111	; 0x6f
 8007154:	bf0c      	ite	eq
 8007156:	2308      	moveq	r3, #8
 8007158:	230a      	movne	r3, #10
 800715a:	4852      	ldr	r0, [pc, #328]	; (80072a4 <_printf_i+0x244>)
 800715c:	2100      	movs	r1, #0
 800715e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007162:	6865      	ldr	r5, [r4, #4]
 8007164:	2d00      	cmp	r5, #0
 8007166:	bfa8      	it	ge
 8007168:	6821      	ldrge	r1, [r4, #0]
 800716a:	60a5      	str	r5, [r4, #8]
 800716c:	bfa4      	itt	ge
 800716e:	f021 0104 	bicge.w	r1, r1, #4
 8007172:	6021      	strge	r1, [r4, #0]
 8007174:	b90e      	cbnz	r6, 800717a <_printf_i+0x11a>
 8007176:	2d00      	cmp	r5, #0
 8007178:	d04d      	beq.n	8007216 <_printf_i+0x1b6>
 800717a:	4615      	mov	r5, r2
 800717c:	fbb6 f1f3 	udiv	r1, r6, r3
 8007180:	fb03 6711 	mls	r7, r3, r1, r6
 8007184:	5dc7      	ldrb	r7, [r0, r7]
 8007186:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800718a:	4637      	mov	r7, r6
 800718c:	42bb      	cmp	r3, r7
 800718e:	460e      	mov	r6, r1
 8007190:	d9f4      	bls.n	800717c <_printf_i+0x11c>
 8007192:	2b08      	cmp	r3, #8
 8007194:	d10b      	bne.n	80071ae <_printf_i+0x14e>
 8007196:	6823      	ldr	r3, [r4, #0]
 8007198:	07de      	lsls	r6, r3, #31
 800719a:	d508      	bpl.n	80071ae <_printf_i+0x14e>
 800719c:	6923      	ldr	r3, [r4, #16]
 800719e:	6861      	ldr	r1, [r4, #4]
 80071a0:	4299      	cmp	r1, r3
 80071a2:	bfde      	ittt	le
 80071a4:	2330      	movle	r3, #48	; 0x30
 80071a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071ae:	1b52      	subs	r2, r2, r5
 80071b0:	6122      	str	r2, [r4, #16]
 80071b2:	464b      	mov	r3, r9
 80071b4:	4621      	mov	r1, r4
 80071b6:	4640      	mov	r0, r8
 80071b8:	f8cd a000 	str.w	sl, [sp]
 80071bc:	aa03      	add	r2, sp, #12
 80071be:	f7ff fedf 	bl	8006f80 <_printf_common>
 80071c2:	3001      	adds	r0, #1
 80071c4:	d14c      	bne.n	8007260 <_printf_i+0x200>
 80071c6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ca:	b004      	add	sp, #16
 80071cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071d0:	4834      	ldr	r0, [pc, #208]	; (80072a4 <_printf_i+0x244>)
 80071d2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80071d6:	6829      	ldr	r1, [r5, #0]
 80071d8:	6823      	ldr	r3, [r4, #0]
 80071da:	f851 6b04 	ldr.w	r6, [r1], #4
 80071de:	6029      	str	r1, [r5, #0]
 80071e0:	061d      	lsls	r5, r3, #24
 80071e2:	d514      	bpl.n	800720e <_printf_i+0x1ae>
 80071e4:	07df      	lsls	r7, r3, #31
 80071e6:	bf44      	itt	mi
 80071e8:	f043 0320 	orrmi.w	r3, r3, #32
 80071ec:	6023      	strmi	r3, [r4, #0]
 80071ee:	b91e      	cbnz	r6, 80071f8 <_printf_i+0x198>
 80071f0:	6823      	ldr	r3, [r4, #0]
 80071f2:	f023 0320 	bic.w	r3, r3, #32
 80071f6:	6023      	str	r3, [r4, #0]
 80071f8:	2310      	movs	r3, #16
 80071fa:	e7af      	b.n	800715c <_printf_i+0xfc>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	f043 0320 	orr.w	r3, r3, #32
 8007202:	6023      	str	r3, [r4, #0]
 8007204:	2378      	movs	r3, #120	; 0x78
 8007206:	4828      	ldr	r0, [pc, #160]	; (80072a8 <_printf_i+0x248>)
 8007208:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800720c:	e7e3      	b.n	80071d6 <_printf_i+0x176>
 800720e:	0659      	lsls	r1, r3, #25
 8007210:	bf48      	it	mi
 8007212:	b2b6      	uxthmi	r6, r6
 8007214:	e7e6      	b.n	80071e4 <_printf_i+0x184>
 8007216:	4615      	mov	r5, r2
 8007218:	e7bb      	b.n	8007192 <_printf_i+0x132>
 800721a:	682b      	ldr	r3, [r5, #0]
 800721c:	6826      	ldr	r6, [r4, #0]
 800721e:	1d18      	adds	r0, r3, #4
 8007220:	6961      	ldr	r1, [r4, #20]
 8007222:	6028      	str	r0, [r5, #0]
 8007224:	0635      	lsls	r5, r6, #24
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	d501      	bpl.n	800722e <_printf_i+0x1ce>
 800722a:	6019      	str	r1, [r3, #0]
 800722c:	e002      	b.n	8007234 <_printf_i+0x1d4>
 800722e:	0670      	lsls	r0, r6, #25
 8007230:	d5fb      	bpl.n	800722a <_printf_i+0x1ca>
 8007232:	8019      	strh	r1, [r3, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	4615      	mov	r5, r2
 8007238:	6123      	str	r3, [r4, #16]
 800723a:	e7ba      	b.n	80071b2 <_printf_i+0x152>
 800723c:	682b      	ldr	r3, [r5, #0]
 800723e:	2100      	movs	r1, #0
 8007240:	1d1a      	adds	r2, r3, #4
 8007242:	602a      	str	r2, [r5, #0]
 8007244:	681d      	ldr	r5, [r3, #0]
 8007246:	6862      	ldr	r2, [r4, #4]
 8007248:	4628      	mov	r0, r5
 800724a:	f000 fb0f 	bl	800786c <memchr>
 800724e:	b108      	cbz	r0, 8007254 <_printf_i+0x1f4>
 8007250:	1b40      	subs	r0, r0, r5
 8007252:	6060      	str	r0, [r4, #4]
 8007254:	6863      	ldr	r3, [r4, #4]
 8007256:	6123      	str	r3, [r4, #16]
 8007258:	2300      	movs	r3, #0
 800725a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800725e:	e7a8      	b.n	80071b2 <_printf_i+0x152>
 8007260:	462a      	mov	r2, r5
 8007262:	4649      	mov	r1, r9
 8007264:	4640      	mov	r0, r8
 8007266:	6923      	ldr	r3, [r4, #16]
 8007268:	47d0      	blx	sl
 800726a:	3001      	adds	r0, #1
 800726c:	d0ab      	beq.n	80071c6 <_printf_i+0x166>
 800726e:	6823      	ldr	r3, [r4, #0]
 8007270:	079b      	lsls	r3, r3, #30
 8007272:	d413      	bmi.n	800729c <_printf_i+0x23c>
 8007274:	68e0      	ldr	r0, [r4, #12]
 8007276:	9b03      	ldr	r3, [sp, #12]
 8007278:	4298      	cmp	r0, r3
 800727a:	bfb8      	it	lt
 800727c:	4618      	movlt	r0, r3
 800727e:	e7a4      	b.n	80071ca <_printf_i+0x16a>
 8007280:	2301      	movs	r3, #1
 8007282:	4632      	mov	r2, r6
 8007284:	4649      	mov	r1, r9
 8007286:	4640      	mov	r0, r8
 8007288:	47d0      	blx	sl
 800728a:	3001      	adds	r0, #1
 800728c:	d09b      	beq.n	80071c6 <_printf_i+0x166>
 800728e:	3501      	adds	r5, #1
 8007290:	68e3      	ldr	r3, [r4, #12]
 8007292:	9903      	ldr	r1, [sp, #12]
 8007294:	1a5b      	subs	r3, r3, r1
 8007296:	42ab      	cmp	r3, r5
 8007298:	dcf2      	bgt.n	8007280 <_printf_i+0x220>
 800729a:	e7eb      	b.n	8007274 <_printf_i+0x214>
 800729c:	2500      	movs	r5, #0
 800729e:	f104 0619 	add.w	r6, r4, #25
 80072a2:	e7f5      	b.n	8007290 <_printf_i+0x230>
 80072a4:	080080d9 	.word	0x080080d9
 80072a8:	080080ea 	.word	0x080080ea

080072ac <__swbuf_r>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	460e      	mov	r6, r1
 80072b0:	4614      	mov	r4, r2
 80072b2:	4605      	mov	r5, r0
 80072b4:	b118      	cbz	r0, 80072be <__swbuf_r+0x12>
 80072b6:	6983      	ldr	r3, [r0, #24]
 80072b8:	b90b      	cbnz	r3, 80072be <__swbuf_r+0x12>
 80072ba:	f000 f9d5 	bl	8007668 <__sinit>
 80072be:	4b21      	ldr	r3, [pc, #132]	; (8007344 <__swbuf_r+0x98>)
 80072c0:	429c      	cmp	r4, r3
 80072c2:	d12b      	bne.n	800731c <__swbuf_r+0x70>
 80072c4:	686c      	ldr	r4, [r5, #4]
 80072c6:	69a3      	ldr	r3, [r4, #24]
 80072c8:	60a3      	str	r3, [r4, #8]
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	071a      	lsls	r2, r3, #28
 80072ce:	d52f      	bpl.n	8007330 <__swbuf_r+0x84>
 80072d0:	6923      	ldr	r3, [r4, #16]
 80072d2:	b36b      	cbz	r3, 8007330 <__swbuf_r+0x84>
 80072d4:	6923      	ldr	r3, [r4, #16]
 80072d6:	6820      	ldr	r0, [r4, #0]
 80072d8:	b2f6      	uxtb	r6, r6
 80072da:	1ac0      	subs	r0, r0, r3
 80072dc:	6963      	ldr	r3, [r4, #20]
 80072de:	4637      	mov	r7, r6
 80072e0:	4283      	cmp	r3, r0
 80072e2:	dc04      	bgt.n	80072ee <__swbuf_r+0x42>
 80072e4:	4621      	mov	r1, r4
 80072e6:	4628      	mov	r0, r5
 80072e8:	f000 f92a 	bl	8007540 <_fflush_r>
 80072ec:	bb30      	cbnz	r0, 800733c <__swbuf_r+0x90>
 80072ee:	68a3      	ldr	r3, [r4, #8]
 80072f0:	3001      	adds	r0, #1
 80072f2:	3b01      	subs	r3, #1
 80072f4:	60a3      	str	r3, [r4, #8]
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	1c5a      	adds	r2, r3, #1
 80072fa:	6022      	str	r2, [r4, #0]
 80072fc:	701e      	strb	r6, [r3, #0]
 80072fe:	6963      	ldr	r3, [r4, #20]
 8007300:	4283      	cmp	r3, r0
 8007302:	d004      	beq.n	800730e <__swbuf_r+0x62>
 8007304:	89a3      	ldrh	r3, [r4, #12]
 8007306:	07db      	lsls	r3, r3, #31
 8007308:	d506      	bpl.n	8007318 <__swbuf_r+0x6c>
 800730a:	2e0a      	cmp	r6, #10
 800730c:	d104      	bne.n	8007318 <__swbuf_r+0x6c>
 800730e:	4621      	mov	r1, r4
 8007310:	4628      	mov	r0, r5
 8007312:	f000 f915 	bl	8007540 <_fflush_r>
 8007316:	b988      	cbnz	r0, 800733c <__swbuf_r+0x90>
 8007318:	4638      	mov	r0, r7
 800731a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800731c:	4b0a      	ldr	r3, [pc, #40]	; (8007348 <__swbuf_r+0x9c>)
 800731e:	429c      	cmp	r4, r3
 8007320:	d101      	bne.n	8007326 <__swbuf_r+0x7a>
 8007322:	68ac      	ldr	r4, [r5, #8]
 8007324:	e7cf      	b.n	80072c6 <__swbuf_r+0x1a>
 8007326:	4b09      	ldr	r3, [pc, #36]	; (800734c <__swbuf_r+0xa0>)
 8007328:	429c      	cmp	r4, r3
 800732a:	bf08      	it	eq
 800732c:	68ec      	ldreq	r4, [r5, #12]
 800732e:	e7ca      	b.n	80072c6 <__swbuf_r+0x1a>
 8007330:	4621      	mov	r1, r4
 8007332:	4628      	mov	r0, r5
 8007334:	f000 f80c 	bl	8007350 <__swsetup_r>
 8007338:	2800      	cmp	r0, #0
 800733a:	d0cb      	beq.n	80072d4 <__swbuf_r+0x28>
 800733c:	f04f 37ff 	mov.w	r7, #4294967295
 8007340:	e7ea      	b.n	8007318 <__swbuf_r+0x6c>
 8007342:	bf00      	nop
 8007344:	0800811c 	.word	0x0800811c
 8007348:	0800813c 	.word	0x0800813c
 800734c:	080080fc 	.word	0x080080fc

08007350 <__swsetup_r>:
 8007350:	4b32      	ldr	r3, [pc, #200]	; (800741c <__swsetup_r+0xcc>)
 8007352:	b570      	push	{r4, r5, r6, lr}
 8007354:	681d      	ldr	r5, [r3, #0]
 8007356:	4606      	mov	r6, r0
 8007358:	460c      	mov	r4, r1
 800735a:	b125      	cbz	r5, 8007366 <__swsetup_r+0x16>
 800735c:	69ab      	ldr	r3, [r5, #24]
 800735e:	b913      	cbnz	r3, 8007366 <__swsetup_r+0x16>
 8007360:	4628      	mov	r0, r5
 8007362:	f000 f981 	bl	8007668 <__sinit>
 8007366:	4b2e      	ldr	r3, [pc, #184]	; (8007420 <__swsetup_r+0xd0>)
 8007368:	429c      	cmp	r4, r3
 800736a:	d10f      	bne.n	800738c <__swsetup_r+0x3c>
 800736c:	686c      	ldr	r4, [r5, #4]
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007374:	0719      	lsls	r1, r3, #28
 8007376:	d42c      	bmi.n	80073d2 <__swsetup_r+0x82>
 8007378:	06dd      	lsls	r5, r3, #27
 800737a:	d411      	bmi.n	80073a0 <__swsetup_r+0x50>
 800737c:	2309      	movs	r3, #9
 800737e:	6033      	str	r3, [r6, #0]
 8007380:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007384:	f04f 30ff 	mov.w	r0, #4294967295
 8007388:	81a3      	strh	r3, [r4, #12]
 800738a:	e03e      	b.n	800740a <__swsetup_r+0xba>
 800738c:	4b25      	ldr	r3, [pc, #148]	; (8007424 <__swsetup_r+0xd4>)
 800738e:	429c      	cmp	r4, r3
 8007390:	d101      	bne.n	8007396 <__swsetup_r+0x46>
 8007392:	68ac      	ldr	r4, [r5, #8]
 8007394:	e7eb      	b.n	800736e <__swsetup_r+0x1e>
 8007396:	4b24      	ldr	r3, [pc, #144]	; (8007428 <__swsetup_r+0xd8>)
 8007398:	429c      	cmp	r4, r3
 800739a:	bf08      	it	eq
 800739c:	68ec      	ldreq	r4, [r5, #12]
 800739e:	e7e6      	b.n	800736e <__swsetup_r+0x1e>
 80073a0:	0758      	lsls	r0, r3, #29
 80073a2:	d512      	bpl.n	80073ca <__swsetup_r+0x7a>
 80073a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80073a6:	b141      	cbz	r1, 80073ba <__swsetup_r+0x6a>
 80073a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073ac:	4299      	cmp	r1, r3
 80073ae:	d002      	beq.n	80073b6 <__swsetup_r+0x66>
 80073b0:	4630      	mov	r0, r6
 80073b2:	f7fd fc51 	bl	8004c58 <_free_r>
 80073b6:	2300      	movs	r3, #0
 80073b8:	6363      	str	r3, [r4, #52]	; 0x34
 80073ba:	89a3      	ldrh	r3, [r4, #12]
 80073bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80073c0:	81a3      	strh	r3, [r4, #12]
 80073c2:	2300      	movs	r3, #0
 80073c4:	6063      	str	r3, [r4, #4]
 80073c6:	6923      	ldr	r3, [r4, #16]
 80073c8:	6023      	str	r3, [r4, #0]
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f043 0308 	orr.w	r3, r3, #8
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	6923      	ldr	r3, [r4, #16]
 80073d4:	b94b      	cbnz	r3, 80073ea <__swsetup_r+0x9a>
 80073d6:	89a3      	ldrh	r3, [r4, #12]
 80073d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80073dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80073e0:	d003      	beq.n	80073ea <__swsetup_r+0x9a>
 80073e2:	4621      	mov	r1, r4
 80073e4:	4630      	mov	r0, r6
 80073e6:	f000 fa01 	bl	80077ec <__smakebuf_r>
 80073ea:	89a0      	ldrh	r0, [r4, #12]
 80073ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073f0:	f010 0301 	ands.w	r3, r0, #1
 80073f4:	d00a      	beq.n	800740c <__swsetup_r+0xbc>
 80073f6:	2300      	movs	r3, #0
 80073f8:	60a3      	str	r3, [r4, #8]
 80073fa:	6963      	ldr	r3, [r4, #20]
 80073fc:	425b      	negs	r3, r3
 80073fe:	61a3      	str	r3, [r4, #24]
 8007400:	6923      	ldr	r3, [r4, #16]
 8007402:	b943      	cbnz	r3, 8007416 <__swsetup_r+0xc6>
 8007404:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007408:	d1ba      	bne.n	8007380 <__swsetup_r+0x30>
 800740a:	bd70      	pop	{r4, r5, r6, pc}
 800740c:	0781      	lsls	r1, r0, #30
 800740e:	bf58      	it	pl
 8007410:	6963      	ldrpl	r3, [r4, #20]
 8007412:	60a3      	str	r3, [r4, #8]
 8007414:	e7f4      	b.n	8007400 <__swsetup_r+0xb0>
 8007416:	2000      	movs	r0, #0
 8007418:	e7f7      	b.n	800740a <__swsetup_r+0xba>
 800741a:	bf00      	nop
 800741c:	20000054 	.word	0x20000054
 8007420:	0800811c 	.word	0x0800811c
 8007424:	0800813c 	.word	0x0800813c
 8007428:	080080fc 	.word	0x080080fc

0800742c <abort>:
 800742c:	2006      	movs	r0, #6
 800742e:	b508      	push	{r3, lr}
 8007430:	f000 fa52 	bl	80078d8 <raise>
 8007434:	2001      	movs	r0, #1
 8007436:	f7fb fd28 	bl	8002e8a <_exit>
	...

0800743c <__sflush_r>:
 800743c:	898a      	ldrh	r2, [r1, #12]
 800743e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007440:	4605      	mov	r5, r0
 8007442:	0710      	lsls	r0, r2, #28
 8007444:	460c      	mov	r4, r1
 8007446:	d457      	bmi.n	80074f8 <__sflush_r+0xbc>
 8007448:	684b      	ldr	r3, [r1, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	dc04      	bgt.n	8007458 <__sflush_r+0x1c>
 800744e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007450:	2b00      	cmp	r3, #0
 8007452:	dc01      	bgt.n	8007458 <__sflush_r+0x1c>
 8007454:	2000      	movs	r0, #0
 8007456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007458:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800745a:	2e00      	cmp	r6, #0
 800745c:	d0fa      	beq.n	8007454 <__sflush_r+0x18>
 800745e:	2300      	movs	r3, #0
 8007460:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007464:	682f      	ldr	r7, [r5, #0]
 8007466:	602b      	str	r3, [r5, #0]
 8007468:	d032      	beq.n	80074d0 <__sflush_r+0x94>
 800746a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	075a      	lsls	r2, r3, #29
 8007470:	d505      	bpl.n	800747e <__sflush_r+0x42>
 8007472:	6863      	ldr	r3, [r4, #4]
 8007474:	1ac0      	subs	r0, r0, r3
 8007476:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007478:	b10b      	cbz	r3, 800747e <__sflush_r+0x42>
 800747a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800747c:	1ac0      	subs	r0, r0, r3
 800747e:	2300      	movs	r3, #0
 8007480:	4602      	mov	r2, r0
 8007482:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007484:	4628      	mov	r0, r5
 8007486:	6a21      	ldr	r1, [r4, #32]
 8007488:	47b0      	blx	r6
 800748a:	1c43      	adds	r3, r0, #1
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	d106      	bne.n	800749e <__sflush_r+0x62>
 8007490:	6829      	ldr	r1, [r5, #0]
 8007492:	291d      	cmp	r1, #29
 8007494:	d82c      	bhi.n	80074f0 <__sflush_r+0xb4>
 8007496:	4a29      	ldr	r2, [pc, #164]	; (800753c <__sflush_r+0x100>)
 8007498:	40ca      	lsrs	r2, r1
 800749a:	07d6      	lsls	r6, r2, #31
 800749c:	d528      	bpl.n	80074f0 <__sflush_r+0xb4>
 800749e:	2200      	movs	r2, #0
 80074a0:	6062      	str	r2, [r4, #4]
 80074a2:	6922      	ldr	r2, [r4, #16]
 80074a4:	04d9      	lsls	r1, r3, #19
 80074a6:	6022      	str	r2, [r4, #0]
 80074a8:	d504      	bpl.n	80074b4 <__sflush_r+0x78>
 80074aa:	1c42      	adds	r2, r0, #1
 80074ac:	d101      	bne.n	80074b2 <__sflush_r+0x76>
 80074ae:	682b      	ldr	r3, [r5, #0]
 80074b0:	b903      	cbnz	r3, 80074b4 <__sflush_r+0x78>
 80074b2:	6560      	str	r0, [r4, #84]	; 0x54
 80074b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074b6:	602f      	str	r7, [r5, #0]
 80074b8:	2900      	cmp	r1, #0
 80074ba:	d0cb      	beq.n	8007454 <__sflush_r+0x18>
 80074bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80074c0:	4299      	cmp	r1, r3
 80074c2:	d002      	beq.n	80074ca <__sflush_r+0x8e>
 80074c4:	4628      	mov	r0, r5
 80074c6:	f7fd fbc7 	bl	8004c58 <_free_r>
 80074ca:	2000      	movs	r0, #0
 80074cc:	6360      	str	r0, [r4, #52]	; 0x34
 80074ce:	e7c2      	b.n	8007456 <__sflush_r+0x1a>
 80074d0:	6a21      	ldr	r1, [r4, #32]
 80074d2:	2301      	movs	r3, #1
 80074d4:	4628      	mov	r0, r5
 80074d6:	47b0      	blx	r6
 80074d8:	1c41      	adds	r1, r0, #1
 80074da:	d1c7      	bne.n	800746c <__sflush_r+0x30>
 80074dc:	682b      	ldr	r3, [r5, #0]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d0c4      	beq.n	800746c <__sflush_r+0x30>
 80074e2:	2b1d      	cmp	r3, #29
 80074e4:	d001      	beq.n	80074ea <__sflush_r+0xae>
 80074e6:	2b16      	cmp	r3, #22
 80074e8:	d101      	bne.n	80074ee <__sflush_r+0xb2>
 80074ea:	602f      	str	r7, [r5, #0]
 80074ec:	e7b2      	b.n	8007454 <__sflush_r+0x18>
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074f4:	81a3      	strh	r3, [r4, #12]
 80074f6:	e7ae      	b.n	8007456 <__sflush_r+0x1a>
 80074f8:	690f      	ldr	r7, [r1, #16]
 80074fa:	2f00      	cmp	r7, #0
 80074fc:	d0aa      	beq.n	8007454 <__sflush_r+0x18>
 80074fe:	0793      	lsls	r3, r2, #30
 8007500:	bf18      	it	ne
 8007502:	2300      	movne	r3, #0
 8007504:	680e      	ldr	r6, [r1, #0]
 8007506:	bf08      	it	eq
 8007508:	694b      	ldreq	r3, [r1, #20]
 800750a:	1bf6      	subs	r6, r6, r7
 800750c:	600f      	str	r7, [r1, #0]
 800750e:	608b      	str	r3, [r1, #8]
 8007510:	2e00      	cmp	r6, #0
 8007512:	dd9f      	ble.n	8007454 <__sflush_r+0x18>
 8007514:	4633      	mov	r3, r6
 8007516:	463a      	mov	r2, r7
 8007518:	4628      	mov	r0, r5
 800751a:	6a21      	ldr	r1, [r4, #32]
 800751c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007520:	47e0      	blx	ip
 8007522:	2800      	cmp	r0, #0
 8007524:	dc06      	bgt.n	8007534 <__sflush_r+0xf8>
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	f04f 30ff 	mov.w	r0, #4294967295
 800752c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007530:	81a3      	strh	r3, [r4, #12]
 8007532:	e790      	b.n	8007456 <__sflush_r+0x1a>
 8007534:	4407      	add	r7, r0
 8007536:	1a36      	subs	r6, r6, r0
 8007538:	e7ea      	b.n	8007510 <__sflush_r+0xd4>
 800753a:	bf00      	nop
 800753c:	20400001 	.word	0x20400001

08007540 <_fflush_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	690b      	ldr	r3, [r1, #16]
 8007544:	4605      	mov	r5, r0
 8007546:	460c      	mov	r4, r1
 8007548:	b913      	cbnz	r3, 8007550 <_fflush_r+0x10>
 800754a:	2500      	movs	r5, #0
 800754c:	4628      	mov	r0, r5
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	b118      	cbz	r0, 800755a <_fflush_r+0x1a>
 8007552:	6983      	ldr	r3, [r0, #24]
 8007554:	b90b      	cbnz	r3, 800755a <_fflush_r+0x1a>
 8007556:	f000 f887 	bl	8007668 <__sinit>
 800755a:	4b14      	ldr	r3, [pc, #80]	; (80075ac <_fflush_r+0x6c>)
 800755c:	429c      	cmp	r4, r3
 800755e:	d11b      	bne.n	8007598 <_fflush_r+0x58>
 8007560:	686c      	ldr	r4, [r5, #4]
 8007562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d0ef      	beq.n	800754a <_fflush_r+0xa>
 800756a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800756c:	07d0      	lsls	r0, r2, #31
 800756e:	d404      	bmi.n	800757a <_fflush_r+0x3a>
 8007570:	0599      	lsls	r1, r3, #22
 8007572:	d402      	bmi.n	800757a <_fflush_r+0x3a>
 8007574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007576:	f7ff fbaa 	bl	8006cce <__retarget_lock_acquire_recursive>
 800757a:	4628      	mov	r0, r5
 800757c:	4621      	mov	r1, r4
 800757e:	f7ff ff5d 	bl	800743c <__sflush_r>
 8007582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007584:	4605      	mov	r5, r0
 8007586:	07da      	lsls	r2, r3, #31
 8007588:	d4e0      	bmi.n	800754c <_fflush_r+0xc>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	059b      	lsls	r3, r3, #22
 800758e:	d4dd      	bmi.n	800754c <_fflush_r+0xc>
 8007590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007592:	f7ff fb9d 	bl	8006cd0 <__retarget_lock_release_recursive>
 8007596:	e7d9      	b.n	800754c <_fflush_r+0xc>
 8007598:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <_fflush_r+0x70>)
 800759a:	429c      	cmp	r4, r3
 800759c:	d101      	bne.n	80075a2 <_fflush_r+0x62>
 800759e:	68ac      	ldr	r4, [r5, #8]
 80075a0:	e7df      	b.n	8007562 <_fflush_r+0x22>
 80075a2:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <_fflush_r+0x74>)
 80075a4:	429c      	cmp	r4, r3
 80075a6:	bf08      	it	eq
 80075a8:	68ec      	ldreq	r4, [r5, #12]
 80075aa:	e7da      	b.n	8007562 <_fflush_r+0x22>
 80075ac:	0800811c 	.word	0x0800811c
 80075b0:	0800813c 	.word	0x0800813c
 80075b4:	080080fc 	.word	0x080080fc

080075b8 <std>:
 80075b8:	2300      	movs	r3, #0
 80075ba:	b510      	push	{r4, lr}
 80075bc:	4604      	mov	r4, r0
 80075be:	e9c0 3300 	strd	r3, r3, [r0]
 80075c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80075c6:	6083      	str	r3, [r0, #8]
 80075c8:	8181      	strh	r1, [r0, #12]
 80075ca:	6643      	str	r3, [r0, #100]	; 0x64
 80075cc:	81c2      	strh	r2, [r0, #14]
 80075ce:	6183      	str	r3, [r0, #24]
 80075d0:	4619      	mov	r1, r3
 80075d2:	2208      	movs	r2, #8
 80075d4:	305c      	adds	r0, #92	; 0x5c
 80075d6:	f7fd fb37 	bl	8004c48 <memset>
 80075da:	4b05      	ldr	r3, [pc, #20]	; (80075f0 <std+0x38>)
 80075dc:	6224      	str	r4, [r4, #32]
 80075de:	6263      	str	r3, [r4, #36]	; 0x24
 80075e0:	4b04      	ldr	r3, [pc, #16]	; (80075f4 <std+0x3c>)
 80075e2:	62a3      	str	r3, [r4, #40]	; 0x28
 80075e4:	4b04      	ldr	r3, [pc, #16]	; (80075f8 <std+0x40>)
 80075e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80075e8:	4b04      	ldr	r3, [pc, #16]	; (80075fc <std+0x44>)
 80075ea:	6323      	str	r3, [r4, #48]	; 0x30
 80075ec:	bd10      	pop	{r4, pc}
 80075ee:	bf00      	nop
 80075f0:	08007911 	.word	0x08007911
 80075f4:	08007933 	.word	0x08007933
 80075f8:	0800796b 	.word	0x0800796b
 80075fc:	0800798f 	.word	0x0800798f

08007600 <_cleanup_r>:
 8007600:	4901      	ldr	r1, [pc, #4]	; (8007608 <_cleanup_r+0x8>)
 8007602:	f000 b8af 	b.w	8007764 <_fwalk_reent>
 8007606:	bf00      	nop
 8007608:	08007541 	.word	0x08007541

0800760c <__sfmoreglue>:
 800760c:	2268      	movs	r2, #104	; 0x68
 800760e:	b570      	push	{r4, r5, r6, lr}
 8007610:	1e4d      	subs	r5, r1, #1
 8007612:	4355      	muls	r5, r2
 8007614:	460e      	mov	r6, r1
 8007616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800761a:	f7fd fb85 	bl	8004d28 <_malloc_r>
 800761e:	4604      	mov	r4, r0
 8007620:	b140      	cbz	r0, 8007634 <__sfmoreglue+0x28>
 8007622:	2100      	movs	r1, #0
 8007624:	e9c0 1600 	strd	r1, r6, [r0]
 8007628:	300c      	adds	r0, #12
 800762a:	60a0      	str	r0, [r4, #8]
 800762c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007630:	f7fd fb0a 	bl	8004c48 <memset>
 8007634:	4620      	mov	r0, r4
 8007636:	bd70      	pop	{r4, r5, r6, pc}

08007638 <__sfp_lock_acquire>:
 8007638:	4801      	ldr	r0, [pc, #4]	; (8007640 <__sfp_lock_acquire+0x8>)
 800763a:	f7ff bb48 	b.w	8006cce <__retarget_lock_acquire_recursive>
 800763e:	bf00      	nop
 8007640:	20000e89 	.word	0x20000e89

08007644 <__sfp_lock_release>:
 8007644:	4801      	ldr	r0, [pc, #4]	; (800764c <__sfp_lock_release+0x8>)
 8007646:	f7ff bb43 	b.w	8006cd0 <__retarget_lock_release_recursive>
 800764a:	bf00      	nop
 800764c:	20000e89 	.word	0x20000e89

08007650 <__sinit_lock_acquire>:
 8007650:	4801      	ldr	r0, [pc, #4]	; (8007658 <__sinit_lock_acquire+0x8>)
 8007652:	f7ff bb3c 	b.w	8006cce <__retarget_lock_acquire_recursive>
 8007656:	bf00      	nop
 8007658:	20000e8a 	.word	0x20000e8a

0800765c <__sinit_lock_release>:
 800765c:	4801      	ldr	r0, [pc, #4]	; (8007664 <__sinit_lock_release+0x8>)
 800765e:	f7ff bb37 	b.w	8006cd0 <__retarget_lock_release_recursive>
 8007662:	bf00      	nop
 8007664:	20000e8a 	.word	0x20000e8a

08007668 <__sinit>:
 8007668:	b510      	push	{r4, lr}
 800766a:	4604      	mov	r4, r0
 800766c:	f7ff fff0 	bl	8007650 <__sinit_lock_acquire>
 8007670:	69a3      	ldr	r3, [r4, #24]
 8007672:	b11b      	cbz	r3, 800767c <__sinit+0x14>
 8007674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007678:	f7ff bff0 	b.w	800765c <__sinit_lock_release>
 800767c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007680:	6523      	str	r3, [r4, #80]	; 0x50
 8007682:	4b13      	ldr	r3, [pc, #76]	; (80076d0 <__sinit+0x68>)
 8007684:	4a13      	ldr	r2, [pc, #76]	; (80076d4 <__sinit+0x6c>)
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	62a2      	str	r2, [r4, #40]	; 0x28
 800768a:	42a3      	cmp	r3, r4
 800768c:	bf08      	it	eq
 800768e:	2301      	moveq	r3, #1
 8007690:	4620      	mov	r0, r4
 8007692:	bf08      	it	eq
 8007694:	61a3      	streq	r3, [r4, #24]
 8007696:	f000 f81f 	bl	80076d8 <__sfp>
 800769a:	6060      	str	r0, [r4, #4]
 800769c:	4620      	mov	r0, r4
 800769e:	f000 f81b 	bl	80076d8 <__sfp>
 80076a2:	60a0      	str	r0, [r4, #8]
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 f817 	bl	80076d8 <__sfp>
 80076aa:	2200      	movs	r2, #0
 80076ac:	2104      	movs	r1, #4
 80076ae:	60e0      	str	r0, [r4, #12]
 80076b0:	6860      	ldr	r0, [r4, #4]
 80076b2:	f7ff ff81 	bl	80075b8 <std>
 80076b6:	2201      	movs	r2, #1
 80076b8:	2109      	movs	r1, #9
 80076ba:	68a0      	ldr	r0, [r4, #8]
 80076bc:	f7ff ff7c 	bl	80075b8 <std>
 80076c0:	2202      	movs	r2, #2
 80076c2:	2112      	movs	r1, #18
 80076c4:	68e0      	ldr	r0, [r4, #12]
 80076c6:	f7ff ff77 	bl	80075b8 <std>
 80076ca:	2301      	movs	r3, #1
 80076cc:	61a3      	str	r3, [r4, #24]
 80076ce:	e7d1      	b.n	8007674 <__sinit+0xc>
 80076d0:	08007d30 	.word	0x08007d30
 80076d4:	08007601 	.word	0x08007601

080076d8 <__sfp>:
 80076d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076da:	4607      	mov	r7, r0
 80076dc:	f7ff ffac 	bl	8007638 <__sfp_lock_acquire>
 80076e0:	4b1e      	ldr	r3, [pc, #120]	; (800775c <__sfp+0x84>)
 80076e2:	681e      	ldr	r6, [r3, #0]
 80076e4:	69b3      	ldr	r3, [r6, #24]
 80076e6:	b913      	cbnz	r3, 80076ee <__sfp+0x16>
 80076e8:	4630      	mov	r0, r6
 80076ea:	f7ff ffbd 	bl	8007668 <__sinit>
 80076ee:	3648      	adds	r6, #72	; 0x48
 80076f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80076f4:	3b01      	subs	r3, #1
 80076f6:	d503      	bpl.n	8007700 <__sfp+0x28>
 80076f8:	6833      	ldr	r3, [r6, #0]
 80076fa:	b30b      	cbz	r3, 8007740 <__sfp+0x68>
 80076fc:	6836      	ldr	r6, [r6, #0]
 80076fe:	e7f7      	b.n	80076f0 <__sfp+0x18>
 8007700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007704:	b9d5      	cbnz	r5, 800773c <__sfp+0x64>
 8007706:	4b16      	ldr	r3, [pc, #88]	; (8007760 <__sfp+0x88>)
 8007708:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800770c:	60e3      	str	r3, [r4, #12]
 800770e:	6665      	str	r5, [r4, #100]	; 0x64
 8007710:	f7ff fadc 	bl	8006ccc <__retarget_lock_init_recursive>
 8007714:	f7ff ff96 	bl	8007644 <__sfp_lock_release>
 8007718:	2208      	movs	r2, #8
 800771a:	4629      	mov	r1, r5
 800771c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007720:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007724:	6025      	str	r5, [r4, #0]
 8007726:	61a5      	str	r5, [r4, #24]
 8007728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800772c:	f7fd fa8c 	bl	8004c48 <memset>
 8007730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007738:	4620      	mov	r0, r4
 800773a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800773c:	3468      	adds	r4, #104	; 0x68
 800773e:	e7d9      	b.n	80076f4 <__sfp+0x1c>
 8007740:	2104      	movs	r1, #4
 8007742:	4638      	mov	r0, r7
 8007744:	f7ff ff62 	bl	800760c <__sfmoreglue>
 8007748:	4604      	mov	r4, r0
 800774a:	6030      	str	r0, [r6, #0]
 800774c:	2800      	cmp	r0, #0
 800774e:	d1d5      	bne.n	80076fc <__sfp+0x24>
 8007750:	f7ff ff78 	bl	8007644 <__sfp_lock_release>
 8007754:	230c      	movs	r3, #12
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	e7ee      	b.n	8007738 <__sfp+0x60>
 800775a:	bf00      	nop
 800775c:	08007d30 	.word	0x08007d30
 8007760:	ffff0001 	.word	0xffff0001

08007764 <_fwalk_reent>:
 8007764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007768:	4606      	mov	r6, r0
 800776a:	4688      	mov	r8, r1
 800776c:	2700      	movs	r7, #0
 800776e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007772:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007776:	f1b9 0901 	subs.w	r9, r9, #1
 800777a:	d505      	bpl.n	8007788 <_fwalk_reent+0x24>
 800777c:	6824      	ldr	r4, [r4, #0]
 800777e:	2c00      	cmp	r4, #0
 8007780:	d1f7      	bne.n	8007772 <_fwalk_reent+0xe>
 8007782:	4638      	mov	r0, r7
 8007784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007788:	89ab      	ldrh	r3, [r5, #12]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d907      	bls.n	800779e <_fwalk_reent+0x3a>
 800778e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007792:	3301      	adds	r3, #1
 8007794:	d003      	beq.n	800779e <_fwalk_reent+0x3a>
 8007796:	4629      	mov	r1, r5
 8007798:	4630      	mov	r0, r6
 800779a:	47c0      	blx	r8
 800779c:	4307      	orrs	r7, r0
 800779e:	3568      	adds	r5, #104	; 0x68
 80077a0:	e7e9      	b.n	8007776 <_fwalk_reent+0x12>

080077a2 <__swhatbuf_r>:
 80077a2:	b570      	push	{r4, r5, r6, lr}
 80077a4:	460e      	mov	r6, r1
 80077a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077aa:	4614      	mov	r4, r2
 80077ac:	2900      	cmp	r1, #0
 80077ae:	461d      	mov	r5, r3
 80077b0:	b096      	sub	sp, #88	; 0x58
 80077b2:	da08      	bge.n	80077c6 <__swhatbuf_r+0x24>
 80077b4:	2200      	movs	r2, #0
 80077b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80077ba:	602a      	str	r2, [r5, #0]
 80077bc:	061a      	lsls	r2, r3, #24
 80077be:	d410      	bmi.n	80077e2 <__swhatbuf_r+0x40>
 80077c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c4:	e00e      	b.n	80077e4 <__swhatbuf_r+0x42>
 80077c6:	466a      	mov	r2, sp
 80077c8:	f000 f908 	bl	80079dc <_fstat_r>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	dbf1      	blt.n	80077b4 <__swhatbuf_r+0x12>
 80077d0:	9a01      	ldr	r2, [sp, #4]
 80077d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077da:	425a      	negs	r2, r3
 80077dc:	415a      	adcs	r2, r3
 80077de:	602a      	str	r2, [r5, #0]
 80077e0:	e7ee      	b.n	80077c0 <__swhatbuf_r+0x1e>
 80077e2:	2340      	movs	r3, #64	; 0x40
 80077e4:	2000      	movs	r0, #0
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	b016      	add	sp, #88	; 0x58
 80077ea:	bd70      	pop	{r4, r5, r6, pc}

080077ec <__smakebuf_r>:
 80077ec:	898b      	ldrh	r3, [r1, #12]
 80077ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077f0:	079d      	lsls	r5, r3, #30
 80077f2:	4606      	mov	r6, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	d507      	bpl.n	8007808 <__smakebuf_r+0x1c>
 80077f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	2301      	movs	r3, #1
 8007802:	6163      	str	r3, [r4, #20]
 8007804:	b002      	add	sp, #8
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	466a      	mov	r2, sp
 800780a:	ab01      	add	r3, sp, #4
 800780c:	f7ff ffc9 	bl	80077a2 <__swhatbuf_r>
 8007810:	9900      	ldr	r1, [sp, #0]
 8007812:	4605      	mov	r5, r0
 8007814:	4630      	mov	r0, r6
 8007816:	f7fd fa87 	bl	8004d28 <_malloc_r>
 800781a:	b948      	cbnz	r0, 8007830 <__smakebuf_r+0x44>
 800781c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007820:	059a      	lsls	r2, r3, #22
 8007822:	d4ef      	bmi.n	8007804 <__smakebuf_r+0x18>
 8007824:	f023 0303 	bic.w	r3, r3, #3
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	81a3      	strh	r3, [r4, #12]
 800782e:	e7e3      	b.n	80077f8 <__smakebuf_r+0xc>
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <__smakebuf_r+0x7c>)
 8007832:	62b3      	str	r3, [r6, #40]	; 0x28
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	6020      	str	r0, [r4, #0]
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	6120      	str	r0, [r4, #16]
 8007842:	6163      	str	r3, [r4, #20]
 8007844:	9b01      	ldr	r3, [sp, #4]
 8007846:	b15b      	cbz	r3, 8007860 <__smakebuf_r+0x74>
 8007848:	4630      	mov	r0, r6
 800784a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800784e:	f000 f8d7 	bl	8007a00 <_isatty_r>
 8007852:	b128      	cbz	r0, 8007860 <__smakebuf_r+0x74>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	89a0      	ldrh	r0, [r4, #12]
 8007862:	4305      	orrs	r5, r0
 8007864:	81a5      	strh	r5, [r4, #12]
 8007866:	e7cd      	b.n	8007804 <__smakebuf_r+0x18>
 8007868:	08007601 	.word	0x08007601

0800786c <memchr>:
 800786c:	4603      	mov	r3, r0
 800786e:	b510      	push	{r4, lr}
 8007870:	b2c9      	uxtb	r1, r1
 8007872:	4402      	add	r2, r0
 8007874:	4293      	cmp	r3, r2
 8007876:	4618      	mov	r0, r3
 8007878:	d101      	bne.n	800787e <memchr+0x12>
 800787a:	2000      	movs	r0, #0
 800787c:	e003      	b.n	8007886 <memchr+0x1a>
 800787e:	7804      	ldrb	r4, [r0, #0]
 8007880:	3301      	adds	r3, #1
 8007882:	428c      	cmp	r4, r1
 8007884:	d1f6      	bne.n	8007874 <memchr+0x8>
 8007886:	bd10      	pop	{r4, pc}

08007888 <_raise_r>:
 8007888:	291f      	cmp	r1, #31
 800788a:	b538      	push	{r3, r4, r5, lr}
 800788c:	4604      	mov	r4, r0
 800788e:	460d      	mov	r5, r1
 8007890:	d904      	bls.n	800789c <_raise_r+0x14>
 8007892:	2316      	movs	r3, #22
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	f04f 30ff 	mov.w	r0, #4294967295
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800789e:	b112      	cbz	r2, 80078a6 <_raise_r+0x1e>
 80078a0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078a4:	b94b      	cbnz	r3, 80078ba <_raise_r+0x32>
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 f830 	bl	800790c <_getpid_r>
 80078ac:	462a      	mov	r2, r5
 80078ae:	4601      	mov	r1, r0
 80078b0:	4620      	mov	r0, r4
 80078b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078b6:	f000 b817 	b.w	80078e8 <_kill_r>
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d00a      	beq.n	80078d4 <_raise_r+0x4c>
 80078be:	1c59      	adds	r1, r3, #1
 80078c0:	d103      	bne.n	80078ca <_raise_r+0x42>
 80078c2:	2316      	movs	r3, #22
 80078c4:	6003      	str	r3, [r0, #0]
 80078c6:	2001      	movs	r0, #1
 80078c8:	e7e7      	b.n	800789a <_raise_r+0x12>
 80078ca:	2400      	movs	r4, #0
 80078cc:	4628      	mov	r0, r5
 80078ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80078d2:	4798      	blx	r3
 80078d4:	2000      	movs	r0, #0
 80078d6:	e7e0      	b.n	800789a <_raise_r+0x12>

080078d8 <raise>:
 80078d8:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <raise+0xc>)
 80078da:	4601      	mov	r1, r0
 80078dc:	6818      	ldr	r0, [r3, #0]
 80078de:	f7ff bfd3 	b.w	8007888 <_raise_r>
 80078e2:	bf00      	nop
 80078e4:	20000054 	.word	0x20000054

080078e8 <_kill_r>:
 80078e8:	b538      	push	{r3, r4, r5, lr}
 80078ea:	2300      	movs	r3, #0
 80078ec:	4d06      	ldr	r5, [pc, #24]	; (8007908 <_kill_r+0x20>)
 80078ee:	4604      	mov	r4, r0
 80078f0:	4608      	mov	r0, r1
 80078f2:	4611      	mov	r1, r2
 80078f4:	602b      	str	r3, [r5, #0]
 80078f6:	f7fb fab8 	bl	8002e6a <_kill>
 80078fa:	1c43      	adds	r3, r0, #1
 80078fc:	d102      	bne.n	8007904 <_kill_r+0x1c>
 80078fe:	682b      	ldr	r3, [r5, #0]
 8007900:	b103      	cbz	r3, 8007904 <_kill_r+0x1c>
 8007902:	6023      	str	r3, [r4, #0]
 8007904:	bd38      	pop	{r3, r4, r5, pc}
 8007906:	bf00      	nop
 8007908:	20000e84 	.word	0x20000e84

0800790c <_getpid_r>:
 800790c:	f7fb baa6 	b.w	8002e5c <_getpid>

08007910 <__sread>:
 8007910:	b510      	push	{r4, lr}
 8007912:	460c      	mov	r4, r1
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	f000 f894 	bl	8007a44 <_read_r>
 800791c:	2800      	cmp	r0, #0
 800791e:	bfab      	itete	ge
 8007920:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007922:	89a3      	ldrhlt	r3, [r4, #12]
 8007924:	181b      	addge	r3, r3, r0
 8007926:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800792a:	bfac      	ite	ge
 800792c:	6563      	strge	r3, [r4, #84]	; 0x54
 800792e:	81a3      	strhlt	r3, [r4, #12]
 8007930:	bd10      	pop	{r4, pc}

08007932 <__swrite>:
 8007932:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007936:	461f      	mov	r7, r3
 8007938:	898b      	ldrh	r3, [r1, #12]
 800793a:	4605      	mov	r5, r0
 800793c:	05db      	lsls	r3, r3, #23
 800793e:	460c      	mov	r4, r1
 8007940:	4616      	mov	r6, r2
 8007942:	d505      	bpl.n	8007950 <__swrite+0x1e>
 8007944:	2302      	movs	r3, #2
 8007946:	2200      	movs	r2, #0
 8007948:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800794c:	f000 f868 	bl	8007a20 <_lseek_r>
 8007950:	89a3      	ldrh	r3, [r4, #12]
 8007952:	4632      	mov	r2, r6
 8007954:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007958:	81a3      	strh	r3, [r4, #12]
 800795a:	4628      	mov	r0, r5
 800795c:	463b      	mov	r3, r7
 800795e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007962:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007966:	f000 b817 	b.w	8007998 <_write_r>

0800796a <__sseek>:
 800796a:	b510      	push	{r4, lr}
 800796c:	460c      	mov	r4, r1
 800796e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007972:	f000 f855 	bl	8007a20 <_lseek_r>
 8007976:	1c43      	adds	r3, r0, #1
 8007978:	89a3      	ldrh	r3, [r4, #12]
 800797a:	bf15      	itete	ne
 800797c:	6560      	strne	r0, [r4, #84]	; 0x54
 800797e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007982:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007986:	81a3      	strheq	r3, [r4, #12]
 8007988:	bf18      	it	ne
 800798a:	81a3      	strhne	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__sclose>:
 800798e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007992:	f000 b813 	b.w	80079bc <_close_r>
	...

08007998 <_write_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	2200      	movs	r2, #0
 80079a2:	4d05      	ldr	r5, [pc, #20]	; (80079b8 <_write_r+0x20>)
 80079a4:	602a      	str	r2, [r5, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f7fb fa96 	bl	8002ed8 <_write>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_write_r+0x1e>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_write_r+0x1e>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	20000e84 	.word	0x20000e84

080079bc <_close_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	2300      	movs	r3, #0
 80079c0:	4d05      	ldr	r5, [pc, #20]	; (80079d8 <_close_r+0x1c>)
 80079c2:	4604      	mov	r4, r0
 80079c4:	4608      	mov	r0, r1
 80079c6:	602b      	str	r3, [r5, #0]
 80079c8:	f7fb faa2 	bl	8002f10 <_close>
 80079cc:	1c43      	adds	r3, r0, #1
 80079ce:	d102      	bne.n	80079d6 <_close_r+0x1a>
 80079d0:	682b      	ldr	r3, [r5, #0]
 80079d2:	b103      	cbz	r3, 80079d6 <_close_r+0x1a>
 80079d4:	6023      	str	r3, [r4, #0]
 80079d6:	bd38      	pop	{r3, r4, r5, pc}
 80079d8:	20000e84 	.word	0x20000e84

080079dc <_fstat_r>:
 80079dc:	b538      	push	{r3, r4, r5, lr}
 80079de:	2300      	movs	r3, #0
 80079e0:	4d06      	ldr	r5, [pc, #24]	; (80079fc <_fstat_r+0x20>)
 80079e2:	4604      	mov	r4, r0
 80079e4:	4608      	mov	r0, r1
 80079e6:	4611      	mov	r1, r2
 80079e8:	602b      	str	r3, [r5, #0]
 80079ea:	f7fb fa9c 	bl	8002f26 <_fstat>
 80079ee:	1c43      	adds	r3, r0, #1
 80079f0:	d102      	bne.n	80079f8 <_fstat_r+0x1c>
 80079f2:	682b      	ldr	r3, [r5, #0]
 80079f4:	b103      	cbz	r3, 80079f8 <_fstat_r+0x1c>
 80079f6:	6023      	str	r3, [r4, #0]
 80079f8:	bd38      	pop	{r3, r4, r5, pc}
 80079fa:	bf00      	nop
 80079fc:	20000e84 	.word	0x20000e84

08007a00 <_isatty_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	2300      	movs	r3, #0
 8007a04:	4d05      	ldr	r5, [pc, #20]	; (8007a1c <_isatty_r+0x1c>)
 8007a06:	4604      	mov	r4, r0
 8007a08:	4608      	mov	r0, r1
 8007a0a:	602b      	str	r3, [r5, #0]
 8007a0c:	f7fb fa9a 	bl	8002f44 <_isatty>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d102      	bne.n	8007a1a <_isatty_r+0x1a>
 8007a14:	682b      	ldr	r3, [r5, #0]
 8007a16:	b103      	cbz	r3, 8007a1a <_isatty_r+0x1a>
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	bd38      	pop	{r3, r4, r5, pc}
 8007a1c:	20000e84 	.word	0x20000e84

08007a20 <_lseek_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4604      	mov	r4, r0
 8007a24:	4608      	mov	r0, r1
 8007a26:	4611      	mov	r1, r2
 8007a28:	2200      	movs	r2, #0
 8007a2a:	4d05      	ldr	r5, [pc, #20]	; (8007a40 <_lseek_r+0x20>)
 8007a2c:	602a      	str	r2, [r5, #0]
 8007a2e:	461a      	mov	r2, r3
 8007a30:	f7fb fa92 	bl	8002f58 <_lseek>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_lseek_r+0x1e>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_lseek_r+0x1e>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	20000e84 	.word	0x20000e84

08007a44 <_read_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4604      	mov	r4, r0
 8007a48:	4608      	mov	r0, r1
 8007a4a:	4611      	mov	r1, r2
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	4d05      	ldr	r5, [pc, #20]	; (8007a64 <_read_r+0x20>)
 8007a50:	602a      	str	r2, [r5, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	f7fb fa23 	bl	8002e9e <_read>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_read_r+0x1e>
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_read_r+0x1e>
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	20000e84 	.word	0x20000e84

08007a68 <_init>:
 8007a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6a:	bf00      	nop
 8007a6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a6e:	bc08      	pop	{r3}
 8007a70:	469e      	mov	lr, r3
 8007a72:	4770      	bx	lr

08007a74 <_fini>:
 8007a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a76:	bf00      	nop
 8007a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7a:	bc08      	pop	{r3}
 8007a7c:	469e      	mov	lr, r3
 8007a7e:	4770      	bx	lr
